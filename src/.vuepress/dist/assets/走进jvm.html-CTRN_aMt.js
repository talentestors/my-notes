import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{ah as a,ap as e,ai as p}from"./app-CAqLFJSb.js";const l="/my-notes/assets/b8TSFRoZayuUOlQ-D_wDqcxw.jpg",i="/my-notes/assets/SgBybA8xC3MrD6k-BLhgnkYI.jpg",t="/my-notes/assets/vNoWyDGsuwY23OE-DHL86pY-.jpg",c="/my-notes/assets/FuCI49TPSRpaitE-DQx1VfoH.webp",o="/my-notes/assets/JcfyIZm85AXECoh-DMZ3eNn3.jpg",r="/my-notes/assets/BKqTOH8RrjoAWMw-CrJ4lIaz.jpg",u="/my-notes/assets/TAcqg1Sx3KwOQZz-DmmLw0hh.webp",d="/my-notes/assets/FbEYsV1zvIf9TWl-D9gLQLmw.webp",v="/my-notes/assets/YZcxklCK7hvnapV-CgAJRM9V.webp",m="/my-notes/assets/AcdjJWy8QnxlTa4-Ci39Vce7.webp",k="/my-notes/assets/tZzqg2GD3LSbn9o-CA9oJ9ow.webp",b="/my-notes/assets/DgkhOvWYfAiB1yq-DUGojUxy.webp",g="/my-notes/assets/X3F2Hjvplnm17UJ-BVWdgMeH.webp",h="/my-notes/assets/SoP1fVekqM4R8sd-zOO_mF94.webp",f="/my-notes/assets/c4IKjgrhtw3ak9p-CkDMS7wC.webp",y="/my-notes/assets/QS9FxGhdsMRBCcm-CmX5ZuGE.webp",w="/my-notes/assets/AdKbxHjlGwDfUY2-C088UbGp.webp",_={};function J(j,n){return p(),a("div",null,n[0]||(n[0]=[e('<div class="hint-container tip"><p class="hint-container-title">提示</p><p>课程地址：<a href="https://www.bilibili.com/video/BV1Er4y1r7as/" target="_blank" rel="noopener noreferrer">https://www.bilibili.com/video/BV1Er4y1r7as/</a></p></div><p>JVM 相对于 Java 应用层的学习难度更大，<strong>开篇推荐掌握的预备知识：</strong> C/C++(关键)、微机原理与接口技术、计算机组成原理、操作系统、数据结构与算法、编译原理（不推荐刚学完 JavaSE 的同学学习），如果没有掌握推荐的一半以上的预备知识，可能学习起来会比较吃力。</p><p><strong>本套课程中需要用到的开发工具：</strong> CLion、IDEA、Jetbrains Gateway</p><p>此阶段，我们需要深入探讨 Java 的底层执行原理，了解 Java 程序运行的本质。开始之前，推荐各位都入手一本《深入理解 Java 虚拟机 第三版》这本书对于 JVM 的讲述非常地详细：</p><figure><img src="'+l+'" alt="点击查看图片来源" tabindex="0" loading="lazy"><figcaption>点击查看图片来源</figcaption></figure><p>我们在 JavaSE 阶段的开篇就进行介绍了，我们的 Java 程序之所以能够实现跨平台，本质就是因为它是运行在虚拟机之上的，而不同平台只需要安装对应平台的 Java 虚拟机即可运行（在 JRE 中包含），所有的 Java 程序都采用统一的标准，在任何平台编译出来的字节码文件(.class)也是同样的，最后实际上是将编译后的字节码交给 JVM 处理执行。</p><figure><img src="'+i+'" alt="点击查看图片来源" tabindex="0" loading="lazy"><figcaption>点击查看图片来源</figcaption></figure><p>也正是得益于这种统一规范，除了 Java 以外，还有多种 JVM 语言，比如 Kotlin、Groovy 等，它们的语法虽然和 Java 不一样，但是最终编译得到的字节码文件，和 Java 是同样的规范，同样可以交给 JVM 处理。</p><figure><img src="'+t+'" alt="点击查看图片来源" tabindex="0" loading="lazy"><figcaption>点击查看图片来源</figcaption></figure><p>所以，JVM 是我们需要去关注的一个部分，通过了解 Java 的底层运作机制，我们的技术会得到质的提升。</p><h2 id="技术概述" tabindex="-1"><a class="header-anchor" href="#技术概述"><span>技术概述</span></a></h2><p>首先我们要了解虚拟机的具体定义，我们所接触过的虚拟机有安装操作系统的虚拟机，也有我们的 Java 虚拟机，而它们所面向的对象不同，Java 虚拟机只是面向单一应用程序的虚拟机，但是它和我们接触的系统级虚拟机一样，我们也可以为其分配实际的硬件资源，比如最大内存大小等。</p><p>并且 Java 虚拟机并没有采用传统的 PC 架构，比如现在的 HotSpot 虚拟机，实际上采用的是<code>基于栈的指令集架构</code>，而我们的传统程序设计一般都是<code>基于寄存器的指令集架构</code>，这里我们需要回顾一下<code>计算机组成原理</code>中的 CPU 结构：</p><figure><img src="'+c+`" alt="image-20230306164318560" tabindex="0" loading="lazy"><figcaption>image-20230306164318560</figcaption></figure><p>其中，<strong>AX，BX，CX，DX 称作为数据寄存器：</strong></p><ul><li>AX (Accumulator)：累加寄存器，也称之为累加器；</li><li>BX (Base)：基地址寄存器；</li><li>CX (Count)：计数器寄存器；</li><li>DX (Data)：数据寄存器；</li></ul><p>这些寄存器可以用来传送数据和暂存数据，并且它们还可以细分为一个 8 位的高位寄存器和一个 8 位的低位寄存器，除了这些通用功能，它们各自也有自己的一些专属职责，比如 AX 就是一个专用于累加的寄存器，用的也比较多。</p><p><strong>SP 和 BP 又称作为指针寄存器：</strong></p><ul><li>SP (Stack Pointer)：堆栈指针寄存器，与 SS 配合使用，用于访问栈顶；</li><li>BP (Base Pointer)：基指针寄存器，可用作 SS 的一个相对基址位置，用它可直接存取堆栈中的数据；</li></ul><p><strong>SI 和 DI 又称作为变址寄存器：</strong></p><ul><li>SI (Source Index)：源变址寄存器；</li><li>DI (Destination Index)：目的变址寄存器；</li></ul><p>主要用于存放存储单元在段内的偏移量，用它们可实现多种存储器操作数的寻址方式，为以不同的地址形式访问存储单元提供方便。</p><p><strong>控制寄存器：</strong></p><ul><li>IP (Instruction Pointer)：指令指针寄存器；</li><li>FLAG：标志寄存器；</li></ul><p><strong>段寄存器：</strong></p><ul><li>CS (Code Segment)：代码段寄存器；</li><li>DS (Data Segment)：数据段寄存器；</li><li>SS (Stack Segment)：堆栈段寄存器；</li><li>ES (Extra Segment)：附加段寄存器；</li></ul><p>这里我们分别比较一下在 x86 架构下 C 语言和 arm 架构下编译之后的汇编指令不同之处：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment">//实现一个最简的a+b功能，并存入变量c</span></span>
<span class="line">    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> c<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">gcc <span class="token parameter variable">-S</span> main.c</span>
<span class="line"></span></code></pre></div><div class="language-asmatmel line-numbers-mode" data-highlighter="prismjs" data-ext="asmatmel"><pre><code class="language-asmatmel"><span class="line"> <span class="token directive property">.file</span> <span class="token string">&quot;main.c&quot;</span></span>
<span class="line"> .text</span>
<span class="line"> <span class="token directive property">.globl</span> main</span>
<span class="line"> <span class="token directive property">.type</span> main<span class="token punctuation">,</span> @function</span>
<span class="line">main<span class="token punctuation">:</span></span>
<span class="line">.LFB0<span class="token punctuation">:</span></span>
<span class="line"> <span class="token directive property">.cfi_startproc</span>  <span class="token comment">;rbp寄存器是64位CPU下的基址寄存器，和8086CPU的16位bp一样</span></span>
<span class="line"> pushq <span class="token operator">%</span>rbp     <span class="token comment">;该函数中需要用到rbp寄存器，所以需要先把他原来的值压栈保护起来</span></span>
<span class="line"> <span class="token directive property">.cfi_def_cfa_offset</span> <span class="token decimal-number number">16</span></span>
<span class="line"> <span class="token directive property">.cfi_offset</span> <span class="token decimal-number number">6</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token decimal-number number">16</span></span>
<span class="line"> movq <span class="token operator">%</span>rsp<span class="token punctuation">,</span> <span class="token operator">%</span>rbp    <span class="token comment">;rsp是64位下的栈指针寄存器，这里是将rsp的值丢给rbp，因为局部变量是存放在栈中的，之后会使用rbp来访问局部变量</span></span>
<span class="line"> <span class="token directive property">.cfi_def_cfa_register</span> <span class="token decimal-number number">6</span></span>
<span class="line"> movl <span class="token hex-number number">$10</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token decimal-number number">12</span><span class="token punctuation">(</span><span class="token operator">%</span>rbp<span class="token punctuation">)</span>    <span class="token comment">;将10存入rbp所指向位置-12的位置 -&gt;  int a = 10;</span></span>
<span class="line"> movl <span class="token hex-number number">$20</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token decimal-number number">8</span><span class="token punctuation">(</span><span class="token operator">%</span>rbp<span class="token punctuation">)</span>     <span class="token comment">;将20存入rbp所指向位置-8的位置  -&gt; int b = 20;</span></span>
<span class="line"> movl <span class="token operator">-</span><span class="token decimal-number number">12</span><span class="token punctuation">(</span><span class="token operator">%</span>rbp<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">%</span>edx   <span class="token comment">;将变量a的值交给DX寄存器（32位下叫edx，因为是int，这里只使用了32位）</span></span>
<span class="line"> movl <span class="token operator">-</span><span class="token decimal-number number">8</span><span class="token punctuation">(</span><span class="token operator">%</span>rbp<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">%</span>eax    <span class="token comment">;同上，变量b的值丢给AX寄存器</span></span>
<span class="line"> addl <span class="token operator">%</span>edx<span class="token punctuation">,</span> <span class="token operator">%</span>eax        <span class="token comment">;将DX和AX寄存器中的值相加，并将结果存在AX中  -&gt;  tmp = a + b</span></span>
<span class="line"> movl <span class="token operator">%</span>eax<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token decimal-number number">4</span><span class="token punctuation">(</span><span class="token operator">%</span>rbp<span class="token punctuation">)</span>    <span class="token comment">;将20存入rbp所指向位置-4的位置  -&gt; int c = tmp;与上面合在一起就是int c = a + b;</span></span>
<span class="line"> movl <span class="token operator">-</span><span class="token decimal-number number">4</span><span class="token punctuation">(</span><span class="token operator">%</span>rbp<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">%</span>eax    <span class="token comment">;根据约定，将函数返回值放在AX   -&gt; return c;</span></span>
<span class="line"> popq <span class="token operator">%</span>rbp     <span class="token comment">;函数执行完毕，出栈</span></span>
<span class="line"> <span class="token directive property">.cfi_def_cfa</span> <span class="token decimal-number number">7</span><span class="token punctuation">,</span> <span class="token decimal-number number">8</span></span>
<span class="line"> <span class="token op-code keyword">ret</span>      <span class="token comment">;函数返回</span></span>
<span class="line"> .cfi_endproc</span>
<span class="line">.LFE0<span class="token punctuation">:</span></span>
<span class="line"> <span class="token directive property">.size</span> main<span class="token punctuation">,</span> .<span class="token operator">-</span>main</span>
<span class="line"> <span class="token directive property">.ident</span> <span class="token string">&quot;GCC: (Ubuntu 7.5.0-6ubuntu2) 7.5.0&quot;</span></span>
<span class="line"> <span class="token directive property">.section</span> .note.GNU<span class="token operator">-</span>stack<span class="token punctuation">,</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>@progbits</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 arm 架构下（Apple M1 Pro 芯片）编译的结果为：</p><div class="language-armasm line-numbers-mode" data-highlighter="prismjs" data-ext="armasm"><pre><code class="language-armasm"><span class="line">    .section   __TEXT<span class="token punctuation">,</span>__text<span class="token punctuation">,</span>regular<span class="token punctuation">,</span>pure_instructions</span>
<span class="line">   .build_version macos<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">0</span>    sdk_version <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">1</span></span>
<span class="line">   .globl _main                           <span class="token comment">; -- Begin function main</span></span>
<span class="line">   .p2align   <span class="token number">2</span></span>
<span class="line">_main:                                  <span class="token comment">; @main</span></span>
<span class="line">   .cfi_startproc</span>
<span class="line"><span class="token comment">; %bb.0:</span></span>
<span class="line">   sub    sp<span class="token punctuation">,</span> sp<span class="token punctuation">,</span> <span class="token operator">#</span><span class="token number">16</span>                     <span class="token comment">; =16</span></span>
<span class="line">   .cfi_def_cfa_offset <span class="token number">16</span></span>
<span class="line">   str    wzr<span class="token punctuation">,</span> <span class="token punctuation">[</span>sp<span class="token punctuation">,</span> <span class="token operator">#</span><span class="token number">12</span><span class="token punctuation">]</span></span>
<span class="line">   mov    w8<span class="token punctuation">,</span> <span class="token operator">#</span><span class="token number">10</span></span>
<span class="line">   str    w8<span class="token punctuation">,</span> <span class="token punctuation">[</span>sp<span class="token punctuation">,</span> <span class="token operator">#</span><span class="token number">8</span><span class="token punctuation">]</span></span>
<span class="line">   mov    w8<span class="token punctuation">,</span> <span class="token operator">#</span><span class="token number">20</span></span>
<span class="line">   str    w8<span class="token punctuation">,</span> <span class="token punctuation">[</span>sp<span class="token punctuation">,</span> <span class="token operator">#</span><span class="token number">4</span><span class="token punctuation">]</span></span>
<span class="line">   ldr    w8<span class="token punctuation">,</span> <span class="token punctuation">[</span>sp<span class="token punctuation">,</span> <span class="token operator">#</span><span class="token number">8</span><span class="token punctuation">]</span></span>
<span class="line">   ldr    w9<span class="token punctuation">,</span> <span class="token punctuation">[</span>sp<span class="token punctuation">,</span> <span class="token operator">#</span><span class="token number">4</span><span class="token punctuation">]</span></span>
<span class="line">   add    w8<span class="token punctuation">,</span> w8<span class="token punctuation">,</span> w9</span>
<span class="line">   str    w8<span class="token punctuation">,</span> <span class="token punctuation">[</span>sp<span class="token punctuation">]</span></span>
<span class="line">   ldr    w0<span class="token punctuation">,</span> <span class="token punctuation">[</span>sp<span class="token punctuation">]</span></span>
<span class="line">   add    sp<span class="token punctuation">,</span> sp<span class="token punctuation">,</span> <span class="token operator">#</span><span class="token number">16</span>                     <span class="token comment">; =16</span></span>
<span class="line">   ret</span>
<span class="line">   .cfi_endproc</span>
<span class="line">                                        <span class="token comment">; -- End function</span></span>
<span class="line">.subsections_via_symbols</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们发现，在不同的 CPU 架构下，实际上得到的汇编代码也不一样，并且在 arm 架构下并没有和 x86 架构一样的寄存器结构，因此只能使用不同的汇编指令操作来实现。所以这也是 C 语言不支持跨平台的原因，我们只能将同样的代码在不同的平台上编译之后才能在对应的平台上运行我们的程序。</p><p>而 Java 利用了 JVM，它提供了很好的平台无关性（当然，JVM 本身是不跨平台的），我们的 Java 程序编译之后，并不是可以由平台直接运行的程序，而是由 JVM 运行，同时，我们前面说了，JVM（如 HotSpot 虚拟机），实际上采用的是<code>基于栈的指令集架构</code>，它并没有依赖于寄存器，而是更多的利用操作栈来完成，这样不仅设计和实现起来更简单，并且也能够更加方便地实现跨平台，不太依赖于硬件的支持。</p><p>这里我们对一个类进行反编译查看：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//和上面的例子一样</span></span>
<span class="line">        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">int</span> c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> c<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">javap <span class="token parameter variable">-v</span> target/classes/com/test/Main.class <span class="token comment">#使用javap命令对class文件进行反编译</span></span>
<span class="line"></span></code></pre></div><p>得到如下结果：</p><div class="language-wasm line-numbers-mode" data-highlighter="prismjs" data-ext="wasm"><pre><code class="language-wasm"><span class="line">...</span>
<span class="line">public int test<span class="token punctuation">(</span><span class="token punctuation">)</span>;</span>
<span class="line">    descriptor: <span class="token punctuation">(</span><span class="token punctuation">)</span>I</span>
<span class="line">    flags: ACC_PUBLIC</span>
<span class="line">    Code:</span>
<span class="line">      stack=<span class="token number">2</span>, locals=<span class="token number">4</span>, args_size=<span class="token number">1</span></span>
<span class="line">         <span class="token number">0</span>: bipush        <span class="token number">10</span></span>
<span class="line">         <span class="token number">2</span>: istore_1</span>
<span class="line">         <span class="token number">3</span>: bipush        <span class="token number">20</span></span>
<span class="line">         <span class="token number">5</span>: istore_2</span>
<span class="line">         <span class="token number">6</span>: iload_1</span>
<span class="line">         <span class="token number">7</span>: iload_2</span>
<span class="line">         <span class="token number">8</span>: iadd</span>
<span class="line">         <span class="token number">9</span>: istore_3</span>
<span class="line">        <span class="token number">10</span>: iload_3</span>
<span class="line">        <span class="token number">11</span>: ireturn</span>
<span class="line">      LineNumberTable:</span>
<span class="line">        line <span class="token number">5</span>: <span class="token number">0</span></span>
<span class="line">        line <span class="token number">6</span>: <span class="token number">3</span></span>
<span class="line">        line <span class="token number">7</span>: <span class="token number">6</span></span>
<span class="line">        line <span class="token number">8</span>: <span class="token number">10</span></span>
<span class="line">      LocalVariableTable:</span>
<span class="line">        Start  Length  Slot  Name   Signature</span>
<span class="line">            <span class="token number">0</span>      <span class="token number">12</span>     <span class="token number">0</span>  this   Lcom/test/Main;</span>
<span class="line">            <span class="token number">3</span>       <span class="token number">9</span>     <span class="token number">1</span>     a   I</span>
<span class="line">            <span class="token number">6</span>       <span class="token number">6</span>     <span class="token number">2</span>     b   I</span>
<span class="line">           <span class="token number">10</span>       <span class="token number">2</span>     <span class="token number">3</span>     c   I</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以看到，java 文件编译之后，也会生成类似于 C 语言那样的汇编指令，但是这些命令都是交给 JVM 去执行的命令（实际上虚拟机提供了一个类似于物理机的运行环境，也有程序计数器之类的东西），最下方存放的是本地变量（局部变量）表，表示此方法中出现的本地变量，实际上 this 也在其中，所以我们才能在非静态方法中使用<code>this</code>关键字，在最上方标记了方法的返回值类型、访问权限等。首先介绍一下例子中出现的命令代表什么意思：</p><ul><li><code>bipush</code> 将单字节的常量值推到栈顶</li><li><code>istore_1</code> 将栈顶的 int 类型数值存入到第二个本地变量</li><li><code>istore_2</code> 将栈顶的 int 类型数值存入到第三个本地变量</li><li><code>istore_3</code> 将栈顶的 int 类型数值存入到第四个本地变量</li><li><code>iload_1</code> 将第二个本地变量推向栈顶</li><li><code>iload_2</code> 将第三个本地变量推向栈顶</li><li><code>iload_3</code> 将第四个本地变量推向栈顶</li><li><code>iadd</code> 将栈顶的两个 int 类型变量相加，并将结果压入栈顶</li><li><code>ireturn</code> 方法的返回操作</li></ul><p>有关详细的指令介绍列表可以参考《深入理解 Java 虚拟机 第三版》附录 C。</p><p>JVM 运行字节码时，所有的操作基本都是围绕两种数据结构，一种是堆栈（本质是栈结构），还有一种是队列，如果 JVM 执行某条指令时，该指令需要对数据进行操作，那么被操作的数据在指令执行前，必须要压到堆栈上，JVM 会自动将栈顶数据作为操作数。如果堆栈上的数据需要暂时保存起来时，那么它就会被存储到局部变量队列上。</p><p>我们从第一条指令来依次向下解读，显示方法相关属性：</p><div class="language-wasm line-numbers-mode" data-highlighter="prismjs" data-ext="wasm"><pre><code class="language-wasm"><span class="line">descriptor: <span class="token punctuation">(</span><span class="token punctuation">)</span>I     //参数以及返回值类型，<span class="token punctuation">(</span><span class="token punctuation">)</span>I就表示没有形式参数，返回值为基本类型int</span>
<span class="line">flags: ACC_PUBLIC   //public访问权限</span>
<span class="line">Code:</span>
<span class="line">  stack=<span class="token number">2</span>, locals=<span class="token number">4</span>, args_size=<span class="token number">1</span>    //stack表示要用到的最大栈深度，本地变量数，堆栈上最大对象数量（这里指的是this）</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有关 descriptor 的详细属性介绍，我们会放在之后的类结构中进行讲解。</p><p>接着我们来看指令：</p><div class="language-wasm line-numbers-mode" data-highlighter="prismjs" data-ext="wasm"><pre><code class="language-wasm"><span class="line"><span class="token number">0</span>: bipush        <span class="token number">10</span>     //<span class="token number">0</span>是程序偏移地址，然后是指令，最后是操作数</span>
<span class="line"><span class="token number">2</span>: istore_1</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>这一步操作实际上就是使用<code>bipush</code>将 10 推向栈顶，接着使用<code>istore_1</code>将当前栈顶数据存放到第二个局部变量中，也就是 a，所以这一步执行的是<code>int a = 10</code>操作。</p><div class="language-wasm line-numbers-mode" data-highlighter="prismjs" data-ext="wasm"><pre><code class="language-wasm"><span class="line"><span class="token number">3</span>: bipush        <span class="token number">20</span></span>
<span class="line"><span class="token number">5</span>: istore_2</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>同上，这里执行的是<code>int b = 20</code>操作。</p><div class="language-wasm line-numbers-mode" data-highlighter="prismjs" data-ext="wasm"><pre><code class="language-wasm"><span class="line"><span class="token number">6</span>: iload_1</span>
<span class="line"><span class="token number">7</span>: iload_2</span>
<span class="line"><span class="token number">8</span>: iadd</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里是将第二和第三个局部变量放到栈中，也就是取 a 和 b 的值到栈中，最后<code>iadd</code>操作将栈中的两个值相加，结果依然放在栈顶。</p><div class="language-wasm line-numbers-mode" data-highlighter="prismjs" data-ext="wasm"><pre><code class="language-wasm"><span class="line"><span class="token number">9</span>: istore_3</span>
<span class="line"><span class="token number">10</span>: iload_3</span>
<span class="line"><span class="token number">11</span>: ireturn</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将栈顶数据存放到第四个局部变量中，也就是 c，执行的是<code>int c = 30</code>，最后取出 c 的值放入栈顶，使用<code>ireturn</code>返回栈顶值，也就是方法的返回值。</p><p>至此，方法执行完毕。</p><p>实际上我们发现，JVM 执行的命令基本都是入栈出栈等，而且大部分指令都是没有操作数的，传统的汇编指令有一操作数、二操作数甚至三操作数的指令，Java 相比 C 编译出来的汇编指令，执行起来会更加复杂，实现某个功能的指令条数也会更多，所以 Java 的执行效率实际上是不如 C/C++的，虽然能够很方便地实现跨平台，但是性能上大打折扣，所以在性能要求比较苛刻的 Android 上，采用的是定制版的 JVM，并且是基于寄存器的指令集架构。此外，在某些情况下，我们还可以使用 JNI 机制来通过 Java 调用 C/C++编写的程序以提升性能（也就是本地方法，使用到 native 关键字）</p><hr><h2 id="现在与未来" tabindex="-1"><a class="header-anchor" href="#现在与未来"><span>现在与未来</span></a></h2><p>随着时代的变迁，JVM 的实现多种多样，而我们还要从最初的虚拟机说起。</p><h3 id="虚拟机的发展历程" tabindex="-1"><a class="header-anchor" href="#虚拟机的发展历程"><span>虚拟机的发展历程</span></a></h3><p>在 1996，Java1.0 面世时，第一款商用虚拟机 Sun Classic VM 开始了它的使命，这款虚拟机提供了一个 Java 解释器，也就是将我们的 class 文件进行读取，最后像上面一样得到一条一条的命令，JVM 再将指令依次执行。虽然这样的运行方式非常的简单易懂，但是它的效率实际上是很低的，就像你耳机里一边在放六级听力，你必须同时记在脑海里面然后等着问问题，再去选择问题的答案一样，更重要的是同样的代码每次都需要重新翻译再执行。</p><p>这个时候我们就需要更加高效的方式来运行 Java 程序，随着后面的发展，现在大多数的主流的 JVM 都包含即时<strong>编译器</strong>。JVM 会根据当前代码的进行判断，当虚拟机发现某个方法或代码块的运行特别频繁时，就会把这些代码认定为“热点代码”。为了提高热点代码的执行效率，在运行时，虚拟机将会把这些代码编译成与本地平台相关的机器码，并进行各种层次的优化，完成这个任务的编译器称为即时编译器（Just In Time Compiler）</p><figure><img src="`+o+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>在 JDK1.4 时，Sun Classic VM 完全退出了历史舞台，取而代之的是至今都在使用的 HotSpot VM，它是目前使用最广泛的虚拟机，拥有上面所说的热点代码探测技术、准确式内存管理（虚拟机可以知道内存中某个位置的数据具体是什么类型）等技术，而我们之后的章节都是基于 HotSpot 虚拟机进行讲解。</p><h3 id="虚拟机发展的未来" tabindex="-1"><a class="header-anchor" href="#虚拟机发展的未来"><span>虚拟机发展的未来</span></a></h3><p>2018 年 4 月，Oracle Labs 公开了最新的 GraalVM，它是一种全新的虚拟机，它能够实现所有的语言统一运行在虚拟机中。</p><figure><img src="'+r+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>Graal VM 被官方称为“Universal VM”和“Polyglot VM”，这是一个在 HotSpot 虚拟机基础上增强而成的跨语言全栈虚拟机，可以作为“任何语言”的运行平台使用，这里“任何语言”包括了 Java、Scala、Groovy、Kotlin 等基于 Java 虚拟机之上的语言，还包括了 C、C++、Rust 等基于 LLVM 的语言，同时支持其他像 JavaScript、Ruby、Python 和 R 语言等等。Graal VM 可以无额外开销地混合使用这些编程语言，支持不同语言中混用对方的接口和对象，也能够支持这些语言使用已经编写好的本地库文件。</p><p>Graal VM 的基本工作原理是将这些语言的源代码（例如 JavaScript）或源代码编译后的中间格式（例如 LLVM 字节码）通过解释器转换为能被 Graal VM 接受的中间表示（Intermediate Representation，IR），譬如设计一个解释器专门对 LLVM 输出的字节码进行转换来支持 C 和 C++语言，这个过程称为“程序特化”（Specialized，也常称为 Partial Evaluation）。Graal VM 提供了 Truffle 工具集来快速构建面向一种新语言的解释器，并用它构建了一个称为 Sulong 的高性能 LLVM 字节码解释器。</p><p>目前最新的 SpringBoot 已经提供了本地运行方案：<a href="https://docs.spring.io/spring-native/docs/current/reference/htmlsingle/" target="_blank" rel="noopener noreferrer">https://docs.spring.io/spring-native/docs/current/reference/htmlsingle/</a></p><blockquote><p>Spring Native 支持使用<a href="https://www.graalvm.org/" target="_blank" rel="noopener noreferrer">GraalVM</a><a href="https://www.graalvm.org/reference-manual/native-image/" target="_blank" rel="noopener noreferrer">原生镜像</a>编译器将 Spring 应用程序编译为本机可执行文件。</p><p>与 Java 虚拟机相比，原生映像可以为许多类型的工作负载实现更简单、更加持续的托管。包括微服务、非常适合容器的功能工作负载和<a href="https://kubernetes.io/" target="_blank" rel="noopener noreferrer">Kubernetes</a></p><p>使用本机映像提供了关键优势，如即时启动、即时峰值性能和减少内存消耗。</p><p>GraalVM 原生项目预计随着时间的推移会改进一些缺点和权衡。构建本机映像是一个比常规应用程序慢的繁重过程。热身后的本机映像运行时优化较少。最后，它不如 JVM 成熟，行为各不相同。</p><p>常规 JVM 和此原生映像平台的主要区别是：</p><ul><li>从主入口点对应用程序进行静态分析，在构建时进行。</li><li>未使用的部件将在构建时删除。</li><li>反射、资源和动态代理需要配置。</li><li>Classpath 在构建时是固定的。</li><li>没有类惰性加载：可执行文件中运送的所有内容将在启动时加载到内存中。</li><li>一些代码将在构建时运行。</li><li>Java 应用程序的某些方面有一些不受完全支持<a href="https://www.graalvm.org/reference-manual/native-image/Limitations/" target="_blank" rel="noopener noreferrer">的限制</a>。</li></ul><p>该项目的目标是孵化对 Spring Native 的支持，Spring Native 是 Spring JVM 的替代品，并提供旨在打包在轻量级容器中的原生部署选项。在实践中，目标是在这个新平台上支持您的 Spring 应用程序，几乎未经修改。</p></blockquote><p>优点：</p><ol><li>立即启动，一般启动时间小于 100ms</li><li>更低的内存消耗</li><li>独立部署，不再需要 JVM</li><li>同样的峰值性能要比 JVM 消耗的内存小</li></ol><p>缺点：</p><ol><li>构建时间长</li><li>只支持新的 Springboot 版本（2.4.4+）</li></ol><hr><h2 id="手动编译-jdk8" tabindex="-1"><a class="header-anchor" href="#手动编译-jdk8"><span>手动编译 JDK8</span></a></h2><p>学习 JVM 最关键的是研究底层 C/C++源码，我们首先需要搭建一个测试环境，方便我们之后对底层源码进行调试。但是编译这一步的坑特别多，请务必保证跟教程中的环境一致，尤其是编译环境，版本不能太高，因为 JDK8 属于比较早期的版本了，否则会遇到各种各样奇奇怪怪的问题。</p><h3 id="环境配置" tabindex="-1"><a class="header-anchor" href="#环境配置"><span>环境配置</span></a></h3><ul><li>操作系统：Ubuntu 20.04 Server</li><li>硬件配置：i7-4790 4C8T/ 16G 内存 / 128G 硬盘 （不能用树莓派或是 arm 芯片 Mac 的虚拟机，配置越高越好，不然卡爆）</li><li>调试工具：Jetbrains Gateway（服务器运行 CLion Backend 程序，界面在 Mac 上显示）</li><li>OpenJDK 源码：<a href="https://codeload.github.com/openjdk/jdk/zip/refs/tags/jdk8-b120" target="_blank" rel="noopener noreferrer">https://codeload.github.com/openjdk/jdk/zip/refs/tags/jdk8-b120</a></li><li>编译环境： <ul><li>gcc-4.8</li><li>g++-4.8</li><li>make-3.81</li><li>openjdk-8</li></ul></li></ul><h3 id="开始折腾" tabindex="-1"><a class="header-anchor" href="#开始折腾"><span>开始折腾</span></a></h3><p>首选需要在我们的测试服务器上安装 Ubuntu 20.04 Server 系统，并通过 ssh 登录到服务器：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">Welcome to Ubuntu <span class="token number">20.04</span>.3 LTS <span class="token punctuation">(</span>GNU/Linux <span class="token number">5.4</span>.0-96-generic x86_64<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"> * Documentation:  https://help.ubuntu.com</span>
<span class="line"> * Management:     https://landscape.canonical.com</span>
<span class="line"> * Support:        https://ubuntu.com/advantage</span>
<span class="line"></span>
<span class="line">  System information as of Sat <span class="token number">29</span> Jan <span class="token number">2022</span> <span class="token number">10</span>:33:03 AM UTC</span>
<span class="line"></span>
<span class="line">  System load:  <span class="token number">0.08</span>               Processes:               <span class="token number">156</span></span>
<span class="line">  Usage of /:   <span class="token number">5.5</span>% of <span class="token number">108</span>.05GB   Users logged in:         <span class="token number">0</span></span>
<span class="line">  Memory usage: <span class="token number">5</span>%                 IPv4 address <span class="token keyword">for</span> enp2s0: <span class="token number">192.168</span>.10.66</span>
<span class="line">  Swap usage:   <span class="token number">0</span>%                 IPv4 address <span class="token keyword">for</span> enp2s0: <span class="token number">192.168</span>.10.75</span>
<span class="line">  Temperature:  <span class="token number">32.0</span> C</span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token number">37</span> updates can be applied immediately.</span>
<span class="line">To see these additional updates run: <span class="token function">apt</span> list <span class="token parameter variable">--upgradable</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">Last login: Sat Jan <span class="token number">29</span> <span class="token number">10</span>:27:06 <span class="token number">2022</span></span>
<span class="line">nagocoler@ubuntu-server:~$</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>先安装一些基本的依赖：</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> build-essential libxrender-dev xorg-dev libasound2-dev libcups2-dev <span class="token function">gawk</span> <span class="token function">zip</span> libxtst-dev libxi-dev libxt-dev gobjc</span>
<span class="line"></span></code></pre></div><p>接着我们先将 JDK 的编译环境配置好，首先是安装 gcc 和 g++的 4.8 版本，但是最新的源没有这个版本了，我们先导入旧版软件源：</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">sudo</span> <span class="token function">vim</span> /etc/apt/sources.list</span>
<span class="line"></span></code></pre></div><p>在最下方添加旧版源地址并保存：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">deb http://archive.ubuntu.com/ubuntu xenial main</span>
<span class="line">deb http://archive.ubuntu.com/ubuntu xenial universe</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>接着更新一下 apt 源信息，并安装 gcc 和 g++：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">sudo</span> <span class="token function">apt</span> update</span>
<span class="line"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> gcc-4.8 g++-4.8</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>接着配置：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">sudo</span> update-alternatives <span class="token parameter variable">--install</span> /usr/bin/gcc gcc /usr/bin/gcc-4.8 <span class="token number">100</span></span>
<span class="line"><span class="token function">sudo</span> update-alternatives <span class="token parameter variable">--install</span> /usr/bin/g++ g++ /usr/bin/g++-4.8 <span class="token number">100</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>最后查看版本是否为 4.8 版本：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">nagocoler@ubuntu-server:~$ gcc <span class="token parameter variable">--version</span></span>
<span class="line">gcc <span class="token punctuation">(</span>Ubuntu <span class="token number">4.8</span>.5-4ubuntu2<span class="token punctuation">)</span> <span class="token number">4.8</span>.5</span>
<span class="line">Copyright <span class="token punctuation">(</span>C<span class="token punctuation">)</span> <span class="token number">2015</span> Free Software Foundation, Inc.</span>
<span class="line">This is <span class="token function">free</span> software<span class="token punctuation">;</span> see the <span class="token builtin class-name">source</span> <span class="token keyword">for</span> copying conditions.  There is NO</span>
<span class="line">warranty<span class="token punctuation">;</span> not even <span class="token keyword">for</span> MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span>
<span class="line"></span>
<span class="line">nagocoler@ubuntu-server:~$ g++ <span class="token parameter variable">--version</span></span>
<span class="line">g++ <span class="token punctuation">(</span>Ubuntu <span class="token number">4.8</span>.5-4ubuntu2<span class="token punctuation">)</span> <span class="token number">4.8</span>.5</span>
<span class="line">Copyright <span class="token punctuation">(</span>C<span class="token punctuation">)</span> <span class="token number">2015</span> Free Software Foundation, Inc.</span>
<span class="line">This is <span class="token function">free</span> software<span class="token punctuation">;</span> see the <span class="token builtin class-name">source</span> <span class="token keyword">for</span> copying conditions.  There is NO</span>
<span class="line">warranty<span class="token punctuation">;</span> not even <span class="token keyword">for</span> MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着安装 make 3.81 版本，需要从官方下载：</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">wget</span> https://ftp.gnu.org/gnu/make/make-3.81.tar.gz</span>
<span class="line"></span></code></pre></div><p>下载好之后进行解压，并进入目录：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> make-3.81.tar.gz</span>
<span class="line"><span class="token builtin class-name">cd</span> make-3.81/</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>接着我们修改一下代码，打开<code>glob/glob.c</code>文件：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span>  <span class="token expression">HAVE_CONFIG_H</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;config.h&gt;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__alloca</span> <span class="token expression">alloca   <span class="token operator">&lt;</span><span class="token operator">-</span> 添加这一句</span></span></span>
<span class="line"><span class="token comment">/* Enable GNU extensions</span>
<span class="line">...</span>
<span class="line"></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着进行配置并完成编译和安装：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">bash</span> configure</span>
<span class="line"><span class="token function">sudo</span> <span class="token function">make</span> <span class="token function">install</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>安装完成后，将 make 已经变成 3.81 版本了：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">nagocoler@ubuntu-server:~/make-3.81$ <span class="token function">make</span> <span class="token parameter variable">-verison</span></span>
<span class="line">GNU Make <span class="token number">3.81</span></span>
<span class="line">Copyright <span class="token punctuation">(</span>C<span class="token punctuation">)</span> <span class="token number">2006</span>  Free Software Foundation, Inc.</span>
<span class="line">This is <span class="token function">free</span> software<span class="token punctuation">;</span> see the <span class="token builtin class-name">source</span> <span class="token keyword">for</span> copying conditions.</span>
<span class="line">There is NO warranty<span class="token punctuation">;</span> not even <span class="token keyword">for</span> MERCHANTABILITY or FITNESS FOR A</span>
<span class="line">PARTICULAR PURPOSE.</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于 JDK 中某些代码是 Java 编写的，所以我们还需要安装一个启动 JDK，启动 JDK 可以是当前版本或低一版本，比如我们要编译 JDK8 的源码，那么就可以使用 JDK7、JDK8 作为启动 JDK，对源码中的一些 java 文件进行编译。这里我们选择安装 OpenJDK8 作为启动 JDK：</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> openjdk-8-jdk</span>
<span class="line"></span></code></pre></div><p>这样，我们的系统环境就准备完成了，接着我们需要下载 OpenJDK8 的源码（已经放在网盘了）解压：</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">unzip</span> jdk-jdk8-b120.zip</span>
<span class="line"></span></code></pre></div><p>接着我们需要安装 JetBrains Gateway 在我们的服务器上导入项目，这里我们使用 CLion 后端，等待下载远程后端，这样我们的 Linux 服务器上虽然没有图形化界面，但是依然可以使用 IDEA、CLion 等工具，只是服务器上只有后端程序，而界面由我们电脑上的前端程序提供（目前此功能还在 Beta 阶段，暂不支持 arm 架构的 Linux 服务器）整个过程根据服务器配置决定可能需要 5-20 分钟。</p><p>完成之后，我们操作起来就很方便了，界面和 IDEA 其实差不多，我们打开终端，开始进行配置：</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">bash</span> configure --with-debug-level<span class="token operator">=</span>slowdebug --enable-debug-symbols <span class="token assign-left variable">ZIP_DEBUGINFO_FIELS</span><span class="token operator">=</span><span class="token number">0</span></span>
<span class="line"></span></code></pre></div><p>配置完成后，再次确认是否和教程中的配置信息一致：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">Configuration summary:</span>
<span class="line">* Debug level:    slowdebug</span>
<span class="line">* JDK variant:    normal</span>
<span class="line">* JVM variants:   server</span>
<span class="line">* OpenJDK target: OS: linux, CPU architecture: x86, address length: <span class="token number">64</span></span>
<span class="line"></span>
<span class="line">Tools summary:</span>
<span class="line">* Boot JDK:       openjdk version <span class="token string">&quot;1.8.0_312&quot;</span> OpenJDK Runtime Environment <span class="token punctuation">(</span>build <span class="token number">1.8</span>.0_312-8u312-b07-0ubuntu1~20.04-b07<span class="token punctuation">)</span> OpenJDK <span class="token number">64</span>-Bit Server VM <span class="token punctuation">(</span>build <span class="token number">25.312</span>-b07, mixed mode<span class="token punctuation">)</span>  <span class="token punctuation">(</span>at /usr/lib/jvm/java-8-openjdk-amd64<span class="token punctuation">)</span></span>
<span class="line">* C Compiler:     gcc-4.8 <span class="token punctuation">(</span>Ubuntu <span class="token number">4.8</span>.5-4ubuntu2<span class="token punctuation">)</span> version <span class="token number">4.8</span>.5 <span class="token punctuation">(</span>at /usr/bin/gcc-4.8<span class="token punctuation">)</span></span>
<span class="line">* C++ Compiler:   g++-4.8 <span class="token punctuation">(</span>Ubuntu <span class="token number">4.8</span>.5-4ubuntu2<span class="token punctuation">)</span> version <span class="token number">4.8</span>.5 <span class="token punctuation">(</span>at /usr/bin/g++-4.8<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">Build performance summary:</span>
<span class="line">* Cores to use:   <span class="token number">3</span></span>
<span class="line">* Memory limit:   <span class="token number">3824</span> MB</span>
<span class="line">* ccache status:  not installed <span class="token punctuation">(</span>consider installing<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">WARNING: The result of this configuration has overridden an older</span>
<span class="line">configuration. You *should* run <span class="token string">&#39;make clean&#39;</span> to <span class="token function">make</span> sure you get a</span>
<span class="line">proper build. Failure to <span class="token keyword">do</span> so might result <span class="token keyword">in</span> strange build problems.</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着我们需要修改几个文件，不然一会会编译失败，首先是<code>hotspot/make/linux/Makefile</code>文件：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">原有的 SUPPORTED_OS_VERSION = 2.4% 2.5% 2.6% 3%</span>
<span class="line">修改为 SUPPORTED_OS_VERSION = 2.4% 2.5% 2.6% 3% 4% 5%</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>接着是<code>hotspot/make/linux/makefiles/gcc.make</code>文件：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">原有的 WARNINGS_ARE_ERRORS = -Werror</span>
<span class="line">修改为 #WARNINGS_ARE_ERRORS = -Werror</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>接着是<code>nashorn/make/BuildNashorn.gmk</code>文件：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line">  $<span class="token punctuation">(</span>CP<span class="token punctuation">)</span> <span class="token operator">-</span>R <span class="token operator">-</span>p $<span class="token punctuation">(</span>NASHORN_OUTPUTDIR<span class="token punctuation">)</span><span class="token operator">/</span>nashorn_classes<span class="token comment">/* $(@D)/</span>
<span class="line">  $(FIXPATH) $(JAVA) \\</span>
<span class="line">原有的 -cp &quot;$(NASHORN_OUTPUTDIR)/nasgen_classes$(PATH_SEP)$(NASHORN_OUTPUTDIR)/nashorn_classes&quot; \\</span>
<span class="line">修改为  -Xbootclasspath/p:&quot;$(NASHORN_OUTPUTDIR)/nasgen_classes$(PATH_SEP)$(NASHORN_OUTPUTDIR)/nashorn_classes&quot; \\</span>
<span class="line">   jdk.nashorn.internal.tools.nasgen.Main $(@D) jdk.nashorn.internal.objects $(@D)</span>
<span class="line"></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>OK，修改完成，接着我们就可以开始编译了：</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">make</span> all</span>
<span class="line"></span></code></pre></div><p>整个编译过程大概需要持续 10-20 分钟，请耐心等待。构建完成后提示：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">----- Build <span class="token builtin class-name">times</span> -------</span>
<span class="line">Start <span class="token number">2022</span>-01-29 <span class="token number">11</span>:36:35</span>
<span class="line">End   <span class="token number">2022</span>-01-29 <span class="token number">11</span>:48:20</span>
<span class="line">00:00:30 corba</span>
<span class="line">00:00:25 demos</span>
<span class="line">00:02:39 docs</span>
<span class="line">00:03:05 hotspot</span>
<span class="line">00:00:27 images</span>
<span class="line">00:00:17 jaxp</span>
<span class="line">00:00:31 jaxws</span>
<span class="line">00:03:02 jdk</span>
<span class="line">00:00:38 langtools</span>
<span class="line">00:00:11 nashorn</span>
<span class="line">00:11:45 TOTAL</span>
<span class="line">-------------------------</span>
<span class="line">Finished building OpenJDK <span class="token keyword">for</span> target <span class="token string">&#39;all&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>只要按照我们的教程一步步走，别漏了，应该是直接可以完成的，当然难免可能有的同学出现了奇奇怪怪的问题，加油，慢慢折腾，总会成功的~</p><p>接着我们就可以创建一个测试配置了，首先打开设置页面，找到<code>自定义构建目标</code>：</p><figure><img src="`+u+'" alt="image-20230306164504510" tabindex="0" loading="lazy"><figcaption>image-20230306164504510</figcaption></figure><p>点击<code>应用</code>即可，接着打开运行配置，添加一个新的自定义配置：</p><figure><img src="'+d+`" alt="image-20230306164521873" tabindex="0" loading="lazy"><figcaption>image-20230306164521873</figcaption></figure><p>选择我们编译完成的 java 程序，然后测试-version 查看版本信息，去掉下方的构建。</p><p>接着直接运行即可：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">/home/nagocoler/jdk-jdk8-b120/build/linux-x86_64-normal-server-slowdebug/jdk/bin/java <span class="token parameter variable">-version</span></span>
<span class="line">openjdk version <span class="token string">&quot;1.8.0-internal-debug&quot;</span></span>
<span class="line">OpenJDK Runtime Environment <span class="token punctuation">(</span>build <span class="token number">1.8</span>.0-internal-debug-nagocoler_2022_01_29_11_36-b00<span class="token punctuation">)</span></span>
<span class="line">OpenJDK <span class="token number">64</span>-Bit Server VM <span class="token punctuation">(</span>build <span class="token number">25.0</span>-b62-debug, mixed mode<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">Process finished with <span class="token builtin class-name">exit</span> code <span class="token number">0</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以将工作目录修改到其他地方，接着我们创建一个 Java 文件并完成编译，然后测试能否使用我们编译的 JDK 运行：</p><figure><img src="`+v+`" alt="image-20230306164535518" tabindex="0" loading="lazy"><figcaption>image-20230306164535518</figcaption></figure><p>在此目录下编写一个 Java 程序，然后编译：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span><span class="token punctuation">{</span></span>
<span class="line"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">nagocoler@ubuntu-server:~$ <span class="token builtin class-name">cd</span> JavaHelloWorld/</span>
<span class="line">nagocoler@ubuntu-server:~/JavaHelloWorld$ <span class="token function">vim</span> Main.java</span>
<span class="line">nagocoler@ubuntu-server:~/JavaHelloWorld$ javac Main.java</span>
<span class="line">nagocoler@ubuntu-server:~/JavaHelloWorld$ <span class="token function">ls</span></span>
<span class="line">Main.class  Main.java</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>点击运行，成功得到结果：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">/home/nagocoler/jdk-jdk8-b120/build/linux-x86_64-normal-server-slowdebug/jdk/bin/java Main</span>
<span class="line">Hello World<span class="token operator">!</span></span>
<span class="line"></span>
<span class="line">Process finished with <span class="token builtin class-name">exit</span> code <span class="token number">0</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们还可以在 CLion 前端页面中进行断点调试，比如我们测试一个入口点 JavaMain，在<code>jdk/src/share/bin/java.c</code>中的 JavaMain 方法：</p><figure><img src="`+m+'" alt="image-20230306164549328" tabindex="0" loading="lazy"><figcaption>image-20230306164549328</figcaption></figure><p>点击右上角调试按钮，可以成功进行调试：</p><figure><img src="'+k+`" alt="image-20230306164602205" tabindex="0" loading="lazy"><figcaption>image-20230306164602205</figcaption></figure><p>至此，在 Ubuntu 系统上手动编译 OpenJDK8 完成。</p><hr><h2 id="jvm-启动流程探究" tabindex="-1"><a class="header-anchor" href="#jvm-启动流程探究"><span>JVM 启动流程探究</span></a></h2><p>前面我们完成了 JDK8 的编译，也了解了如何进行断点调试，现在我们就可以来研究一下 JVM 的启动流程了，首先我们要明确，虚拟机的启动入口位于<code>jdk/src/share/bin/java.c</code>的<code>JLI_Launch</code>函数，整个流程分为如下几个步骤：</p><ol><li>配置 JVM 装载环境</li><li>解析虚拟机参数</li><li>设置线程栈大小</li><li>执行 JavaMain 方法</li></ol><p>首先我们来看看<code>JLI_Launch</code>函数是如何定义的：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token keyword">int</span></span>
<span class="line"><span class="token function">JLI_Launch</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">,</span>              <span class="token comment">/* main argc, argc */</span></span>
<span class="line">        <span class="token keyword">int</span> jargc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> jargv<span class="token punctuation">,</span>          <span class="token comment">/* java args */</span></span>
<span class="line">        <span class="token keyword">int</span> appclassc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> appclassv<span class="token punctuation">,</span>  <span class="token comment">/* app classpath */</span></span>
<span class="line">        <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> fullversion<span class="token punctuation">,</span>                <span class="token comment">/* full version defined */</span></span>
<span class="line">        <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> dotversion<span class="token punctuation">,</span>                 <span class="token comment">/* dot version defined */</span></span>
<span class="line">        <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> pname<span class="token punctuation">,</span>                      <span class="token comment">/* program name */</span></span>
<span class="line">        <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> lname<span class="token punctuation">,</span>                      <span class="token comment">/* launcher name */</span></span>
<span class="line">        jboolean javaargs<span class="token punctuation">,</span>                      <span class="token comment">/* JAVA_ARGS */</span></span>
<span class="line">        jboolean cpwildcard<span class="token punctuation">,</span>                    <span class="token comment">/* classpath wildcard */</span></span>
<span class="line">        jboolean javaw<span class="token punctuation">,</span>                         <span class="token comment">/* windows-only javaw */</span></span>
<span class="line">        jint     ergo_class                     <span class="token comment">/* ergnomics policy */</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到在入口点的参数有很多个，其中包括当前的完整版本名称、简短版本名称、运行参数、程序名称、启动器名称等。</p><p>首先会进行一些初始化操作以及 Debug 信息打印配置等：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token function">InitLauncher</span><span class="token punctuation">(</span>javaw<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">DumpState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">JLI_IsTraceLauncher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> i<span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Command line args:\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> argc <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;argv[%d] = %s\\n&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">AddOption</span><span class="token punctuation">(</span><span class="token string">&quot;-Dsun.java.launcher.diag=true&quot;</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着就是选择一个合适的 JRE 版本：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token comment">/*</span>
<span class="line"> * Make sure the specified version of the JRE is running.</span>
<span class="line"> *</span>
<span class="line"> * There are three things to note about the SelectVersion() routine:</span>
<span class="line"> *  1) If the version running isn&#39;t correct, this routine doesn&#39;t</span>
<span class="line"> *     return (either the correct version has been exec&#39;d or an error</span>
<span class="line"> *     was issued).</span>
<span class="line"> *  2) Argc and Argv in this scope are *not* altered by this routine.</span>
<span class="line"> *     It is the responsibility of subsequent code to ignore the</span>
<span class="line"> *     arguments handled by this routine.</span>
<span class="line"> *  3) As a side-effect, the variable &quot;main_class&quot; is guaranteed to</span>
<span class="line"> *     be set (if it should ever be set).  This isn&#39;t exactly the</span>
<span class="line"> *     poster child for structured programming, but it is a small</span>
<span class="line"> *     price to pay for not processing a jar file operand twice.</span>
<span class="line"> *     (Note: This side effect has been disabled.  See comment on</span>
<span class="line"> *     bugid 5030265 below.)</span>
<span class="line"> */</span></span>
<span class="line"><span class="token function">SelectVersion</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token operator">&amp;</span>main_class<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着是创建 JVM 执行环境，例如需要确定数据模型，是 32 位还是 64 位，以及 jvm 本身的一些配置在 jvm.cfg 文件中读取和解析：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token function">CreateExecutionEnvironment</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>argc<span class="token punctuation">,</span> <span class="token operator">&amp;</span>argv<span class="token punctuation">,</span></span>
<span class="line">                               jrepath<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>jrepath<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                               jvmpath<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>jvmpath<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                               jvmcfg<span class="token punctuation">,</span>  <span class="token keyword">sizeof</span><span class="token punctuation">(</span>jvmcfg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此函数只在头文件中定义，具体的实现是根据不同平台而定的。接着会动态加载 jvm.so 这个共享库，并把 jvm.so 中的相关函数导出并且初始化，而启动 JVM 的函数也在其中：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">LoadJavaVM</span><span class="token punctuation">(</span>jvmpath<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ifn<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>比如 mac 平台下的实现：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line">jboolean</span>
<span class="line"><span class="token function">LoadJavaVM</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>jvmpath<span class="token punctuation">,</span> InvocationFunctions <span class="token operator">*</span>ifn<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    Dl_info dlinfo<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">void</span> <span class="token operator">*</span>libjvm<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">JLI_TraceLauncher</span><span class="token punctuation">(</span><span class="token string">&quot;JVM path is %s\\n&quot;</span><span class="token punctuation">,</span> jvmpath<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    libjvm <span class="token operator">=</span> <span class="token function">dlopen</span><span class="token punctuation">(</span>jvmpath<span class="token punctuation">,</span> RTLD_NOW <span class="token operator">+</span> RTLD_GLOBAL<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>libjvm <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">JLI_ReportErrorMessage</span><span class="token punctuation">(</span>DLL_ERROR1<span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">JLI_ReportErrorMessage</span><span class="token punctuation">(</span>DLL_ERROR2<span class="token punctuation">,</span> jvmpath<span class="token punctuation">,</span> <span class="token function">dlerror</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> JNI_FALSE<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    ifn<span class="token operator">-&gt;</span>CreateJavaVM <span class="token operator">=</span> <span class="token punctuation">(</span>CreateJavaVM_t<span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">dlsym</span><span class="token punctuation">(</span>libjvm<span class="token punctuation">,</span> <span class="token string">&quot;JNI_CreateJavaVM&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>ifn<span class="token operator">-&gt;</span>CreateJavaVM <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">JLI_ReportErrorMessage</span><span class="token punctuation">(</span>DLL_ERROR2<span class="token punctuation">,</span> jvmpath<span class="token punctuation">,</span> <span class="token function">dlerror</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> JNI_FALSE<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    ifn<span class="token operator">-&gt;</span>GetDefaultJavaVMInitArgs <span class="token operator">=</span> <span class="token punctuation">(</span>GetDefaultJavaVMInitArgs_t<span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">dlsym</span><span class="token punctuation">(</span>libjvm<span class="token punctuation">,</span> <span class="token string">&quot;JNI_GetDefaultJavaVMInitArgs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>ifn<span class="token operator">-&gt;</span>GetDefaultJavaVMInitArgs <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">JLI_ReportErrorMessage</span><span class="token punctuation">(</span>DLL_ERROR2<span class="token punctuation">,</span> jvmpath<span class="token punctuation">,</span> <span class="token function">dlerror</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> JNI_FALSE<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    ifn<span class="token operator">-&gt;</span>GetCreatedJavaVMs <span class="token operator">=</span> <span class="token punctuation">(</span>GetCreatedJavaVMs_t<span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">dlsym</span><span class="token punctuation">(</span>libjvm<span class="token punctuation">,</span> <span class="token string">&quot;JNI_GetCreatedJavaVMs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>ifn<span class="token operator">-&gt;</span>GetCreatedJavaVMs <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">JLI_ReportErrorMessage</span><span class="token punctuation">(</span>DLL_ERROR2<span class="token punctuation">,</span> jvmpath<span class="token punctuation">,</span> <span class="token function">dlerror</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> JNI_FALSE<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> JNI_TRUE<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后就是对 JVM 进行初始化了：</p><div class="language-c" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token keyword">return</span> <span class="token function">JVMInit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ifn<span class="token punctuation">,</span> threadStackSize<span class="token punctuation">,</span> argc<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> mode<span class="token punctuation">,</span> what<span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p>这也是由平台决定的，比如 Mac 下的实现为：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token keyword">int</span></span>
<span class="line"><span class="token function">JVMInit</span><span class="token punctuation">(</span>InvocationFunctions<span class="token operator">*</span> ifn<span class="token punctuation">,</span> jlong threadStackSize<span class="token punctuation">,</span></span>
<span class="line">                 <span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span></span>
<span class="line">                 <span class="token keyword">int</span> mode<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>what<span class="token punctuation">,</span> <span class="token keyword">int</span> ret<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>sameThread<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//无需关心....</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">       <span class="token comment">//正常情况下走这个</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">ContinueInNewThread</span><span class="token punctuation">(</span>ifn<span class="token punctuation">,</span> threadStackSize<span class="token punctuation">,</span> argc<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> mode<span class="token punctuation">,</span> what<span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到最后进入了一个<code>ContinueInNewThread</code>函数（在刚刚的<code>java.c</code>中实现），这个函数会创建一个新的线程来执行：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token keyword">int</span></span>
<span class="line"><span class="token function">ContinueInNewThread</span><span class="token punctuation">(</span>InvocationFunctions<span class="token operator">*</span> ifn<span class="token punctuation">,</span> jlong threadStackSize<span class="token punctuation">,</span></span>
<span class="line">                    <span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span></span>
<span class="line">                    <span class="token keyword">int</span> mode<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>what<span class="token punctuation">,</span> <span class="token keyword">int</span> ret<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line"></span>
<span class="line">      rslt <span class="token operator">=</span> <span class="token function">ContinueInNewThread0</span><span class="token punctuation">(</span>JavaMain<span class="token punctuation">,</span> threadStackSize<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token comment">/* If the caller has deemed there is an error we</span>
<span class="line">       * simply return that, otherwise we return the value of</span>
<span class="line">       * the callee</span>
<span class="line">       */</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> ret <span class="token operator">:</span> rslt<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着进入了一个名为<code>ContinueInNewThread0</code>的函数，可以看到它将<code>JavaMain</code>函数传入作为参数，而此函数定义的第一个参数类型是一个函数指针：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token keyword">int</span></span>
<span class="line"><span class="token function">ContinueInNewThread0</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">(</span>JNICALL <span class="token operator">*</span>continuation<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span> jlong stack_size<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> rslt<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">pthread_t</span> tid<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">pthread_attr_t</span> attr<span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">pthread_attr_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>attr<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">pthread_attr_setdetachstate</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>attr<span class="token punctuation">,</span> PTHREAD_CREATE_JOINABLE<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>stack_size <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">pthread_attr_setstacksize</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>attr<span class="token punctuation">,</span> stack_size<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid<span class="token punctuation">,</span> <span class="token operator">&amp;</span>attr<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span>continuation<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>args<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">void</span> <span class="token operator">*</span> tmp<span class="token punctuation">;</span></span>
<span class="line">      <span class="token function">pthread_join</span><span class="token punctuation">(</span>tid<span class="token punctuation">,</span> <span class="token operator">&amp;</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      rslt <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>tmp<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">     <span class="token comment">/*</span>
<span class="line">      * Continue execution in current thread if for some reason (e.g. out of</span>
<span class="line">      * memory/LWP)  a new thread can&#39;t be created. This will likely fail</span>
<span class="line">      * later in continuation as JNI_CreateJavaVM needs to create quite a</span>
<span class="line">      * few new threads, anyway, just give it a try..</span>
<span class="line">      */</span></span>
<span class="line">      rslt <span class="token operator">=</span> <span class="token function">continuation</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">pthread_attr_destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>attr<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> rslt<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后实际上是在新的线程中执行<code>JavaMain</code>函数，最后我们再来看看此函数里面做了什么事情：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token comment">/* Initialize the virtual machine */</span></span>
<span class="line">start <span class="token operator">=</span> <span class="token function">CounterGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">InitializeJVM</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>vm<span class="token punctuation">,</span> <span class="token operator">&amp;</span>env<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ifn<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">JLI_ReportErrorMessage</span><span class="token punctuation">(</span>JVM_ERROR1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第一步初始化虚拟机，如果报错直接退出。接着就是加载主类（至于具体如何加载一个类，我们会放在后面进行讲解），因为主类是我们 Java 程序的入口点：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token comment">/*</span>
<span class="line"> * Get the application&#39;s main class.</span>
<span class="line"> *</span>
<span class="line"> * See bugid 5030265.  The Main-Class name has already been parsed</span>
<span class="line"> * from the manifest, but not parsed properly for UTF-8 support.</span>
<span class="line"> * Hence the code here ignores the value previously extracted and</span>
<span class="line"> * uses the pre-existing code to reextract the value.  This is</span>
<span class="line"> * possibly an end of release cycle expedient.  However, it has</span>
<span class="line"> * also been discovered that passing some character sets through</span>
<span class="line"> * the environment has &quot;strange&quot; behavior on some variants of</span>
<span class="line"> * Windows.  Hence, maybe the manifest parsing code local to the</span>
<span class="line"> * launcher should never be enhanced.</span>
<span class="line"> *</span>
<span class="line"> * Hence, future work should either:</span>
<span class="line"> *     1)   Correct the local parsing code and verify that the</span>
<span class="line"> *          Main-Class attribute gets properly passed through</span>
<span class="line"> *          all environments,</span>
<span class="line"> *     2)   Remove the vestages of maintaining main_class through</span>
<span class="line"> *          the environment (and remove these comments).</span>
<span class="line"> *</span>
<span class="line"> * This method also correctly handles launching existing JavaFX</span>
<span class="line"> * applications that may or may not have a Main-Class manifest entry.</span>
<span class="line"> */</span></span>
<span class="line">mainClass <span class="token operator">=</span> <span class="token function">LoadMainClass</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> mode<span class="token punctuation">,</span> what<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>某些没有主方法的 Java 程序比如 JavaFX 应用，会获取 ApplicationMainClass：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token comment">/*</span>
<span class="line"> * In some cases when launching an application that needs a helper, e.g., a</span>
<span class="line"> * JavaFX application with no main method, the mainClass will not be the</span>
<span class="line"> * applications own main class but rather a helper class. To keep things</span>
<span class="line"> * consistent in the UI we need to track and report the application main class.</span>
<span class="line"> */</span></span>
<span class="line">appClass <span class="token operator">=</span> <span class="token function">GetApplicationClass</span><span class="token punctuation">(</span>env<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>初始化完成：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token comment">/*</span>
<span class="line"> * PostJVMInit uses the class name as the application name for GUI purposes,</span>
<span class="line"> * for example, on OSX this sets the application name in the menu bar for</span>
<span class="line"> * both SWT and JavaFX. So we&#39;ll pass the actual application class here</span>
<span class="line"> * instead of mainClass as that may be a launcher or helper class instead</span>
<span class="line"> * of the application class.</span>
<span class="line"> */</span></span>
<span class="line"><span class="token function">PostJVMInit</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> appClass<span class="token punctuation">,</span> vm<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着就是获取主类中的主方法：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token comment">/*</span>
<span class="line"> * The LoadMainClass not only loads the main class, it will also ensure</span>
<span class="line"> * that the main method&#39;s signature is correct, therefore further checking</span>
<span class="line"> * is not required. The main method is invoked here so that extraneous java</span>
<span class="line"> * stacks are not in the application stack trace.</span>
<span class="line"> */</span></span>
<span class="line">mainID <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>env<span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token class-name">GetStaticMethodID</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> mainClass<span class="token punctuation">,</span> <span class="token string">&quot;main&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                                   <span class="token string">&quot;([Ljava/lang/String;)V&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>没错，在字节码中<code>void main(String[] args)</code>表示为<code>([Ljava/lang/String;)V</code>我们之后会详细介绍。接着就是调用主方法了：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token comment">/* Invoke main method. */</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token operator">*</span>env<span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">CallStaticVoidMethod</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> mainClass<span class="token punctuation">,</span> mainID<span class="token punctuation">,</span> mainArgs<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>调用后，我们的 Java 程序就开飞速运行起来，直到走到主方法的最后一行返回：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token comment">/*</span>
<span class="line"> * The launcher&#39;s exit code (in the absence of calls to</span>
<span class="line"> * System.exit) will be non-zero if main threw an exception.</span>
<span class="line"> */</span></span>
<span class="line">ret <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>env<span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">ExceptionOccurred</span><span class="token punctuation">(</span>env<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">LEAVE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>至此，一个 Java 程序的运行流程结束，在最后 LEAVE 函数中会销毁 JVM。我们可以进行断点调试来查看是否和我们推出的结论一致：</p><figure><img src="`+b+'" alt="image-20230306164622940" tabindex="0" loading="lazy"><figcaption>image-20230306164622940</figcaption></figure><p>还是以我们之前编写的测试类进行，首先来到调用之前，我们看到主方法执行之前，控制台没有输出任何内容，接着我们执行此函数，再来观察控制台的变化：</p><figure><img src="'+g+'" alt="image-20230306164639620" tabindex="0" loading="lazy"><figcaption>image-20230306164639620</figcaption></figure><p>可以看到，主方法执行完成之后，控制台也成功输出了 Hello World！</p><p>继续下一步，整个 Java 程序执行完成，得到退出状态码<code>0</code>：</p><figure><img src="'+h+'" alt="image-20230306164706976" tabindex="0" loading="lazy"><figcaption>image-20230306164706976</figcaption></figure><p>成功验证，最后总结一下整个执行过程：</p><figure><img src="'+f+`" alt="image-20230306164716949" tabindex="0" loading="lazy"><figcaption>image-20230306164716949</figcaption></figure><hr><h2 id="jni-调用本地方法" tabindex="-1"><a class="header-anchor" href="#jni-调用本地方法"><span>JNI 调用本地方法</span></a></h2><p>Java 还有一个 JNI 机制，它的全称：Java Native Interface，即 Java 本地接口。它允许在 Java 虚拟机内运行的 Java 代码与其他编程语言（如 C/C++和汇编语言）编写的程序和库进行交互（在 Android 开发中用得比较多）比如我们现在想要让 C 语言程序帮助我们的 Java 程序实现 a+b 的运算，首先我们需要创建一个本地方法：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">//本地方法使用native关键字标记，无需任何实现，交给C语言实现</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">native</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建好后，接着点击构建按钮，会出现一个 out 文件夹，也就是生成的 class 文件在其中，接着我们直接生成对应的 C 头文件：</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">javah <span class="token parameter variable">-classpath</span> out/production/SimpleHelloWorld <span class="token parameter variable">-d</span> ./jni com.test.Main</span>
<span class="line"></span></code></pre></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>新版 JDK 已经用 <code>javac -h</code> 来代替 <code>javah</code></p><div class="language-bash" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">javac <span class="token parameter variable">-h</span> ./jni Main.java</span>
<span class="line"></span></code></pre></div><p>一步到位</p></div><p>生成的头文件位于 jni 文件夹下：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token comment">/* DO NOT EDIT THIS FILE - it is machine generated */</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;jni.h&gt;</span></span></span>
<span class="line"><span class="token comment">/* Header for class com_test_Main */</span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">_Included_com_test_Main</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_Included_com_test_Main</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">__cplusplus</span></span></span>
<span class="line"><span class="token keyword">extern</span> <span class="token string">&quot;C&quot;</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line"><span class="token comment">/*</span>
<span class="line"> * Class:     com_test_Main</span>
<span class="line"> * Method:    sum</span>
<span class="line"> * Signature: (II)V</span>
<span class="line"> */</span></span>
<span class="line">JNIEXPORT <span class="token keyword">void</span> JNICALL <span class="token function">Java_com_test_Main_sum</span></span>
<span class="line">  <span class="token punctuation">(</span>JNIEnv <span class="token operator">*</span><span class="token punctuation">,</span> jclass<span class="token punctuation">,</span> jint<span class="token punctuation">,</span> jint<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">__cplusplus</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着我们在 CLion 中新建一个 C++项目，并引入刚刚生成的头文件，并导入 jni 相关头文件（在 JDK 文件夹中）首先修改 CMake 文件：</p><div class="language-cmake line-numbers-mode" data-highlighter="prismjs" data-ext="cmake"><pre><code class="language-cmake"><span class="line"><span class="token keyword">cmake_minimum_required</span><span class="token punctuation">(</span><span class="token property">VERSION</span> <span class="token number">3.21</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">project</span><span class="token punctuation">(</span>JNITest<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">include_directories</span><span class="token punctuation">(</span>/Library/Java/JavaVirtualMachines/zulu-<span class="token number">8</span>.jdk/Contents/Home/include<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">include_directories</span><span class="token punctuation">(</span>/Library/Java/JavaVirtualMachines/zulu-<span class="token number">8</span>.jdk/Contents/Home/include/darwin<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_CXX_STANDARD</span> <span class="token number">14</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">add_executable</span><span class="token punctuation">(</span>JNITest com_test_Main.cpp com_test_Main.h<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着就可以编写实现了，首先认识一下引用类型对照表：</p><figure><img src="`+y+`" alt="image-20230306164733817" tabindex="0" loading="lazy"><figcaption>image-20230306164733817</figcaption></figure><p>所以我们这里直接返回 a+b 即可：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;com_test_Main.h&quot;</span></span></span>
<span class="line"></span>
<span class="line">JNIEXPORT jint JNICALL <span class="token function">Java_com_test_Main_sum</span></span>
<span class="line">        <span class="token punctuation">(</span>JNIEnv <span class="token operator">*</span> env<span class="token punctuation">,</span> jclass clazz<span class="token punctuation">,</span> jint a<span class="token punctuation">,</span> jint b<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着我们就可以将 cpp 编译为动态链接库，在 MacOS 下会生成<code>.dylib</code>文件，Windows 下会生成<code>.dll</code>文件，我们这里就只以 MacOS 为例，命令有点长，因为还需要包含 JDK 目录下的头文件：</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">gcc com_test_Main.cpp <span class="token parameter variable">-I</span> /Library/Java/JavaVirtualMachines/zulu-8.jdk/Contents/Home/include <span class="token parameter variable">-I</span> /Library/Java/JavaVirtualMachines/zulu-8.jdk/Contents/Home/include/darwin <span class="token parameter variable">-fPIC</span> <span class="token parameter variable">-shared</span> <span class="token parameter variable">-o</span> test.dylib -lstdc++</span>
<span class="line"></span></code></pre></div><p>编译完成后，得到<code>test.dylib</code>文件，这就是动态链接库了。</p><p>最后我们再将其放到桌面，然后在 Java 程序中加载：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">&quot;/Users/nagocoler/Desktop/test.dylib&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">native</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container note"><p class="hint-container-title">注</p><p>如果动态链接库在 class 的类路径下（<code>java.library.path</code> 的值） ，可以使用 <code>System.loadLibrary(&quot;test&quot;);</code></p><p>可以通过如下方法来获得该变量的值：<code>System.getProperty(“java.library.path”);</code></p></div><p>运行，成功得到结果：</p><figure><img src="`+w+'" alt="image-20230306164747347" tabindex="0" loading="lazy"><figcaption>image-20230306164747347</figcaption></figure><p>通过了解 JVM 的一些基础知识，我们心目中大致有了一个 JVM 的模型，在下一章，我们将继续深入学习 JVM 的内存管理机制和垃圾收集器机制，以及一些实用工具。</p>',217)]))}const C=s(_,[["render",J]]),S=JSON.parse('{"path":"/codenotes/java/jvm/%E8%B5%B0%E8%BF%9Bjvm.html","title":"Java JVM 虚拟机 - 走进JVM","lang":"zh-CN","frontmatter":{"title":"Java JVM 虚拟机 - 走进JVM","icon":"JVM","category":["Java","JVM"],"tag":["JVM"],"sticky":false,"star":false,"article":false,"order":1,"timeline":false,"description":"提示 课程地址：https://www.bilibili.com/video/BV1Er4y1r7as/ JVM 相对于 Java 应用层的学习难度更大，开篇推荐掌握的预备知识： C/C++(关键)、微机原理与接口技术、计算机组成原理、操作系统、数据结构与算法、编译原理（不推荐刚学完 JavaSE 的同学学习），如果没有掌握推荐的一半以上的预备知识，可...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"Java JVM 虚拟机 - 走进JVM\\",\\"description\\":\\"提示 课程地址：https://www.bilibili.com/video/BV1Er4y1r7as/ JVM 相对于 Java 应用层的学习难度更大，开篇推荐掌握的预备知识： C/C++(关键)、微机原理与接口技术、计算机组成原理、操作系统、数据结构与算法、编译原理（不推荐刚学完 JavaSE 的同学学习），如果没有掌握推荐的一半以上的预备知识，可...\\"}"],["meta",{"property":"og:url","content":"https://www.stazxr.cn/my-notes/my-notes/codenotes/java/jvm/%E8%B5%B0%E8%BF%9Bjvm.html"}],["meta",{"property":"og:site_name","content":"終わり群星の知识宝库"}],["meta",{"property":"og:title","content":"Java JVM 虚拟机 - 走进JVM"}],["meta",{"property":"og:description","content":"提示 课程地址：https://www.bilibili.com/video/BV1Er4y1r7as/ JVM 相对于 Java 应用层的学习难度更大，开篇推荐掌握的预备知识： C/C++(关键)、微机原理与接口技术、计算机组成原理、操作系统、数据结构与算法、编译原理（不推荐刚学完 JavaSE 的同学学习），如果没有掌握推荐的一半以上的预备知识，可..."}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-06T16:19:30.000Z"}],["meta",{"property":"article:tag","content":"JVM"}],["meta",{"property":"article:modified_time","content":"2025-06-06T16:19:30.000Z"}]]},"git":{"createdTime":1749218848000,"updatedTime":1749226770000,"contributors":[{"name":"talentestors","username":"talentestors","email":"talentestors@gmail.com","commits":2,"url":"https://github.com/talentestors"}]},"readingTime":{"minutes":29.47,"words":8841},"filePathRelative":"codenotes/java/jvm/走进jvm.md","autoDesc":true}');export{C as comp,S as data};
