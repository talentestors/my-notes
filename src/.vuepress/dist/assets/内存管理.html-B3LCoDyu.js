import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{ah as a,ap as p,ai as e}from"./app-CAqLFJSb.js";const t="/my-notes/assets/CP4yv1iqrfjmXzW-Dold41ls.jpg",c="/my-notes/assets/As1NGy6BwhKJ9kY-BGNWz8Kp.webp",l="/my-notes/assets/rRtxbFZXDkmGci4-DJYERO8G.webp",i="/my-notes/assets/SZJWH8l5xByTjr7-ihAovimi.webp",o="/my-notes/assets/FdS8U4lHVjCLKwD-B-3EXzh0.webp",u="/my-notes/assets/FBpxKWIbuY7ftq4-j33Yh1iE.webp",r="/my-notes/assets/vYL53rtIDAWcQhb-Bk0CenSR.webp",k="/my-notes/assets/tnqFSxzEcB4U9WL-B6tghxyA.webp",d="/my-notes/assets/GTgbpIYdCyK3RLj-rY9tqzQF.webp",m="/my-notes/assets/EOC5ilkr396BHNy-O7FSM0yo.webp",v="/my-notes/assets/2fXENphit4OZvVk-C24hOToj.webp",b="/my-notes/assets/r5IsmTk3DZfXA26-j2Q8TCtI.webp",g="/my-notes/assets/C71bdyIY2JVpLKz-PXiaWYVg.webp",f="/my-notes/assets/stqTu8gD3ykixva-DUVC0Zu5.webp",y="/my-notes/assets/4MIORcEDzquZFia-Cb_M0K-2.webp",h="/my-notes/assets/WYSGI5xCh8mOBcK-DPug1ovl.webp",w="/my-notes/assets/48ZguJqIK6ojEba-ev30x_Hh.webp",j="/my-notes/assets/KdZpLNTzEitCOB3-BOsfAUty.webp",x="/my-notes/assets/8sSvloxtKINFYz4-BqeVpuqI.webp",S="/my-notes/assets/OZrKbUm39lfaAgv-DarIBHKG.webp",K="/my-notes/assets/lENKm3CMuxk1JFI-D2HjEVEo.webp",C="/my-notes/assets/xU6LY3nDukNg2rv-BbwAbhzD.webp",M="/my-notes/assets/NeGcYPwDOkdjVfq-BIp20Oxz.webp",_="/my-notes/assets/iWqvCUySGk8Qlad-ZCgmB_yM.webp",J="/my-notes/assets/71PqlEfiGgBSLae-ESZbbpMI.webp",q="/my-notes/assets/d8anmBcLrW3iyJl-lgHzmERt.webp",z="/my-notes/assets/JeifGj6kmVAY2PR-CJ84HP4x.webp",G="/my-notes/assets/4UncSVvO1P2xWKL-Dm2iUhIK.webp",T="/my-notes/assets/v79TEdmyo1njKwl-CQc4CZC_.webp",O="/my-notes/assets/tQwzAK1XU5gdl8Y-Dfp4VITO.webp",E="/my-notes/assets/npiZY1Q4e5EhGuB-DVDhABNL.webp",A="/my-notes/assets/qhmndIQPKarvDso-Ws2rcvtI.webp",V="/my-notes/assets/yHxXZP92DKc5Qre-Chv47ygF.webp",R="/my-notes/assets/kXRMlt5iFDvjq8y-BLn3GrMm.webp",P="/my-notes/assets/2RD3AnPvbh1lQ5N-BeTsdT4o.webp",L="/my-notes/assets/iVcYMU9jdn2NC6Z-BL2JAkon.webp",I={};function F(D,n){return e(),a("div",null,n[0]||(n[0]=[p(`<p>在之前，我们了解了 JVM 的大致运作原理以及相关特性，这一章，我们首先会从内存管理说起。</p><p>在传统的 C/C++开发中，我们经常通过使用申请内存的方式来创建对象或是存放某些数据，但是这样也带来了一些额外的问题，我们要在何时释放这些内存，怎么才能使得内存的使用最高效，因此，内存管理是一个非常严肃的问题。</p><p>比如我们就可以通过 C 语言动态申请内存，并用于存放数据：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">//动态申请4个int大小的内存空间</span></span>
<span class="line">    <span class="token keyword">int</span><span class="token operator">*</span> memory <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">//修改第一个int空间的值</span></span>
<span class="line">    memory<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">//修改第二个int空间的值</span></span>
<span class="line">    memory<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">//遍历内存区域中所有的值</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d &quot;</span><span class="token punctuation">,</span> memory<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">//释放指针所指向的内存区域</span></span>
<span class="line">    <span class="token function">free</span><span class="token punctuation">(</span>memory<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">//最后将指针赋值为NULL</span></span>
<span class="line">    memory <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而在 Java 中，这种操作实际上是不允许的，Java 只支持直接使用基本数据类型和对象类型，至于内存到底如何分配，并不是由我们来处理，而是 JVM 帮助我们进行控制，这样就帮助我们节省很多内存上的工作，虽然带来了很大的便利，但是，一旦出现内存问题，我们就无法像 C/C++那样对所管理的内存进行合理地处理，因为所有的内存操作都是由 JVM 在进行，只有了解了 JVM 的内存管理机制，我们才能够在出现内存相关问题时找到解决方案。</p><h2 id="内存区域划分" tabindex="-1"><a class="header-anchor" href="#内存区域划分"><span>内存区域划分</span></a></h2><p>既然要管理内存，那么肯定不会是杂乱无章的，JVM 对内存的管理采用的是分区治理，不同的内存区域有着各自的职责所在，在虚拟机运行时，内存区域如下划分：</p><figure><img src="`+t+'" alt="点击查看图片来源" tabindex="0" loading="lazy"><figcaption>点击查看图片来源</figcaption></figure><p>我们可以看到，内存区域一共分为 5 个区域，其中方法区和堆是所有线程共享的区域，随着虚拟机的创建而创建，虚拟机的结束而销毁，而虚拟机栈、本地方法栈、程序计数器都是线程之间相互隔离的，每个线程都有一个自己的区域，并且线程启动时会自动创建，结束之后会自动销毁。内存划分完成之后，我们的 JVM 执行引擎和本地库接口，也就是 Java 程序开始运行之后就会根据分区合理地使用对应区域的内存了。</p><h3 id="大致划分" tabindex="-1"><a class="header-anchor" href="#大致划分"><span>大致划分</span></a></h3><h4 id="程序计数器" tabindex="-1"><a class="header-anchor" href="#程序计数器"><span>程序计数器</span></a></h4><p>首先我们来介绍一下程序计数器，它和我们的传统 8086 CPU 中 PC 寄存器的工作差不多，因为 JVM 虚拟机目的就是实现物理机那样的程序执行。在 8086 CPU 中，PC 作为程序计数器，负责储存内存地址，该地址指向下一条即将执行的指令，每解释执行完一条指令，PC 寄存器的值就会自动被更新为下一条指令的地址，进入下一个指令周期时，就会根据当前地址所指向的指令，进行执行。</p><p>而 JVM 中的程序计数器可以看做是当前线程所执行字节码的行号指示器，而行号正好就指的是某一条指令，字节码解释器在工作时也会改变这个值，来指定下一条即将执行的指令。</p><p>因为 Java 的多线程也是依靠时间片轮转算法进行的，因此一个 CPU 同一时间也只会处理一个线程，当某个线程的时间片消耗完成后，会自动切换到下一个线程继续执行，而当前线程的执行位置会被保存到当前线程的程序计数器中，当下次轮转到此线程时，又继续根据之前的执行位置继续向下执行。</p><p>程序计数器因为只需要记录很少的信息，所以只占用很少一部分内存。</p><h4 id="虚拟机栈" tabindex="-1"><a class="header-anchor" href="#虚拟机栈"><span>虚拟机栈</span></a></h4><p>虚拟机栈就是一个非常关键的部分，看名字就知道它是一个栈结构，每个方法被执行的时候，Java 虚拟机都会同步创建一个栈帧（其实就是栈里面的一个元素），栈帧中包括了当前方法的一些信息，比如局部变量表、操作数栈、动态链接、方法出口等。</p><figure><img src="'+c+`" alt="image-20230306164822720" tabindex="0" loading="lazy"><figcaption>image-20230306164822720</figcaption></figure><p>其中局部变量表就是我们方法中的局部变量，之前我们也进行过演示，实际上局部变量表在 class 文件中就已经定义好了，操作数栈就是我们之前字节码执行时使用到的栈结构； 每个栈帧还保存了一个<strong>可以指向当前方法所在类</strong>的运行时常量池，目的是：当前方法中如果需要调用其他方法的时候，能够从运行时常量池中找到对应的符号引用，然后将符号引用转换为直接引用，然后就能直接调用对应方法，这就是动态链接（我们还没讲到常量池，暂时记住即可，建议之后再回顾一下），最后是方法出口，也就是方法该如何结束，是抛出异常还是正常返回。</p><p>可能听起来有点懵逼，这里我们来模拟一下整个虚拟机栈的运作流程，我们先编写一个测试类：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们的主方法执行后，会依次执行三个方法<code>a() -&gt; b() -&gt; c() -&gt; 返回</code>，我们首先来观察一下反编译之后的结果：</p><div class="language-wasm line-numbers-mode" data-highlighter="prismjs" data-ext="wasm"><pre><code class="language-wasm"><span class="line">{</span>
<span class="line">  public com.test.Main<span class="token punctuation">(</span><span class="token punctuation">)</span>;   #这个是构造方法</span>
<span class="line">    descriptor: <span class="token punctuation">(</span><span class="token punctuation">)</span>V</span>
<span class="line">    flags: ACC_PUBLIC</span>
<span class="line">    Code:</span>
<span class="line">      stack=<span class="token number">1</span>, locals=<span class="token number">1</span>, args_size=<span class="token number">1</span></span>
<span class="line">         <span class="token number">0</span>: aload_0</span>
<span class="line">         <span class="token number">1</span>: invokespecial #<span class="token number">1</span>                  // Method java/lang/Object.<span class="token string">&quot;&lt;init&gt;&quot;</span>:<span class="token punctuation">(</span><span class="token punctuation">)</span>V</span>
<span class="line">         <span class="token number">4</span>: <span class="token keyword">return</span></span>
<span class="line">      LineNumberTable:</span>
<span class="line">        line <span class="token number">3</span>: <span class="token number">0</span></span>
<span class="line">      LocalVariableTable:</span>
<span class="line">        Start  Length  Slot  Name   Signature</span>
<span class="line">            <span class="token number">0</span>       <span class="token number">5</span>     <span class="token number">0</span>  this   Lcom/test/Main;</span>
<span class="line"></span>
<span class="line">  public static void main<span class="token punctuation">(</span>java.lang.String[]<span class="token punctuation">)</span>;    #主方法</span>
<span class="line">    descriptor: <span class="token punctuation">(</span>[Ljava/lang/String;<span class="token punctuation">)</span>V</span>
<span class="line">    flags: ACC_PUBLIC, ACC_STATIC</span>
<span class="line">    Code:</span>
<span class="line">      stack=<span class="token number">2</span>, locals=<span class="token number">2</span>, args_size=<span class="token number">1</span></span>
<span class="line">         <span class="token number">0</span>: invokestatic  #<span class="token number">2</span>                  // Method a:<span class="token punctuation">(</span><span class="token punctuation">)</span>I</span>
<span class="line">         <span class="token number">3</span>: istore_1</span>
<span class="line">         <span class="token number">4</span>: getstatic     #<span class="token number">3</span>                  // Field java/lang/System.out:Ljava/io/PrintStream;</span>
<span class="line">         <span class="token number">7</span>: iload_1</span>
<span class="line">         <span class="token number">8</span>: invokevirtual #<span class="token number">4</span>                  // Method java/io/PrintStream.println:<span class="token punctuation">(</span>I<span class="token punctuation">)</span>V</span>
<span class="line">        <span class="token number">11</span>: <span class="token keyword">return</span></span>
<span class="line">      LineNumberTable:</span>
<span class="line">        line <span class="token number">5</span>: <span class="token number">0</span></span>
<span class="line">        line <span class="token number">6</span>: <span class="token number">4</span></span>
<span class="line">        line <span class="token number">7</span>: <span class="token number">11</span></span>
<span class="line">      LocalVariableTable:</span>
<span class="line">        Start  Length  Slot  Name   Signature</span>
<span class="line">            <span class="token number">0</span>      <span class="token number">12</span>     <span class="token number">0</span>  args   [Ljava/lang/String;</span>
<span class="line">            <span class="token number">4</span>       <span class="token number">8</span>     <span class="token number">1</span>   res   I</span>
<span class="line"></span>
<span class="line">  public static int a<span class="token punctuation">(</span><span class="token punctuation">)</span>;</span>
<span class="line">    descriptor: <span class="token punctuation">(</span><span class="token punctuation">)</span>I</span>
<span class="line">    flags: ACC_PUBLIC, ACC_STATIC</span>
<span class="line">    Code:</span>
<span class="line">      stack=<span class="token number">1</span>, locals=<span class="token number">0</span>, args_size=<span class="token number">0</span></span>
<span class="line">         <span class="token number">0</span>: invokestatic  #<span class="token number">5</span>                  // Method b:<span class="token punctuation">(</span><span class="token punctuation">)</span>I</span>
<span class="line">         <span class="token number">3</span>: ireturn</span>
<span class="line">      LineNumberTable:</span>
<span class="line">        line <span class="token number">10</span>: <span class="token number">0</span></span>
<span class="line"></span>
<span class="line">  public static int b<span class="token punctuation">(</span><span class="token punctuation">)</span>;</span>
<span class="line">    descriptor: <span class="token punctuation">(</span><span class="token punctuation">)</span>I</span>
<span class="line">    flags: ACC_PUBLIC, ACC_STATIC</span>
<span class="line">    Code:</span>
<span class="line">      stack=<span class="token number">1</span>, locals=<span class="token number">0</span>, args_size=<span class="token number">0</span></span>
<span class="line">         <span class="token number">0</span>: invokestatic  #<span class="token number">6</span>                  // Method c:<span class="token punctuation">(</span><span class="token punctuation">)</span>I</span>
<span class="line">         <span class="token number">3</span>: ireturn</span>
<span class="line">      LineNumberTable:</span>
<span class="line">        line <span class="token number">14</span>: <span class="token number">0</span></span>
<span class="line"></span>
<span class="line">  public static int c<span class="token punctuation">(</span><span class="token punctuation">)</span>;</span>
<span class="line">    descriptor: <span class="token punctuation">(</span><span class="token punctuation">)</span>I</span>
<span class="line">    flags: ACC_PUBLIC, ACC_STATIC</span>
<span class="line">    Code:</span>
<span class="line">      stack=<span class="token number">2</span>, locals=<span class="token number">2</span>, args_size=<span class="token number">0</span></span>
<span class="line">         <span class="token number">0</span>: bipush        <span class="token number">10</span></span>
<span class="line">         <span class="token number">2</span>: istore_0</span>
<span class="line">         <span class="token number">3</span>: bipush        <span class="token number">20</span></span>
<span class="line">         <span class="token number">5</span>: istore_1</span>
<span class="line">         <span class="token number">6</span>: iload_0</span>
<span class="line">         <span class="token number">7</span>: iload_1</span>
<span class="line">         <span class="token number">8</span>: iadd</span>
<span class="line">         <span class="token number">9</span>: ireturn</span>
<span class="line">      LineNumberTable:</span>
<span class="line">        line <span class="token number">18</span>: <span class="token number">0</span></span>
<span class="line">        line <span class="token number">19</span>: <span class="token number">3</span></span>
<span class="line">        line <span class="token number">20</span>: <span class="token number">6</span></span>
<span class="line">      LocalVariableTable:</span>
<span class="line">        Start  Length  Slot  Name   Signature</span>
<span class="line">            <span class="token number">3</span>       <span class="token number">7</span>     <span class="token number">0</span>     a   I</span>
<span class="line">            <span class="token number">6</span>       <span class="token number">4</span>     <span class="token number">1</span>     b   I</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到在编译之后，我们整个方法的最大操作数栈深度、局部变量表都是已经确定好的，当我们程序开始执行时，会根据这些信息封装为对应的栈帧，我们从<code>main</code>方法开始看起：</p><figure><img src="`+l+'" alt="image-20230306164838564" tabindex="0" loading="lazy"><figcaption>image-20230306164838564</figcaption></figure><p>接着我们继续往下，到了<code>0: invokestatic #2 // Method a:()I</code>时，需要调用方法<code>a()</code>，这时当前方法就不会继续向下运行了，而是去执行方法<code>a()</code>，那么同样的，将此方法也入栈，注意是放入到栈顶位置，<code>main</code>方法的栈帧会被压下去：</p><figure><img src="'+i+'" alt="image-20230306164848411" tabindex="0" loading="lazy"><figcaption>image-20230306164848411</figcaption></figure><p>这时，进入方法 a 之后，又继而进入到方法 b，最后在进入 c，因此，到达方法 c 的时候，我们的虚拟机栈变成了：</p><figure><img src="'+o+'" alt="image-20230306164859169" tabindex="0" loading="lazy"><figcaption>image-20230306164859169</figcaption></figure><p>现在我们依次执行方法 c 中的指令，最后返回 a+b 的结果，在方法 c 返回之后，也就代表方法 c 已经执行结束了，栈帧 4 会自动出栈，这时栈帧 3 就得到了上一栈帧返回的结果，并继续执行，但是由于紧接着马上就返回，所以继续重复栈帧 4 的操作，此时栈帧 3 也出栈并继续将结果交给下一个栈帧 2，最后栈帧 2 再将结果返回给栈帧 1，然后栈帧 1 就可以继续向下运行了，最后输出结果。</p><figure><img src="'+u+'" alt="image-20230306164908882" tabindex="0" loading="lazy"><figcaption>image-20230306164908882</figcaption></figure><h4 id="本地方法栈" tabindex="-1"><a class="header-anchor" href="#本地方法栈"><span>本地方法栈</span></a></h4><p>本地方法栈与虚拟机栈作用差不多，但是它 备的，这里不多做介绍。</p><h4 id="堆" tabindex="-1"><a class="header-anchor" href="#堆"><span>堆</span></a></h4><p>堆是整个 Java 应用程序共享的区域，也是整个虚拟机最大的一块内存空间，而此区域的职责就是存放和管理对象和数组，而我们马上要提到的垃圾回收机制也是主要作用于这一部分内存区域。</p><h4 id="方法区" tabindex="-1"><a class="header-anchor" href="#方法区"><span>方法区</span></a></h4><p>方法区也是整个 Java 应用程序共享的区域，它用于存储所有的类信息、常量、静态变量、动态编译缓存等数据，可以大致分为两个部分，一个是类信息表，一个是运行时常量池。方法区也是我们要重点介绍的部分。</p><figure><img src="'+r+`" alt="image-20230306164925187" tabindex="0" loading="lazy"><figcaption>image-20230306164925187</figcaption></figure><p>首先类信息表中存放的是当前应用程序加载的所有类信息，包括类的版本、字段、方法、接口等信息，同时会将编译时生成的常量池数据全部存放到运行时常量池中。当然，常量也并不是只能从类信息中获取，在程序运行时，也有可能会有新的常量进入到常量池。</p><p>其实我们的 String 类正是利用了常量池进行优化，这里我们编写一个测试用例：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1 <span class="token operator">==</span> str2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>得到的结果也是显而易见的，由于<code>str1</code>和<code>str2</code>是单独创建的两个对象，那么这两个对象实际上会在堆中存放，保存在不同的地址：</p><figure><img src="`+k+`" alt="image-20230306164934743" tabindex="0" loading="lazy"><figcaption>image-20230306164934743</figcaption></figure><p>所以当我们使用<code>==</code>判断时，得到的结果<code>false</code>，而使用<code>equals</code>时因为比较的是值，所以得到<code>true</code>。现在我们来稍微修改一下：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">&quot;abc&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token string">&quot;abc&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1 <span class="token operator">==</span> str2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在我们没有使用 new 的形式，而是直接使用双引号创建，那么这时得到的结果就变成了两个<code>true</code>，这是为什么呢？这其实是因为我们直接使用双引号赋值，会先在常量池中查找是否存在相同的字符串，若存在，则将引用直接指向该字符串；若不存在，则在常量池中生成一个字符串，再将引用指向该字符串：</p><figure><img src="`+d+`" alt="image-20230306164942208" tabindex="0" loading="lazy"><figcaption>image-20230306164942208</figcaption></figure><p>实际上两次调用 String 类的<code>intern()</code>方法，和上面的效果差不多，也是第一次调用会将堆中字符串复制并放入常量池中，第二次通过此方法获取字符串时，会查看常量池中是否包含，如果包含那么会直接返回常量池中字符串的地址：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">//不能直接写&quot;abc&quot;，双引号的形式，写了就直接在常量池里面吧abc创好了</span></span>
<span class="line">    <span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;ab&quot;</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;c&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;ab&quot;</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;c&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> str2<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+m+'" alt="image-20230306164954716" tabindex="0" loading="lazy"><figcaption>image-20230306164954716</figcaption></figure><p>所以上述结果中得到的依然是两个<code>true</code>。在 JDK1.7 之后，稍微有一些区别，在调用<code>intern()</code>方法时，当常量池中没有对应的字符串时，不会再进行复制操作，而是将其直接修改为指向当前字符串堆中的的引用：</p><figure><img src="'+v+`" alt="image-20230306165005169" tabindex="0" loading="lazy"><figcaption>image-20230306165005169</figcaption></figure><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token comment">//不能直接写&quot;abc&quot;，双引号的形式，写了就直接在常量池里面吧abc创好了</span></span>
<span class="line">    <span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;ab&quot;</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;c&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> str1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;ab&quot;</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;c&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;ab&quot;</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;c&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1 <span class="token operator">==</span> str1<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str2<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> str1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以最后我们会发现，<code>str1.intern()</code>和<code>str1</code>都是同一个对象，结果为<code>true</code>。</p><p>值得注意的是，在 JDK7 之后，字符串常量池从方法区移动到了堆中。</p><p>最后我们再来进行一个总结，各个内存区域的用途：</p><ul><li>（线程独有）程序计数器：保存当前程序的执行位置。</li><li>（线程独有）虚拟机栈：通过栈帧来维持方法调用顺序，帮助控制程序有序运行。</li><li>（线程独有）本地方法栈：同上，作用与本地方法。</li><li>堆：所有的对象和数组都在这里保存。</li><li>方法区：类信息、即时编译器的代码缓存、运行时常量池。</li></ul><p>当然，这些内存区域划分仅仅是概念上的，具体的实现过程我们后面还会提到。</p><h3 id="爆内存和爆栈" tabindex="-1"><a class="header-anchor" href="#爆内存和爆栈"><span>爆内存和爆栈</span></a></h3><p>实际上，在 Java 程序运行时，内存容量不可能是无限制的，当我们的对象创建过多或是数组容量过大时，就会导致我们的堆内存不足以存放更多新的对象或是数组，这时就会出现错误，比如：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们申请了一个容量为 21 亿多的 int 型数组，显然，如此之大的数组不可能放在我们的堆内存中，所以程序运行时就会这样：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token class-name">Exception</span> in thread <span class="token string">&quot;main&quot;</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>OutOfMemoryError</span><span class="token operator">:</span> <span class="token class-name">Requested</span> array size exceeds <span class="token constant">VM</span> limit</span>
<span class="line"> at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>test<span class="token punctuation">.</span></span>Main</span><span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">Main</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>这里得到了一个<code>OutOfMemoryError</code>错误，也就是我们常说的内存溢出错误。我们可以通过参数来控制堆内存的最大值和最小值：</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">-Xms最小值 -Xmx最大值</span>
<span class="line"></span></code></pre></div><p>比如我们现在限制堆内存为固定值 1M 大小，并且在抛出内存溢出异常时保存当前的内存堆转储快照：</p><figure><img src="`+b+`" alt="image-20230306165041598" tabindex="0" loading="lazy"><figcaption>image-20230306165041598</figcaption></figure><p>注意堆内存不要设置太小，不然连虚拟机都不足以启动，接着我们编写一个一定会导致内存溢出的程序：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Test</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//无限创建Test对象并丢进List中</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在程序运行之后：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">java.lang.OutOfMemoryError: Java heap space</span>
<span class="line">Dumping heap to java_pid35172.hprof <span class="token punctuation">..</span>.</span>
<span class="line">Heap dump <span class="token function">file</span> created <span class="token punctuation">[</span><span class="token number">12895344</span> bytes <span class="token keyword">in</span> <span class="token number">0.028</span> secs<span class="token punctuation">]</span></span>
<span class="line">Exception <span class="token keyword">in</span> thread <span class="token string">&quot;main&quot;</span> java.lang.OutOfMemoryError: Java heap space</span>
<span class="line"> at java.util.Arrays.copyOf<span class="token punctuation">(</span>Arrays.java:3210<span class="token punctuation">)</span></span>
<span class="line"> at java.util.Arrays.copyOf<span class="token punctuation">(</span>Arrays.java:3181<span class="token punctuation">)</span></span>
<span class="line"> at java.util.ArrayList.grow<span class="token punctuation">(</span>ArrayList.java:267<span class="token punctuation">)</span></span>
<span class="line"> at java.util.ArrayList.ensureExplicitCapacity<span class="token punctuation">(</span>ArrayList.java:241<span class="token punctuation">)</span></span>
<span class="line"> at java.util.ArrayList.ensureCapacityInternal<span class="token punctuation">(</span>ArrayList.java:233<span class="token punctuation">)</span></span>
<span class="line"> at java.util.ArrayList.add<span class="token punctuation">(</span>ArrayList.java:464<span class="token punctuation">)</span></span>
<span class="line"> at com.test.Main.main<span class="token punctuation">(</span>Main.java:10<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到错误出现原因正是<code>Java heap space</code>，也就是堆内存满了，并且根据我们设定的 VM 参数，堆内存保存了快照信息。我们可以在 IDEA 内置的 Profiler 中进行查看：</p><figure><img src="`+g+`" alt="image-20230306165105858" tabindex="0" loading="lazy"><figcaption>image-20230306165105858</figcaption></figure><p>可以很明显地看到，在创建了 360146 个 Test 对象之后，堆内存蚌埠住了，于是就抛出了内存溢出错误。</p><p>我们接着来看栈溢出，我们知道，虚拟机栈会在方法调用时插入栈帧，那么，设想如果出现无限递归的情况呢？</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这很明显是一个永无休止的程序，并且会不断继续向下调用 test 方法本身，那么按照我们之前的逻辑推导，无限地插入栈帧那么一定会将虚拟机栈塞满，所以，当栈的深度已经不足以继续插入栈帧时，就会这样：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">Exception <span class="token keyword">in</span> thread <span class="token string">&quot;main&quot;</span> java.lang.StackOverflowError</span>
<span class="line"> at com.test.Main.test<span class="token punctuation">(</span>Main.java:12<span class="token punctuation">)</span></span>
<span class="line"> at com.test.Main.test<span class="token punctuation">(</span>Main.java:12<span class="token punctuation">)</span></span>
<span class="line"> at com.test.Main.test<span class="token punctuation">(</span>Main.java:12<span class="token punctuation">)</span></span>
<span class="line"> at com.test.Main.test<span class="token punctuation">(</span>Main.java:12<span class="token punctuation">)</span></span>
<span class="line"> at com.test.Main.test<span class="token punctuation">(</span>Main.java:12<span class="token punctuation">)</span></span>
<span class="line"> at com.test.Main.test<span class="token punctuation">(</span>Main.java:12<span class="token punctuation">)</span></span>
<span class="line"> <span class="token punctuation">..</span><span class="token punctuation">..</span>以下省略很多行</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这也是我们常说的栈溢出，它和堆溢出比较类似，也是由于容纳不下才导致的，我们可以使用<code>-Xss</code>来设定栈容量。</p><h3 id="申请堆外内存" tabindex="-1"><a class="header-anchor" href="#申请堆外内存"><span>申请堆外内存</span></a></h3><p>除了堆内存可以存放对象数据以外，我们也可以申请堆外内存（直接内存），也就是不受 JVM 管控的内存区域，这部分区域的内存需要我们自行去申请和释放，实际上本质就是 JVM 通过 C/C++调用<code>malloc</code>函数申请的内存，当然得我们自己去释放了。不过虽然是直接内存，不会受到堆内存容量限制，但是依然会受到本机最大内存的限制，所以还是有可能抛出<code>OutOfMemoryError</code>异常。</p><p>这里我们需要提到一个堆外内存操作类：<code>Unsafe</code>，就像它的名字一样，虽然 Java 提供堆外内存的操作类，但是实际上它是不安全的，只有你完全了解底层原理并且能够合理控制堆外内存，才能安全地使用堆外内存。</p><p>注意这个类不让我们 new，也没有直接获取方式（压根就没想让我们用）：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Unsafe</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">registerNatives</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">registerNatives</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name"><span class="token namespace">sun<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span>Reflection</span><span class="token punctuation">.</span><span class="token function">registerMethodsToFilter</span><span class="token punctuation">(</span><span class="token class-name">Unsafe</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">&quot;getUnsafe&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">Unsafe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Unsafe</span> theUnsafe <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Unsafe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@CallerSensitive</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Unsafe</span> <span class="token function">getUnsafe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> caller <span class="token operator">=</span> <span class="token class-name">Reflection</span><span class="token punctuation">.</span><span class="token function">getCallerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token constant">VM</span><span class="token punctuation">.</span><span class="token function">isSystemDomainLoader</span><span class="token punctuation">(</span>caller<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SecurityException</span><span class="token punctuation">(</span><span class="token string">&quot;Unsafe&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//不是JDK的类，不让用。</span></span>
<span class="line">        <span class="token keyword">return</span> theUnsafe<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以我们这里就通过反射给它构造出来：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IllegalAccessException</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Field</span> unsafeField <span class="token operator">=</span> <span class="token class-name">Unsafe</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    unsafeField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">Unsafe</span> unsafe <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Unsafe</span><span class="token punctuation">)</span> unsafeField<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>成功拿到 Unsafe 类之后，我们就可以开始申请堆外内存了，比如我们现在想要申请一个 int 大小的内存空间，并在此空间中存放一个 int 类型的数据：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IllegalAccessException</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Field</span> unsafeField <span class="token operator">=</span> <span class="token class-name">Unsafe</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    unsafeField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">Unsafe</span> unsafe <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Unsafe</span><span class="token punctuation">)</span> unsafeField<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">//申请4字节大小的内存空间，并得到对应位置的地址</span></span>
<span class="line">    <span class="token keyword">long</span> address <span class="token operator">=</span> unsafe<span class="token punctuation">.</span><span class="token function">allocateMemory</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">//在对应的地址上设定int的值</span></span>
<span class="line">    unsafe<span class="token punctuation">.</span><span class="token function">putInt</span><span class="token punctuation">(</span>address<span class="token punctuation">,</span> <span class="token number">6666666</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">//获取对应地址上的Int型数值</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">//释放申请到的内容</span></span>
<span class="line">    unsafe<span class="token punctuation">.</span><span class="token function">freeMemory</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">//由于内存已经释放，这时数据就没了</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以来看一下<code>allocateMemory</code>底层是如何调用的，这是一个 native 方法，我们来看 C++源码：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token function">UNSAFE_ENTRY</span><span class="token punctuation">(</span>jlong<span class="token punctuation">,</span> <span class="token function">Unsafe_AllocateMemory0</span><span class="token punctuation">(</span>JNIEnv <span class="token operator">*</span>env<span class="token punctuation">,</span> jobject unsafe<span class="token punctuation">,</span> jlong size<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  size_t sz <span class="token operator">=</span> <span class="token punctuation">(</span>size_t<span class="token punctuation">)</span>size<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  sz <span class="token operator">=</span> <span class="token function">align_up</span><span class="token punctuation">(</span>sz<span class="token punctuation">,</span> HeapWordSize<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">void</span><span class="token operator">*</span> x <span class="token operator">=</span> os<span class="token double-colon punctuation">::</span><span class="token function">malloc</span><span class="token punctuation">(</span>sz<span class="token punctuation">,</span> mtOther<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//这里调用了os::malloc方法</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token function">addr_to_java</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> UNSAFE_END</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着来看：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token keyword">void</span><span class="token operator">*</span> os<span class="token double-colon punctuation">::</span><span class="token function">malloc</span><span class="token punctuation">(</span>size_t size<span class="token punctuation">,</span> MEMFLAGS flags<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> os<span class="token double-colon punctuation">::</span><span class="token function">malloc</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> flags<span class="token punctuation">,</span> CALLER_PC<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">void</span><span class="token operator">*</span> os<span class="token double-colon punctuation">::</span><span class="token function">malloc</span><span class="token punctuation">(</span>size_t size<span class="token punctuation">,</span> MEMFLAGS memflags<span class="token punctuation">,</span> <span class="token keyword">const</span> NativeCallStack<span class="token operator">&amp;</span> stack<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line">  u_char<span class="token operator">*</span> ptr<span class="token punctuation">;</span></span>
<span class="line">  ptr <span class="token operator">=</span> <span class="token punctuation">(</span>u_char<span class="token operator">*</span><span class="token punctuation">)</span><span class="token double-colon punctuation">::</span><span class="token function">malloc</span><span class="token punctuation">(</span>alloc_size<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//调用C++标准库函数 malloc(size)</span></span>
<span class="line"> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line">  <span class="token comment">// we do not track guard memory</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token class-name">MemTracker</span><span class="token double-colon punctuation">::</span><span class="token function">record_malloc</span><span class="token punctuation">(</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span>ptr<span class="token punctuation">,</span> size<span class="token punctuation">,</span> memflags<span class="token punctuation">,</span> stack<span class="token punctuation">,</span> level<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以，我们上面的 Java 代码转换为 C 代码，差不多就是这个意思：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> <span class="token operator">*</span> a <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token operator">*</span>a <span class="token operator">=</span> <span class="token number">6666666</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">free</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以说，直接内存实际上就是 JVM 申请的一块额外的内存空间，但是它并不在受管控的几种内存空间中，当然这些内存依然属于是 JVM 的，由于 JVM 提供的堆内存会进行垃圾回收等工作，效率不如直接申请和操作内存来得快，一些比较追求极致性能的框架会用到堆外内存来提升运行速度，如 nio 框架。</p><p>当然，Unsafe 类不仅仅只是这些功能，在其他系列课程中，我们还会讲到它。</p><hr><h2 id="垃圾回收机制" tabindex="-1"><a class="header-anchor" href="#垃圾回收机制"><span>垃圾回收机制</span></a></h2><p><strong>注意：</strong> 此部分为重点内容。</p><p>我们前面提到，Java 会自动管理和释放内存，它不像 C/C++那样要求我们手动管理内存，JVM 提供了一套全自动的内存管理机制，当一个 Java 对象不再用到时，JVM 会自动将其进行回收并释放内存，那么对象所占内存在什么时候被回收，如何判定对象可以被回收，以及如何去进行回收工作也是 JVM 需要关注的问题。</p><h3 id="对象存活判定算法" tabindex="-1"><a class="header-anchor" href="#对象存活判定算法"><span>对象存活判定算法</span></a></h3><p>首先我们来套讨论第一个问题，也就是：对象在什么情况下可以被判定为不再使用已经可以回收了？这里就需要提到以下几种垃圾回收算法了。</p><figure><img src="`+f+`" alt="image-20230306165128192" tabindex="0" loading="lazy"><figcaption>image-20230306165128192</figcaption></figure><h4 id="引用计数法" tabindex="-1"><a class="header-anchor" href="#引用计数法"><span>引用计数法</span></a></h4><p>我们知道，如果我们要经常操作一个对象，那么首先一定会创建一个引用变量：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token comment">//str就是一个引用类型的变量，它持有对后面字符串对象的引用，可以代表后面这个字符串对象本身</span></span>
<span class="line"><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;lbwnb&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//str.xxxxx...</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实际上，我们会发现，只要一个对象还有使用价值，我们就会通过它的引用变量来进行操作，那么可否这样判断一个对象是否还需要被使用：</p><ul><li>每个对象都包含一个 <strong>引用计数器</strong>，用于存放引用计数（其实就是存放被引用的次数）</li><li>每当有一个地方引用此对象时，引用计数<code>+1</code></li><li>当引用失效（ 比如离开了局部变量的作用域或是引用被设定为<code>null</code>）时，引用计数<code>-1</code></li><li>当引用计数为<code>0</code>时，表示此对象不可能再被使用，因为这时我们已经没有任何方法可以得到此对象的引用了</li></ul><p>但是这样存在一个问题，如果两个对象相互引用呢？</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Test</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">Test</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        a<span class="token punctuation">.</span>another <span class="token operator">=</span> b<span class="token punctuation">;</span></span>
<span class="line">        b<span class="token punctuation">.</span>another <span class="token operator">=</span> a<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//这里直接把a和b赋值为null，这样前面的两个对象我们不可能再得到了</span></span>
<span class="line">        a <span class="token operator">=</span> b <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Test</span> another<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>按照引用计数算法，那么当出现以上情况时，虽然我们无法在得到此对象的引用了，并且此对象我们也无需再使用，但是由于这两个对象直接存在相互引用的情况，那么引用计数器的值将会永远是<code>1</code>，但是实际上此对象已经没有任何用途了。所以引用计数法并不是最好的解决方案。</p><h4 id="可达性分析算法" tabindex="-1"><a class="header-anchor" href="#可达性分析算法"><span>可达性分析算法</span></a></h4><p>目前比较主流的编程语言（包括 Java），一般都会使用可达性分析算法来判断对象是否存活，它采用了类似于树结构的搜索机制。</p><p>首先每个对象的引用都有机会成为树的根节点（GC Roots），可以被选定作为根节点条件如下：</p><ul><li>位于虚拟机栈的栈帧中的本地变量表中所引用到的对象（其实就是我们方法中的局部变量）同样也包括本地方法栈中 JNI 引用的对象。</li><li>类的静态成员变量引用的对象。</li><li>方法区中，常量池里面引用的对象，比如我们之前提到的<code>String</code>类型对象。</li><li>被添加了锁的对象（比如 synchronized 关键字）</li><li>虚拟机内部需要用到的对象。</li></ul><figure><img src="`+y+'" alt="image-20230306165140204" tabindex="0" loading="lazy"><figcaption>image-20230306165140204</figcaption></figure><p>一旦已经存在的根节点不满足存在的条件时，那么根节点与对象之间的连接将被断开。此时虽然对象 1 仍存在对其他对象的引用，但是由于其没有任何根节点引用，所以此对象即可被判定为不再使用。比如某个方法中的局部变量引用，在方法执行完成返回之后：</p><figure><img src="'+h+'" alt="image-20230306165153841" tabindex="0" loading="lazy"><figcaption>image-20230306165153841</figcaption></figure><p>这样就能很好地解决我们刚刚提到的循环引用问题，我们再来重现一下出现循环引用的情况：</p><figure><img src="'+w+'" alt="image-20230306165211604" tabindex="0" loading="lazy"><figcaption>image-20230306165211604</figcaption></figure><p>可以看到，对象 1 和对象 2 依然是存在循环引用的，但是只有他们各自的 GC Roots 断开，那么就会变成下面这样：</p><figure><img src="'+j+`" alt="image-20230306165225991" tabindex="0" loading="lazy"><figcaption>image-20230306165225991</figcaption></figure><p>所以，我们最后进行一下总结：如果某个对象无法到达任何 GC Roots，则证明此对象是不可能再被使用的。</p><h4 id="最终判定" tabindex="-1"><a class="header-anchor" href="#最终判定"><span>最终判定</span></a></h4><p>虽然在经历了可达性分析算法之后基本可能判定哪些对象能够被回收，但是并不代表此对象一定会被回收，我们依然可以在最终判定阶段对其进行挽留。</p><p>还记得我们之前在讲解<code>Object</code>类时提到的<code>finalize()</code>方法吗？</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Called by the garbage collector on an object when garbage collection</span>
<span class="line"> * determines that there are no more references to the object.</span>
<span class="line"> * A subclass overrides the <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">finalize</span></span><span class="token punctuation">}</span> method to dispose of</span>
<span class="line"> * system resources or to perform other cleanup.</span>
<span class="line"> * ...</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此方法正是最终判定方法，如果子类重写了此方法，那么子类对象在被判定为可回收时，会进行二次确认，也就是执行<code>finalize()</code>方法，而在此方法中，当前对象是完全有可能重新建立 GC Roots 的！所以，如果在二次确认后对象不满足可回收的条件，那么此对象不会被回收，巧妙地逃过了垃圾回收的命运。比如下面这个例子：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Test</span> a<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span></span>
<span class="line">        a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//这里直接把a赋值为null，这样前面的对象我们不可能再得到了</span></span>
<span class="line">        a  <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//手动申请执行垃圾回收操作（注意只是申请，并不一定会执行，但是一般情况下都会执行）</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//等垃圾回收一下()</span></span>
<span class="line">        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//我们来看看a有没有被回收</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token annotation punctuation">@Override</span></span>
<span class="line">        <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">+</span><span class="token string">&quot; 开始了它的救赎之路！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            a <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意<code>finalize()</code>方法并不是在主线程调用的，而是虚拟机自动建立的一个低优先级的<code>Finalizer</code>线程（正是因为优先级比较低，所以前面才需要等待 1 秒钟）进行处理，我们可以稍微修改一下看看：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        a <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">Thread<span class="token punctuation">[</span>Finalizer,8,system<span class="token punctuation">]</span></span>
<span class="line">com.test.Main<span class="token variable">$Test</span>@232204a1</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>同时，同一个对象的<code>finalize()</code>方法只会有一次调用机会，也就是说，如果我们连续两次这样操作，那么第二次，对象必定被回收：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span></span>
<span class="line">    a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">//这里直接把a赋值为null，这样前面的对象我们不可能再得到了</span></span>
<span class="line">    a  <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">//手动申请执行垃圾回收操作（注意只是申请，并不一定会执行，但是一般情况下都会执行）</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">//等垃圾回收一下</span></span>
<span class="line">    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">//这里直接把a赋值为null，这样前面的对象我们不可能再得到了</span></span>
<span class="line">    a  <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">//手动申请执行垃圾回收操作（注意只是申请，并不一定会执行，但是一般情况下都会执行）</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">//等垃圾回收一下</span></span>
<span class="line">    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，<code>finalize()</code>方法也并不是专门防止对象被回收的，我们可以使用它来释放一些程序使用中的资源等。</p><p>最后，总结成一张图：</p><figure><img src="`+x+'" alt="image-20230306165250173" tabindex="0" loading="lazy"><figcaption>image-20230306165250173</figcaption></figure><p>当然，除了堆中的对象以外，方法区中的数据也是可以被垃圾回收的，但是回收条件比较严格，这里就暂时不谈了。</p><hr><h3 id="垃圾回收算法" tabindex="-1"><a class="header-anchor" href="#垃圾回收算法"><span>垃圾回收算法</span></a></h3><p>前面我们介绍了对象存活判定算法，现在我们已经可以准确地知道堆中的哪些对象可以被回收了，那么，接下来就该考虑如何对对象进行回收了，垃圾收集器会不定期地检查堆中的对象，查看它们是否满足被回收的条件。我们该如何对这些对象进行回收，是一个一个判断是否需要回收吗？</p><h4 id="分代收集机制" tabindex="-1"><a class="header-anchor" href="#分代收集机制"><span>分代收集机制</span></a></h4><p>实际上，如果我们对堆中的每一个对象都依次判断是否需要回收，这样的效率其实是很低的，那么有没有更好地回收机制呢？第一步，我们可以对堆中的对象进行分代管理。</p><p>比如某些对象，在多次垃圾回收时，都未被判定为可回收对象，我们完全可以将这一部分对象放在一起，并让垃圾收集器减少回收此区域对象的频率，这样就能很好地提高垃圾回收的效率了。</p><p>因此，Java 虚拟机将堆内存划分为<strong>新生代</strong>、<strong>老年代</strong>和<strong>永久代</strong>（其中永久代是 HotSpot 虚拟机特有的概念，在 JDK8 之前方法区实际上就是采用的永久代作为实现，而在 JDK8 之后，方法区由元空间实现，并且使用的是本地内存，容量大小取决于物理机实际大小，之后会详细介绍）这里我们主要讨论的是<strong>新生代</strong>和<strong>老年代</strong>。</p><p>不同的分代内存回收机制也存在一些不同之处，在 HotSpot 虚拟机中，新生代被划分为三块，一块较大的 Eden 空间和两块较小的 Survivor 空间，默认比例为 8：1：1，老年代的 GC 评率相对较低，永久代一般存放类信息等（其实就是方法区的实现）如图所示：</p><figure><img src="'+S+'" alt="image-20230306165311823" tabindex="0" loading="lazy"><figcaption>image-20230306165311823</figcaption></figure><p>那么它是如何运作的呢？</p><p>首先，所有新创建的对象，在一开始都会进入到新生代的 Eden 区（如果是大对象会被直接丢进老年代），在进行新生代区域的垃圾回收时，首先会对所有新生代区域的对象进行扫描，并回收那些不再使用对象：</p><figure><img src="'+K+'" alt="image-20230306165326642" tabindex="0" loading="lazy"><figcaption>image-20230306165326642</figcaption></figure><p>接着，在一次垃圾回收之后，Eden 区域没有被回收的对象，会进入到 Survivor 区。在一开始 From 和 To 都是空的，而 GC 之后，所有 Eden 区域存活的对象都会直接被放入到 From 区，最后 From 和 To 会发生一次交换，也就是说目前存放我们对象的 From 区，变为 To 区，而 To 区变为 From 区：</p><figure><img src="'+C+'" alt="image-20230306165336145" tabindex="0" loading="lazy"><figcaption>image-20230306165336145</figcaption></figure><p>接着就是下一次垃圾回收了，操作与上面是一样的，不过这时由于我们 From 区域中已经存在对象了，所以，在 Eden 区的存活对象复制到 From 区之后，所有 To 区域中的对象会进行年龄判定（每经历一轮 GC 年龄<code>+1</code>，如果对象的年龄大于<code>默认值为15</code>，那么会直接进入到老年代，否则移动到 From 区）</p><figure><img src="'+M+'" alt="image-20230306165345563" tabindex="0" loading="lazy"><figcaption>image-20230306165345563</figcaption></figure><p>最后像上面一样交换 To 区和 From 区，之后不断重复以上步骤。</p><p>而垃圾收集也分为：</p><ul><li>Minor GC - 次要垃圾回收，主要进行新生代区域的垃圾收集。 <ul><li>触发条件：新生代的 Eden 区容量已满时。</li></ul></li><li>Major GC - 主要垃圾回收，主要进行老年代的垃圾收集。</li><li>Full GC - 完全垃圾回收，对整个 Java 堆内存和方法区进行垃圾回收。 <ul><li>触发条件 1：每次晋升到老年代的对象平均大小大于老年代剩余空间</li><li>触发条件 2：Minor GC 后存活的对象超过了老年代剩余空间</li><li>触发条件 3：永久代内存不足（JDK8 之前）</li><li>触发条件 4：手动调用<code>System.gc()</code>方法</li></ul></li></ul><p>我们可以添加启动参数来查看 JVM 的 GC 日志：</p><figure><img src="'+_+`" alt="image-20230306165355706" tabindex="0" loading="lazy"><figcaption>image-20230306165355706</figcaption></figure><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Object</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        o <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-wasm line-numbers-mode" data-highlighter="prismjs" data-ext="wasm"><pre><code class="language-wasm"><span class="line">[GC <span class="token punctuation">(</span>System.gc<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> [PSYoungGen: 2621K-&gt;528K<span class="token punctuation">(</span>76288K<span class="token punctuation">)</span>] 2621K-&gt;528K<span class="token punctuation">(</span>251392K<span class="token punctuation">)</span>, <span class="token number">0.0006874</span> secs] [Times: user=<span class="token number">0.01</span> sys=<span class="token number">0.01</span>, real=<span class="token number">0.00</span> secs]</span>
<span class="line">[Full GC <span class="token punctuation">(</span>System.gc<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> [PSYoungGen: 528K-&gt;0K<span class="token punctuation">(</span>76288K<span class="token punctuation">)</span>] [ParOldGen: 0K-&gt;332K<span class="token punctuation">(</span>175104K<span class="token punctuation">)</span>] 528K-&gt;332K<span class="token punctuation">(</span>251392K<span class="token punctuation">)</span>, [Metaspace: 3073K-&gt;3073K<span class="token punctuation">(</span>1056768K<span class="token punctuation">)</span>], <span class="token number">0.0022693</span> secs] [Times: user=<span class="token number">0.00</span> sys=<span class="token number">0.00</span>, real=<span class="token number">0.00</span> secs]</span>
<span class="line">Heap</span>
<span class="line"> PSYoungGen      total 76288K, used 3277K [<span class="token number">0x000000076ab00000</span>, <span class="token number">0x0000000770000000</span>, <span class="token number">0x00000007c0000000</span><span class="token punctuation">)</span></span>
<span class="line">  eden space 65536K, <span class="token number">5</span>% used [<span class="token number">0x000000076ab00000</span>,<span class="token number">0x000000076ae334d8</span>,<span class="token number">0x000000076eb00000</span><span class="token punctuation">)</span></span>
<span class="line">  from space 10752K, <span class="token number">0</span>% used [<span class="token number">0x000000076eb00000</span>,<span class="token number">0x000000076eb00000</span>,<span class="token number">0x000000076f580000</span><span class="token punctuation">)</span></span>
<span class="line">  to   space 10752K, <span class="token number">0</span>% used [<span class="token number">0x000000076f580000</span>,<span class="token number">0x000000076f580000</span>,<span class="token number">0x0000000770000000</span><span class="token punctuation">)</span></span>
<span class="line"> ParOldGen       total 175104K, used 332K [<span class="token number">0x00000006c0000000</span>, <span class="token number">0x00000006cab00000</span>, <span class="token number">0x000000076ab00000</span><span class="token punctuation">)</span></span>
<span class="line">  object space 175104K, <span class="token number">0</span>% used [<span class="token number">0x00000006c0000000</span>,<span class="token number">0x00000006c00532d8</span>,<span class="token number">0x00000006cab00000</span><span class="token punctuation">)</span></span>
<span class="line"> Metaspace       used 3096K, capacity 4496K, committed 4864K, reserved 1056768K</span>
<span class="line">  class space    used 333K, capacity 388K, committed 512K, reserved 1048576K</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在我们还只能大致看懂 GC 日志，不过在学习完成本章全部内容后，我们就可以轻松阅读了。</p><h4 id="空间分配担保" tabindex="-1"><a class="header-anchor" href="#空间分配担保"><span>空间分配担保</span></a></h4><p>我们可以思考一下，有没有这样一种极端情况（正常情况下新生代的回收率是很高的，所以说不用太担心会经常出现这种问题），在一次 GC 后，新生代 Eden 区仍然存在大量的对象（因为 GC 之后存活对象会进入到一个 Survivor 区，但是很明显这时已经超出 Survivor 区的容量了，肯定是装不下的）那么现在该怎么办？</p><p>这时就需要用到空间分配担保机制了，可以把 Survivor 区无法容纳的对象直接送到老年代，让老年代进行分配担保（当然老年代也得装得下才行）在现实生活中，贷款会指定担保人，就是当借款人还不起钱的时候由担保人来还钱。</p><p>当新生代无法容纳更多的的对象时，可以把新生代中的对象移动到老年代中，这样新生代就腾出了空间来容纳更多的对象。</p><p>好，那既然新生代装不下就丢给老年代，那么要是老年代也装不下新生代的数据呢？这时，老年代肯定担保人是当不成了，那么这样的话，首先会判断一下之前的每次垃圾回收进入老年代的平均大小是否小于当前老年代的剩余空间，如果小于，那么说明也许可以放得下（不过也仅仅是也许，依然有可能放不下，因为判断的实际上只是平均值，万一这一次突然非常大呢），否则，会先来一次 Full GC，进行一次大规模垃圾回收，来尝试腾出空间，再次判断老年代是否有空间存放，要是还是装不下，直接抛出 OOM 错误，摆烂。</p><p>最后，我们来总结一下一次 Minor GC 的整个过程：</p><figure><img src="`+J+'" alt="image-20230306165425918" tabindex="0" loading="lazy"><figcaption>image-20230306165425918</figcaption></figure><hr><h4 id="标记-清除算法" tabindex="-1"><a class="header-anchor" href="#标记-清除算法"><span>标记-清除算法</span></a></h4><p>前面我们已经了解了整个堆内存实际上是以分代收集机制为主，但是依然没有讲到具体的收集过程，那么，具体的回收过程又是什么样的呢？首先我们来了解一下最古老的<code>标记-清除</code>算法。</p><p>首先标记出所有需要回收的对象，然后再依次回收掉被标记的对象，或是标记出所有不需要回收的对象，只回收未标记的对象。实际上这种算法是非常基础的，并且最易于理解的（这里对象我就以一个方框代替了，当然实际上存放是我们前说到的 GC Roots 形式）</p><figure><img src="'+q+'" alt="image-20230306165444019" tabindex="0" loading="lazy"><figcaption>image-20230306165444019</figcaption></figure><p>虽然此方法非常简单，但是缺点也是非常明显的 ，首先如果内存中存在大量的对象，那么可能就会存在大量的标记，并且大规模进行清除。并且一次标记清除之后，连续的内存空间可能会出现许许多多的空隙，碎片化会导致连续内存空间利用率降低。</p><h4 id="标记-复制算法" tabindex="-1"><a class="header-anchor" href="#标记-复制算法"><span>标记-复制算法</span></a></h4><p>既然标记清除算法在面对大量对象时效率低，那么我们可以采用标记-复制算法。它将容量分为同样大小的两块区域，</p><p>标记复制算法，实际上就是将内存区域划分为大小相同的两块区域，每次只使用其中的一块区域，每次垃圾回收结束后，将所有存活的对象全部复制到另一块区域中，并一次性清空当前区域。虽然浪费了一些时间进行复制操作，但是这样能够很好地解决对象大面积回收后空间碎片化严重的问题。</p><figure><img src="'+z+'" alt="image-20230306165458671" tabindex="0" loading="lazy"><figcaption>image-20230306165458671</figcaption></figure><p>这种算法就非常适用于新生代（因为新生代的回收效率极高，一般不会留下太多的对象）的垃圾回收，而我们之前所说的新生代 Survivor 区其实就是这个思路，包括 8:1:1 的比例也正是为了对标记复制算法进行优化而采取的。</p><h4 id="标记-整理算法" tabindex="-1"><a class="header-anchor" href="#标记-整理算法"><span>标记-整理算法</span></a></h4><p>虽然标记-复制算法能够很好地应对新生代高回收率的场景，但是放到老年代，它就显得很鸡肋了。我们知道，一般长期都回收不到的对象，才有机会进入到老年代，所以老年代一般都是些钉子户，可能一次 GC 后，仍然存留很多对象。而标记复制算法会在 GC 后完整复制整个区域内容，并且会折损 50%的区域，显然这并不适用于老年代。</p><p>那么我们能否这样，在标记所有待回收对象之后，不急着去进行回收操作，而是将所有待回收的对象整齐排列在一段内存空间中，而需要回收的对象全部往后丢，这样，前半部分的所有对象都是无需进行回收的，而后半部分直接一次性清除即可。</p><figure><img src="'+G+'" alt="image-20230306165514101" tabindex="0" loading="lazy"><figcaption>image-20230306165514101</figcaption></figure><p>虽然这样能保证内存空间充分使用，并且也没有标记复制算法那么繁杂，但是缺点也是显而易见的，它的效率比前两者都低。甚至，由于需要修改对象在内存中的位置，此时程序必须要暂停才可以，在极端情况下，可能会导致整个程序发生停顿（被称为“Stop The World”）。</p><p>所以，我们可以将标记清除算法和标记整理算法混合使用，在内存空间还不是很凌乱的时候，采用标记清除算法其实是没有多大问题的，当内存空间凌乱到一定程度后，我们可以进行一次标记整理算法。</p><hr><h3 id="垃圾收集器实现" tabindex="-1"><a class="header-anchor" href="#垃圾收集器实现"><span>垃圾收集器实现</span></a></h3><p>聊完了对象存活判定和垃圾回收算法，接着我们就要看看具体有哪些垃圾回收器的实现了。我们可以自由地为新生代和老年代选择更适合它们的收集器。</p><h4 id="serial-收集器" tabindex="-1"><a class="header-anchor" href="#serial-收集器"><span>Serial 收集器</span></a></h4><p>这款垃圾收集器也是元老级别的收集器了，在 JDK1.3.1 之前，是虚拟机新生代区域收集器的唯一选择。这是一款单线程的垃圾收集器，也就是说，当开始进行垃圾回收时，需要暂停所有的线程，直到垃圾收集工作结束。它的新生代收集算法采用的是标记复制算法，老年代采用的是标记整理算法。</p><figure><img src="'+T+`" alt="image-20230306165527009" tabindex="0" loading="lazy"><figcaption>image-20230306165527009</figcaption></figure><p>可以看到，当进入到垃圾回收阶段时，所有的用户线程必须等待 GC 线程完成工作，就相当于你打一把 LOL 40 分钟，中途每隔 1 分钟网络就卡 5 秒钟，可能这时你正在打团，结果你被物理控制直接在那里站了 5 秒钟，这确实让人难以接受。</p><p>虽然缺点很明显，但是优势也是显而易见的：</p><ol><li>设计简单而高效。</li><li>在用户的桌面应用场景中，内存一般不大，可以在较短时间内完成垃圾收集，只要不频繁发生，使用串行回收器是可以接受的。</li></ol><p>所以，在客户端模式（一般用于一些桌面级图形化界面应用程序）下的新生代中，默认垃圾收集器至今依然是 Serial 收集器。我们可以在<code>java -version</code>中查看默认的客户端模式：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">openjdk version <span class="token string">&quot;1.8.0_322&quot;</span></span>
<span class="line">OpenJDK Runtime Environment <span class="token punctuation">(</span>Zulu <span class="token number">8.60</span>.0.21-CA-macos-aarch64<span class="token punctuation">)</span> <span class="token punctuation">(</span>build <span class="token number">1.8</span>.0_322-b06<span class="token punctuation">)</span></span>
<span class="line">OpenJDK <span class="token number">64</span>-Bit Server VM <span class="token punctuation">(</span>Zulu <span class="token number">8.60</span>.0.21-CA-macos-aarch64<span class="token punctuation">)</span> <span class="token punctuation">(</span>build <span class="token number">25.322</span>-b06, mixed mode<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以在 jvm.cfg 文件中切换 JRE 为 Server VM 或是 Client VM，默认路径为：</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">JDK安装目录/jre/lib/jvm.cfg</span>
<span class="line"></span></code></pre></div><p>比如我们需要将当前模式切换为客户端模式，那么我们可以这样编辑：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token parameter variable">-client</span> KNOWN</span>
<span class="line"><span class="token parameter variable">-server</span> IGNORE</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="parnew-收集器" tabindex="-1"><a class="header-anchor" href="#parnew-收集器"><span>ParNew 收集器</span></a></h4><p>这款垃圾收集器相当于是 Serial 收集器的多线程版本，它能够支持多线程垃圾收集：</p><figure><img src="`+O+'" alt="image-20230306165542516" tabindex="0" loading="lazy"><figcaption>image-20230306165542516</figcaption></figure><p>除了多线程支持以外，其他内容基本与 Serial 收集器一致，并且目前某些 JVM 默认的服务端模式新生代收集器就是使用的 ParNew 收集器。</p><h4 id="parallel-scavenge-parallel-old-收集器" tabindex="-1"><a class="header-anchor" href="#parallel-scavenge-parallel-old-收集器"><span>Parallel Scavenge/Parallel Old 收集器</span></a></h4><p>Parallel Scavenge 同样是一款面向新生代的垃圾收集器，同样采用标记复制算法实现，在 JDK6 时也推出了其老年代收集器 Parallel Old，采用标记整理算法实现：</p><figure><img src="'+E+'" alt="image-20230306165555265" tabindex="0" loading="lazy"><figcaption>image-20230306165555265</figcaption></figure><p>与 ParNew 收集器不同的是，它会自动衡量一个吞吐量，并根据吞吐量来决定每次垃圾回收的时间，这种自适应机制，能够很好地权衡当前机器的性能，根据性能选择最优方案。</p><p>目前 JDK8 采用的就是这种 Parallel Scavenge + Parallel Old 的垃圾回收方案。</p><h4 id="cms-收集器" tabindex="-1"><a class="header-anchor" href="#cms-收集器"><span>CMS 收集器</span></a></h4><p>在 JDK1.5，HotSpot 推出了一款在强交互应用中几乎可认为有划时代意义的垃圾收集器：CMS（Concurrent-Mark-Sweep）收集器，这款收集器是 HotSpot 虚拟机中第一款真正意义上的并发（注意这里的并发和之前的并行是有区别的，并发可以理解为同时运行用户线程和 GC 线程，而并行可以理解为多条 GC 线程同时工作）收集器，它第一次实现了让垃圾收集线程与用户线程同时工作。</p><p>它主要采用标记清除算法：</p><figure><img src="'+A+'" alt="image-20230306165610810" tabindex="0" loading="lazy"><figcaption>image-20230306165610810</figcaption></figure><p>它的垃圾回收分为 4 个阶段：</p><ul><li>初始标记（需要暂停用户线程）：这个阶段的主要任务仅仅只是标记出 GC Roots 能直接关联到的对象，速度比较快，不用担心会停顿太长时间。</li><li>并发标记：从 GC Roots 的直接关联对象开始遍历整个对象图的过程，这个过程耗时较长但是不需要停顿用户线程，可以与垃圾收集线程一起并发运行。</li><li>重新标记（需要暂停用户线程）：由于并发标记阶段可能某些用户线程会导致标记产生变得，因此这里需要再次暂停所有线程进行并行标记，这个时间会比初始标记时间长一丢丢。</li><li>并发清除：最后就可以直接将所有标记好的无用对象进行删除，因为这些对象程序中也用不到了，所以可以与用户线程并发运行。</li></ul><p>虽然它的优点非常之大，但是缺点也是显而易见的，我们之前说过，标记清除算法会产生大量的内存碎片，导致可用连续空间逐渐变少，长期这样下来，会有更高的概率触发 Full GC，并且在与用户线程并发执行的情况下，也会占用一部分的系统资源，导致用户线程的运行速度一定程度上减慢。</p><p>不过，如果你希望的是最低的 GC 停顿时间，这款垃圾收集器无疑是最佳选择，不过自从 G1 收集器问世之后，CMS 收集器不再推荐使用了。</p><h4 id="garbage-first-g1-收集器" tabindex="-1"><a class="header-anchor" href="#garbage-first-g1-收集器"><span>Garbage First (G1) 收集器</span></a></h4><p>此垃圾收集器也是一款划时代的垃圾收集器，在 JDK7 的时候正式走上历史舞台，它是一款主要面向于服务端的垃圾收集器，并且在 JDK9 时，取代了 JDK8 默认的 Parallel Scavenge + Parallel Old 的回收方案。</p><p>我们知道，我们的垃圾回收分为<code>Minor GC</code>、<code>Major GC</code>和<code>Full GC</code>，它们分别对应的是新生代，老年代和整个堆内存的垃圾回收，而 G1 收集器巧妙地绕过了这些约定，它将整个 Java 堆划分成<code>2048</code>个大小相同的独立<code>Region</code>块，每个<code>Region块</code>的大小根据堆空间的实际大小而定，整体被控制在 1MB 到 32MB 之间，且都为 2 的 N 次幂。所有的<code>Region</code>大小相同，且在 JVM 的整个生命周期内不会发生改变。</p><p>那么分出这些<code>Region</code>有什么意义呢？每一个<code>Region</code>都可以根据需要，自由决定扮演哪个角色（Eden、Survivor 和老年代），收集器会根据对应的角色采用不同的回收策略。此外，G1 收集器还存在一个 Humongous 区域，它专门用于存放大对象（一般认为大小超过了 Region 容量一半的对象为大对象）这样，新生代、老年代在物理上，不再是一个连续的内存区域，而是到处分布的。</p><figure><img src="'+V+'" alt="image-20230306165629129" tabindex="0" loading="lazy"><figcaption>image-20230306165629129</figcaption></figure><p>它的回收过程与 CMS 大体类似：</p><figure><img src="'+R+'" alt="image-20230306165641872" tabindex="0" loading="lazy"><figcaption>image-20230306165641872</figcaption></figure><p>分为以下四个步骤：</p><ul><li>初始标记（暂停用户线程）：仅仅只是标记一下 GC Roots 能直接关联到的对象，并且修改 TAMS 指针的值，让下一阶段用户线程并发运行时，能正确地在可用的 Region 中分配新对象。这个阶段需要停顿线程，但耗时很短，而且是借用进行 Minor GC 的时候同步完成的，所以 G1 收集器在这个阶段实际并没有额外的停顿。</li><li>并发标记：从 GC Root 开始对堆中对象进行可达性分析，递归扫描整个堆里的对象图，找出要回收的对象，这阶段耗时较长，但可与用户程序并发执行。</li><li>最终标记（暂停用户线程）：对用户线程做一个短暂的暂停，用于处理并发标记阶段漏标的那部分对象。</li><li>筛选回收：负责更新 Region 的统计数据，对各个 Region 的回收价值和成本进行排序，根据用户所期望的停顿时间来制定回收计划，可以自由选择任意多个 Region 构成回收集，然后把决定回收的那一部分 Region 的存活对象复制到空的 Region 中，再清理掉整个旧 Region 的全部空间。这里的操作涉及存活对象的移动，是必须暂停用户线程，由多个收集器线程并行完成的。</li></ul><hr><h3 id="元空间" tabindex="-1"><a class="header-anchor" href="#元空间"><span>元空间</span></a></h3><p>JDK8 之前，Hotspot 虚拟机的方法区实际上是永久代实现的。在 JDK8 之后，Hotspot 虚拟机不再使用永久代，而是采用了全新的元空间。类的元信息被存储在元空间中。元空间没有使用堆内存，而是与堆不相连的本地内存区域。所以，理论上系统可以使用的内存有多大，元空间就有多大，所以不会出现永久代存在时的内存溢出问题。这项改造也是有必要的，永久代的调优是很困难的，虽然可以设置永久代的大小，但是很难确定一个合适的大小，因为其中的影响因素很多，比如类数量的多少、常量数量的多少等。</p><figure><img src="'+P+'" alt="image-20230306165703340" tabindex="0" loading="lazy"><figcaption>image-20230306165703340</figcaption></figure><p>因此在 JDK8 时直接将本地内存作为元空间（<strong>Metaspace</strong>）的区域，物理内存有多大，元空间内存就可以有多大，这样永久代的空间分配问题就讲解了，所以最终它变成了这样：</p><figure><img src="'+L+`" alt="image-20230306165714662" tabindex="0" loading="lazy"><figcaption>image-20230306165714662</figcaption></figure><p>到此，我们对于 JVM 内存区域的讲解就基本完成了。</p><hr><h3 id="其他引用类型" tabindex="-1"><a class="header-anchor" href="#其他引用类型"><span>其他引用类型</span></a></h3><p>最后，我们来介绍一下其他引用类型。</p><p>我们知道，在 Java 中，如果变量是一个对象类型的，那么它实际上存放的是对象的引用，但是如果是一个基本类型，那么存放的就是基本类型的值。实际上我们平时代码中类似于<code>Object o = new Object()</code>这样的的引用类型，细分之后可以称为<strong>强引用</strong>。</p><p>我们通过前面的学习可以明确，如果方法中存在这样的<strong>强引用</strong>类型，现在需要回收强引用所指向的对象，那么要么此方法运行结束，要么引用连接断开，否则被引用的对象是无法被判定为可回收的，因为我们说不定后面还要使用它。</p><p>所以，当 JVM 内存空间不足时，JVM 宁愿抛出 OutOfMemoryError 使程序异常终止，也不会靠随意回收具有强引用的“存活”对象来解决内存不足的问题。</p><p>除了强引用之外，Java 也为我们提供了三种额外的引用类型。</p><h4 id="软引用" tabindex="-1"><a class="header-anchor" href="#软引用"><span>软引用</span></a></h4><p>软引用不像强引用那样不可回收，当 JVM 认为内存不足时，会去试图回收软引用指向的对象，即 JVM 会确保在抛出 OutOfMemoryError 之前，清理软引用指向的对象。当然，如果内存充足，那么是不会轻易被回收的。</p><p>我们可以通过以下方式来创建一个软引用：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//强引用写法：Object obj = new Object();</span></span>
<span class="line">        <span class="token comment">//软引用写法：</span></span>
<span class="line">        <span class="token class-name">SoftReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> reference <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SoftReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">//使用get方法就可以获取到软引用所指向的对象了</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>reference<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到软引用还存在一个带队列的构造方法，软引用可以和一个引用队列（ReferenceQueue）联合使用，如果软引用所引用的对象被垃圾回收器回收，Java 虚拟机就会把这个软引用加入到与之关联的引用队列中。</p><p>这里我们来进行一个测试，首先我们需要设定一下参数，来限制最大堆内存为 10M，并且打印 GC 日志：</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token parameter variable">-XX:+PrintGCDetails</span> <span class="token parameter variable">-Xms10M</span> <span class="token parameter variable">-Xmx10M</span></span>
<span class="line"></span></code></pre></div><p>接着运行以下代码：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">ReferenceQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReferenceQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">SoftReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> reference <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SoftReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> queue<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>reference<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">try</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;lbwnb&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;发生了内存溢出！&quot;</span><span class="token operator">+</span>t<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;软引用对象：&quot;</span><span class="token operator">+</span>reference<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果如下：</p><div class="language-wasm line-numbers-mode" data-highlighter="prismjs" data-ext="wasm"><pre><code class="language-wasm"><span class="line">java.lang.ref.SoftReference@232204a1</span>
<span class="line">[GC <span class="token punctuation">(</span>Allocation Failure<span class="token punctuation">)</span> [PSYoungGen: 3943K-&gt;501K<span class="token punctuation">(</span>4608K<span class="token punctuation">)</span>] 3943K-&gt;2362K<span class="token punctuation">(</span>15872K<span class="token punctuation">)</span>, <span class="token number">0.0050615</span> secs] [Times: user=<span class="token number">0.01</span> sys=<span class="token number">0.00</span>, real=<span class="token number">0.01</span> secs]</span>
<span class="line">[GC <span class="token punctuation">(</span>Allocation Failure<span class="token punctuation">)</span> [PSYoungGen: 3714K-&gt;496K<span class="token punctuation">(</span>4608K<span class="token punctuation">)</span>] 5574K-&gt;4829K<span class="token punctuation">(</span>15872K<span class="token punctuation">)</span>, <span class="token number">0.0049642</span> secs] [Times: user=<span class="token number">0.03</span> sys=<span class="token number">0.00</span>, real=<span class="token number">0.01</span> secs]</span>
<span class="line">[GC <span class="token punctuation">(</span>Allocation Failure<span class="token punctuation">)</span> [PSYoungGen: 3318K-&gt;512K<span class="token punctuation">(</span>4608K<span class="token punctuation">)</span>] 7652K-&gt;7711K<span class="token punctuation">(</span>15872K<span class="token punctuation">)</span>, <span class="token number">0.0059440</span> secs] [Times: user=<span class="token number">0.03</span> sys=<span class="token number">0.00</span>, real=<span class="token number">0.00</span> secs]</span>
<span class="line">[GC <span class="token punctuation">(</span>Allocation Failure<span class="token punctuation">)</span> --[PSYoungGen: 4608K-&gt;4608K<span class="token punctuation">(</span>4608K<span class="token punctuation">)</span>] 11807K-&gt;15870K<span class="token punctuation">(</span>15872K<span class="token punctuation">)</span>, <span class="token number">0.0078912</span> secs] [Times: user=<span class="token number">0.05</span> sys=<span class="token number">0.00</span>, real=<span class="token number">0.01</span> secs]</span>
<span class="line">[Full GC <span class="token punctuation">(</span>Ergonomics<span class="token punctuation">)</span> [PSYoungGen: 4608K-&gt;0K<span class="token punctuation">(</span>4608K<span class="token punctuation">)</span>] [ParOldGen: 11262K-&gt;10104K<span class="token punctuation">(</span>11264K<span class="token punctuation">)</span>] 15870K-&gt;10104K<span class="token punctuation">(</span>15872K<span class="token punctuation">)</span>, [Metaspace: 3207K-&gt;3207K<span class="token punctuation">(</span>1056768K<span class="token punctuation">)</span>], <span class="token number">0.0587856</span> secs] [Times: user=<span class="token number">0.24</span> sys=<span class="token number">0.00</span>, real=<span class="token number">0.06</span> secs]</span>
<span class="line">[Full GC <span class="token punctuation">(</span>Ergonomics<span class="token punctuation">)</span> [PSYoungGen: 4096K-&gt;1535K<span class="token punctuation">(</span>4608K<span class="token punctuation">)</span>] [ParOldGen: 10104K-&gt;11242K<span class="token punctuation">(</span>11264K<span class="token punctuation">)</span>] 14200K-&gt;12777K<span class="token punctuation">(</span>15872K<span class="token punctuation">)</span>, [Metaspace: 3207K-&gt;3207K<span class="token punctuation">(</span>1056768K<span class="token punctuation">)</span>], <span class="token number">0.0608198</span> secs] [Times: user=<span class="token number">0.25</span> sys=<span class="token number">0.01</span>, real=<span class="token number">0.06</span> secs]</span>
<span class="line">[Full GC <span class="token punctuation">(</span>Ergonomics<span class="token punctuation">)</span> [PSYoungGen: 3965K-&gt;3896K<span class="token punctuation">(</span>4608K<span class="token punctuation">)</span>] [ParOldGen: 11242K-&gt;11242K<span class="token punctuation">(</span>11264K<span class="token punctuation">)</span>] 15207K-&gt;15138K<span class="token punctuation">(</span>15872K<span class="token punctuation">)</span>, [Metaspace: 3207K-&gt;3207K<span class="token punctuation">(</span>1056768K<span class="token punctuation">)</span>], <span class="token number">0.0972088</span> secs] [Times: user=<span class="token number">0.58</span> sys=<span class="token number">0.00</span>, real=<span class="token number">0.10</span> secs]</span>
<span class="line">[Full GC <span class="token punctuation">(</span>Allocation Failure<span class="token punctuation">)</span> [PSYoungGen: 3896K-&gt;3896K<span class="token punctuation">(</span>4608K<span class="token punctuation">)</span>] [ParOldGen: 11242K-&gt;11225K<span class="token punctuation">(</span>11264K<span class="token punctuation">)</span>] 15138K-&gt;15121K<span class="token punctuation">(</span>15872K<span class="token punctuation">)</span>, [Metaspace: 3207K-&gt;3207K<span class="token punctuation">(</span>1056768K<span class="token punctuation">)</span>], <span class="token number">0.1028222</span> secs] [Times: user=<span class="token number">0.63</span> sys=<span class="token number">0.01</span>, real=<span class="token number">0.10</span> secs]</span>
<span class="line">发生了内存溢出！Java heap space</span>
<span class="line">软引用对象：null</span>
<span class="line">java.lang.ref.SoftReference@232204a1</span>
<span class="line">Heap</span>
<span class="line"> PSYoungGen      total 4608K, used 4048K [<span class="token number">0x00000007bfb00000</span>, <span class="token number">0x00000007c0000000</span>, <span class="token number">0x00000007c0000000</span><span class="token punctuation">)</span></span>
<span class="line">  eden space 4096K, <span class="token number">98</span>% used [<span class="token number">0x00000007bfb00000</span>,<span class="token number">0x00000007bfef40a8</span>,<span class="token number">0x00000007bff00000</span><span class="token punctuation">)</span></span>
<span class="line">  from space 512K, <span class="token number">0</span>% used [<span class="token number">0x00000007bff00000</span>,<span class="token number">0x00000007bff00000</span>,<span class="token number">0x00000007bff80000</span><span class="token punctuation">)</span></span>
<span class="line">  to   space 512K, <span class="token number">0</span>% used [<span class="token number">0x00000007bff80000</span>,<span class="token number">0x00000007bff80000</span>,<span class="token number">0x00000007c0000000</span><span class="token punctuation">)</span></span>
<span class="line"> ParOldGen       total 11264K, used 11225K [<span class="token number">0x00000007bf000000</span>, <span class="token number">0x00000007bfb00000</span>, <span class="token number">0x00000007bfb00000</span><span class="token punctuation">)</span></span>
<span class="line">  object space 11264K, <span class="token number">99</span>% used [<span class="token number">0x00000007bf000000</span>,<span class="token number">0x00000007bfaf64a8</span>,<span class="token number">0x00000007bfb00000</span><span class="token punctuation">)</span></span>
<span class="line"> Metaspace       used 3216K, capacity 4500K, committed 4864K, reserved 1056768K</span>
<span class="line">  class space    used 352K, capacity 388K, committed 512K, reserved 1048576K</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，当内存不足时，软引用所指向的对象被回收了，所以<code>get()</code>方法得到的结果为 null，并且软引用对象本身被丢进了队列中。</p><h4 id="弱引用" tabindex="-1"><a class="header-anchor" href="#弱引用"><span>弱引用</span></a></h4><p>弱引用比软引用的生命周期还要短，在进行垃圾回收时，不管当前内存空间是否充足，都会回收它的内存。</p><p>我们可以像这样创建一个弱引用：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">WeakReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> reference <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>reference<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用方法和软引用是差不多的，但是如果我们在这之前手动进行一次 GC：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">SoftReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> softReference <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SoftReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">WeakReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> weakReference <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//手动GC</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;软引用对象：&quot;</span><span class="token operator">+</span>softReference<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;弱引用对象：&quot;</span><span class="token operator">+</span>weakReference<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，弱引用对象直接就被回收了，而软引用对象没有被回收。同样的，它也支持 ReferenceQueue，和软引用用法一致，这里就不多做介绍了。</p><p><code>WeakHashMap</code>正是一种类似于弱引用的 HashMap 类，如果 Map 中的 Key 没有其他引用那么此 Map 会自动丢弃此键值对。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Integer</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">WeakHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> weakHashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        weakHashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token string">&quot;yyds&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>weakHashMap<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        a <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>weakHashMap<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，当变量 a 的引用断开后，这时只有 WeakHashMap 本身对此对象存在引用，所以在 GC 之后，这个键值对就自动被舍弃了。所以说这玩意，就挺适合拿去做缓存的。</p><h4 id="虚引用-鬼引用" tabindex="-1"><a class="header-anchor" href="#虚引用-鬼引用"><span>虚引用（鬼引用）</span></a></h4><p>虚引用相当于没有引用，随时都有可能会被回收。</p><p>看看它的源码，非常简单：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PhantomReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">Reference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * Returns this reference object&#39;s referent.  Because the referent of a</span>
<span class="line">     * phantom reference is always inaccessible, this method always returns</span>
<span class="line">     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>code</span><span class="token punctuation">&gt;</span></span><span class="token code-section"><span class="token line"><span class="token code language-java"><span class="token keyword">null</span></span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>code</span><span class="token punctuation">&gt;</span></span>.</span>
<span class="line">     *</span>
<span class="line">     * <span class="token keyword">@return</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>code</span><span class="token punctuation">&gt;</span></span><span class="token code-section"><span class="token line"><span class="token code language-java"><span class="token keyword">null</span></span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>code</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * Creates a new phantom reference that refers to the given object and</span>
<span class="line">     * is registered with the given queue.</span>
<span class="line">     *</span>
<span class="line">     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span> It is possible to create a phantom reference with a <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tt</span><span class="token punctuation">&gt;</span></span><span class="token code-section"><span class="token line"><span class="token code language-java"><span class="token keyword">null</span></span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tt</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">     * queue, but such a reference is completely useless: Its <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tt</span><span class="token punctuation">&gt;</span></span><span class="token code-section"><span class="token line"><span class="token code language-java">get</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tt</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">     * method will always return null and, since it does not have a queue, it</span>
<span class="line">     * will never be enqueued.</span>
<span class="line">     *</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token parameter">referent</span> the object the new phantom reference will refer to</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token parameter">q</span> the queue with which the reference is to be registered,</span>
<span class="line">     *          or <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tt</span><span class="token punctuation">&gt;</span></span><span class="token code-section"><span class="token line"><span class="token code language-java"><span class="token keyword">null</span></span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tt</span><span class="token punctuation">&gt;</span></span> if registration is not required</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">PhantomReference</span><span class="token punctuation">(</span><span class="token class-name">T</span> referent<span class="token punctuation">,</span> <span class="token class-name">ReferenceQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> q<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">super</span><span class="token punctuation">(</span>referent<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也就是说我们无论调用多少次<code>get()</code>方法得到的永远都是<code>null</code>，因为虚引用本身就不算是个引用，相当于这个对象不存在任何引用，并且只能使用带队列的构造方法，以便对象被回收时接到通知。</p><p>最后，Java 中 4 种引用的级别由高到低依次为： <strong>强引用 &gt; 软引用 &gt; 弱引用 &gt; 虚引用</strong></p>`,270)]))}const B=s(I,[["render",F]]),Y=JSON.parse('{"path":"/codenotes/java/jvm/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86.html","title":"Java JVM 虚拟机 - JVM内存管理","lang":"zh-CN","frontmatter":{"title":"Java JVM 虚拟机 - JVM内存管理","icon":"JVM","category":["Java","JVM"],"tag":["JVM"],"sticky":false,"star":false,"article":false,"order":2,"timeline":false,"description":"在之前，我们了解了 JVM 的大致运作原理以及相关特性，这一章，我们首先会从内存管理说起。 在传统的 C/C++开发中，我们经常通过使用申请内存的方式来创建对象或是存放某些数据，但是这样也带来了一些额外的问题，我们要在何时释放这些内存，怎么才能使得内存的使用最高效，因此，内存管理是一个非常严肃的问题。 比如我们就可以通过 C 语言动态申请内存，并用于存...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"Java JVM 虚拟机 - JVM内存管理\\",\\"description\\":\\"在之前，我们了解了 JVM 的大致运作原理以及相关特性，这一章，我们首先会从内存管理说起。 在传统的 C/C++开发中，我们经常通过使用申请内存的方式来创建对象或是存放某些数据，但是这样也带来了一些额外的问题，我们要在何时释放这些内存，怎么才能使得内存的使用最高效，因此，内存管理是一个非常严肃的问题。 比如我们就可以通过 C 语言动态申请内存，并用于存...\\"}"],["meta",{"property":"og:url","content":"https://www.stazxr.cn/my-notes/my-notes/codenotes/java/jvm/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86.html"}],["meta",{"property":"og:site_name","content":"終わり群星の知识宝库"}],["meta",{"property":"og:title","content":"Java JVM 虚拟机 - JVM内存管理"}],["meta",{"property":"og:description","content":"在之前，我们了解了 JVM 的大致运作原理以及相关特性，这一章，我们首先会从内存管理说起。 在传统的 C/C++开发中，我们经常通过使用申请内存的方式来创建对象或是存放某些数据，但是这样也带来了一些额外的问题，我们要在何时释放这些内存，怎么才能使得内存的使用最高效，因此，内存管理是一个非常严肃的问题。 比如我们就可以通过 C 语言动态申请内存，并用于存..."}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-06T16:19:30.000Z"}],["meta",{"property":"article:tag","content":"JVM"}],["meta",{"property":"article:modified_time","content":"2025-06-06T16:19:30.000Z"}]]},"git":{"createdTime":1749218848000,"updatedTime":1749226770000,"contributors":[{"name":"talentestors","username":"talentestors","email":"talentestors@gmail.com","commits":2,"url":"https://github.com/talentestors"}]},"readingTime":{"minutes":45.22,"words":13567},"filePathRelative":"codenotes/java/jvm/内存管理.md","autoDesc":true}');export{B as comp,Y as data};
