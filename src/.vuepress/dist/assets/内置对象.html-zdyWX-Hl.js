import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{ah as r,ap as e,ai as a}from"./app-CAqLFJSb.js";const o={};function n(s,t){return a(),r("div",null,t[0]||(t[0]=[e('<h2 id="一、array-对象" tabindex="-1"><a class="header-anchor" href="#一、array-对象"><span>一、Array 对象</span></a></h2><p><strong>方法</strong></p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>concat ()</td><td>表示把几个数组合并成一个数组</td></tr><tr><td>join ()</td><td>设置分隔符连接数组元素为一个字符串</td></tr><tr><td>pop ()</td><td>除数组最后一个元素</td></tr><tr><td>shift 0</td><td>移除数组中第一个元素</td></tr><tr><td>slice (start, end)</td><td>返回数组中的一段</td></tr><tr><td>splice ()</td><td>可以用来删除，可以用来插入，也可以用来替换</td></tr><tr><td>push ()</td><td>往数组中新添加一个元素，返回最新长度</td></tr><tr><td>sort ()</td><td>对数组进行排序</td></tr><tr><td>reverse ()</td><td>反转数组的顺序</td></tr><tr><td>toLocaleString()</td><td>把数组转换为本地字符串</td></tr></tbody></table><p><strong>属性</strong></p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>length</td><td>表示取得当前数组长度 (常用)</td></tr><tr><td>constructor</td><td>引用数组对象的构造函数</td></tr><tr><td>prototype</td><td>通过增加属性和方法扩展数组定义</td></tr></tbody></table><h2 id="二、global-对象" tabindex="-1"><a class="header-anchor" href="#二、global-对象"><span>二、Global 对象</span></a></h2><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>escape ()</td><td>对字符串编码</td></tr><tr><td>eval ()</td><td>把字符串解析为 JavaScript 代码并执行</td></tr><tr><td>isNaNO</td><td>判断一个值是否是 NaN</td></tr><tr><td>parselnt ()</td><td>解析—个字符串并返回—个整数</td></tr><tr><td>parseFloat ()</td><td>解析一个字符串并返回一个浮点数</td></tr><tr><td>number ()</td><td>把对象的值转换为数字</td></tr><tr><td>string ()</td><td>把对象的值转换为字符串</td></tr></tbody></table><h2 id="三、string-对象" tabindex="-1"><a class="header-anchor" href="#三、string-对象"><span>三、String 对象</span></a></h2><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>charAt()</td><td>返回指定索引的位置的字符</td></tr><tr><td>indexOfo()</td><td>从前向后检索字符串，看是否含有指定字符串</td></tr><tr><td>lastindexof()</td><td>从后向前检索字符串，看是否含有指定字符串</td></tr><tr><td>concat()</td><td>连接两个或多个字符串</td></tr><tr><td>match()</td><td>使用正则表达式模式对字符串执行查找，并将包含查找结果最为结果返回</td></tr><tr><td>replace()</td><td>替换一个与正则表达式匹配的子串</td></tr><tr><td>search()</td><td>检索字符串中与正则表达式匹配的子串。如果没有找到匹配，则返回-1。</td></tr><tr><td>slice (start, end)</td><td>根据下表截取子串</td></tr><tr><td>substring (start, end)</td><td>根据下表截取子串</td></tr><tr><td>split()</td><td>根据指定分隔符将字符串分割成多个子串，并返回素组</td></tr><tr><td>substr(start, length)</td><td>根据长度截取字符串*</td></tr><tr><td>toUpperCase()</td><td>返回一个字符串，该字符串中的所有字母都被转化为大写字母。</td></tr><tr><td>toLowerCase()</td><td>返回一个字符串，该字符串中的所有字母都被转化为小写字母。</td></tr></tbody></table><h2 id="四、math-对象" tabindex="-1"><a class="header-anchor" href="#四、math-对象"><span>四、Math 对象</span></a></h2><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>ceil()</td><td>向上取整。</td></tr><tr><td>floor()</td><td>向下取整。</td></tr><tr><td>round()</td><td>四舍五入。</td></tr><tr><td>random()</td><td>取随机数。</td></tr></tbody></table><h2 id="五、date-对象" tabindex="-1"><a class="header-anchor" href="#五、date-对象"><span>五、Date 对象</span></a></h2><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>getDate 函数:</td><td>返回日期的&quot;日&quot;部分，值为 1 ～ 31。</td></tr><tr><td>getDay 函数:</td><td>返回星期，值为 0 ～ 6，0 表示星期日。</td></tr><tr><td>getHours 函数:</td><td>返回日期的&quot;小时&quot;/部分，值为 0 ～ 23。</td></tr><tr><td>getMinutes 函数:</td><td>返回日期的&quot;分钟&quot;部分，值为 0 ～ 59。</td></tr><tr><td>getMonth 函数:</td><td>返回日期的&quot;月&quot;部分，值为 0 ～ 11。</td></tr><tr><td>getSeconds 函数:</td><td>返回日期的&quot;秒&quot;部分，值为 0 ～ 59。</td></tr><tr><td>getTime 函数:</td><td>返回系统时间。</td></tr><tr><td>getTimezoneOffset 函数:</td><td>返回此地区的时差(当地时间与 GMT 格林威治标准时间的地区时差)，单位为分钟。</td></tr><tr><td>getYear 函数:</td><td>返回日期的&quot;年&quot;部分。返回值以 1900 年为基数，如 1999 年为 99。</td></tr><tr><td>parse 函数:</td><td>返回从 1970 年 1 月 1 日零时整算起的毫秒数(当地时间)</td></tr><tr><td>setDate 函数:</td><td>设定日期的&quot;日&quot;部分，值为 0 ～ 31。</td></tr><tr><td>setHours 函数:</td><td>设定日期的&quot;小时&quot;部分，值为 0 ～ 23。</td></tr><tr><td>setMinutes 函数:</td><td>设定日期的&quot;分钟&quot;部分，值为 0 ～ 59。</td></tr><tr><td>setMonth 函数:</td><td>设定日期的&quot;月&quot;部分，值为 0 ～ 11。其中 0 表示 1 月，，11 表示 12 月。</td></tr><tr><td>setSeconds 函数:</td><td>设定日期的&quot;秒&quot;部分，值为 0 ～ 59。</td></tr><tr><td>setTime 函数:</td><td>设定时间。时间数值为 1970 年 1 月 1 日零时整算起的毫秒数。</td></tr><tr><td>setYear 函数:</td><td>设定日期的&quot;年&quot;部分。</td></tr><tr><td>toGMTString 函数:</td><td>转换日期成为字符串，为 GMT 格林威治标准时间。</td></tr><tr><td>setLocaleString 函数:</td><td>转换日期成为字符串，为当地时间。</td></tr><tr><td>UTC 函数:</td><td>返回从 1970 年 1 月 1 日零时整算起的毫秒数(GMT)。</td></tr></tbody></table><h2 id="六、复杂类型" tabindex="-1"><a class="header-anchor" href="#六、复杂类型"><span>六、复杂类型</span></a></h2><h3 id="_1-简单类型与复杂类型" tabindex="-1"><a class="header-anchor" href="#_1-简单类型与复杂类型"><span>1. 简单类型与复杂类型</span></a></h3><p>简单类型又叫做基本数据类型或者值类型，复杂类型又叫做引用类型。</p><ul><li>值类型：简单数据/基本数据类型，在存储时变量中存的是值本身，因此叫做值类型。例如 <code>string</code>, <code>number</code>, <code>boolean</code>, <code>undefined</code>, <code>null</code></li><li>引用类型：复杂数据类型，在存储时变量中存储的仅仅是地址（引用），因此叫做引用数据类型。通过 <code>new</code> 关键字创建的对象（系统对象、自定义对象），如 <code>Object</code>、<code>Date</code> 等。</li></ul><h3 id="_2-堆和栈" tabindex="-1"><a class="header-anchor" href="#_2-堆和栈"><span>2. 堆和栈</span></a></h3><p>堆栈空间分配区别︰</p><ol><li><p>栈（操作系统）：由操作系统自动分配释放存放函数的参数值、局部变量的值等。其操作方式类似于数据结构中的栈； <mark>简单数据类型存放到栈里面</mark></p></li><li><p>堆（操作系统）︰存储复杂类型(对象)，一般由程序员分配释放，若程序员不释放，由垃圾回收机制回收。 <mark>复杂数据类型存放到堆里面</mark></p></li></ol><figure><img src="https://cdn.jsdelivr.net/gh/hacker-c/Picture-Bed@main/js1.png" alt="avatar" tabindex="0" loading="lazy"><figcaption>avatar</figcaption></figure><ul><li>简单数据类型 <code>null</code> 返回的是一个空对象：<code>Object</code>。若有一个变量打算存储为对象但是没想好放什么，就可以给 <code>null</code> 值。</li><li>简单数据类型是存放在栈里面，直接开辟空间存放值。</li><li>复杂数据类型，首先在栈里面存放地址（十六进制），然后在堆里面存放值。</li></ul><h3 id="_3-简单数据类型传参" tabindex="-1"><a class="header-anchor" href="#_3-简单数据类型传参"><span>3. 简单数据类型传参</span></a></h3><p>函数的形参也可以看做是一个变量，当我们把一个值类型变量作为参数传给函数的形参时，其实是把变量在栈空间里的值复制了一份给形参，那么在方法内部对形参做任何修改，都不会影响到的外部变量。</p><h3 id="_4-复杂数据类型传参" tabindex="-1"><a class="header-anchor" href="#_4-复杂数据类型传参"><span>4. 复杂数据类型传参</span></a></h3><p>函数的形参也可以看做是一个变量，当我们把引用类型变量传给形参时，其实是把变量在栈空间里保存的堆地址复制给了形参，形参和实参其实保存的是同一个堆地址，所以操作的是同一个对象。</p>',26)]))}const h=d(o,[["render",n]]),l=JSON.parse('{"path":"/codenotes/web/javascript/%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1.html","title":"第二章 内置对象","lang":"zh-CN","frontmatter":{"title":"第二章 内置对象","icon":"javascript","category":["前端","JavaScript"],"tag":["JavaScript","web"],"sticky":false,"star":false,"article":false,"timeline":false,"description":"一、Array 对象 方法 属性 二、Global 对象 三、String 对象 四、Math 对象 五、Date 对象 六、复杂类型 1. 简单类型与复杂类型 简单类型又叫做基本数据类型或者值类型，复杂类型又叫做引用类型。 值类型：简单数据/基本数据类型，在存储时变量中存的是值本身，因此叫做值类型。例如 string, number, boolean...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"第二章 内置对象\\",\\"description\\":\\"一、Array 对象 方法 属性 二、Global 对象 三、String 对象 四、Math 对象 五、Date 对象 六、复杂类型 1. 简单类型与复杂类型 简单类型又叫做基本数据类型或者值类型，复杂类型又叫做引用类型。 值类型：简单数据/基本数据类型，在存储时变量中存的是值本身，因此叫做值类型。例如 string, number, boolean...\\"}"],["meta",{"property":"og:url","content":"https://www.stazxr.cn/my-notes/my-notes/codenotes/web/javascript/%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1.html"}],["meta",{"property":"og:site_name","content":"終わり群星の知识宝库"}],["meta",{"property":"og:title","content":"第二章 内置对象"}],["meta",{"property":"og:description","content":"一、Array 对象 方法 属性 二、Global 对象 三、String 对象 四、Math 对象 五、Date 对象 六、复杂类型 1. 简单类型与复杂类型 简单类型又叫做基本数据类型或者值类型，复杂类型又叫做引用类型。 值类型：简单数据/基本数据类型，在存储时变量中存的是值本身，因此叫做值类型。例如 string, number, boolean..."}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:image","content":"https://cdn.jsdelivr.net/gh/hacker-c/Picture-Bed@main/js1.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-26T05:21:52.000Z"}],["meta",{"property":"article:tag","content":"web"}],["meta",{"property":"article:tag","content":"JavaScript"}],["meta",{"property":"article:modified_time","content":"2025-05-26T05:21:52.000Z"}]]},"git":{"createdTime":1725555447000,"updatedTime":1748236912000,"contributors":[{"name":"talentestors","username":"talentestors","email":"talentestors@gmail.com","commits":2,"url":"https://github.com/talentestors"}]},"readingTime":{"minutes":5.36,"words":1608},"filePathRelative":"codenotes/web/javascript/内置对象.md","autoDesc":true}');export{h as comp,l as data};
