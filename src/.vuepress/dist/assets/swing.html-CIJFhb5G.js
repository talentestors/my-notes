import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{ah as p,ap as t,ai as e}from"./app-CAqLFJSb.js";const s="/my-notes/assets/fMQDFCmyqIvJeTl-CcZxsqpI.jpg",c="/my-notes/assets/ZSQs1NhWlJeyMmi-DMHcVW8a.jpg",o="/my-notes/assets/CknumyFjpz659Ya-CnjHauJ5.jpg",l="/my-notes/assets/drC1nx2NSK9Ewaf-CHotUqhX.jpg",i="/my-notes/assets/DAz1hnUekV6RNqd-DDCMranX.jpg",u="/my-notes/assets/IiwomHF7YWe8Vuh-DlI8TXuy.jpg",k="/my-notes/assets/VQm7FjSNidLhI1r-B6okxanb.jpg",r="/my-notes/assets/D6hslN2pHybmVdF-Byf_L6IM.jpg",d="/my-notes/assets/VjCdNbAUIi5R61Z-DU_-Jrzw.jpg",m="/my-notes/assets/Fsj8PqHryUYdgeC-CdUbRN5i.jpg",v="/my-notes/assets/zy4L2T67rGQe3HI-oslnrcsl.jpg",g="/my-notes/assets/R5cDrYxoKtpCJk6-YO6lqldU.jpg",b="/my-notes/assets/gArLdNTI1ClWh5K-BJTBhKCQ.jpg",f="/my-notes/assets/ZhpojvR6u5DTmVP-gvaOHG8B.jpg",y="/my-notes/assets/7re3aBis2jW9wvP-t0gqOnVw.jpg",w="/my-notes/assets/Erb6npLZqsCPGzQ-BFV-rOEi.jpg",h="/my-notes/assets/Er4wqYUNfAy2HBS-5CE6Qtey.jpg",j="/my-notes/assets/pErwuKAGOa3dQ5l-EFRadjR0.jpg",x="/my-notes/assets/y8713x9VBlCaQm6-MLVpty8X.jpg",q="/my-notes/assets/image-20231202204043508-JK6xnW3C.png",_="/my-notes/assets/image-20231202204055139-D84LZI4t.png",C="/my-notes/assets/ro7Cxi5Oe8wuALv-BNakSNn7.jpg",S="/my-notes/assets/ZigtAkDbrMVqjWz-CC1HyGih.jpg",L="/my-notes/assets/XQqnd6GHa7hVOtR-C4VyHdNf.jpg",B="/my-notes/assets/471ED3GaefjzHy8-BibT1GcP.jpg",T="/my-notes/assets/hJrBtcVj7MDGqfw-CEXJ2AAf.jpg",J="/my-notes/assets/QlU8IPoVA2j4E6t-vekwS6jF.jpg",z="/my-notes/assets/vVN4O8XynAdW5Jb-Blg-j9i-.jpg",I="/my-notes/assets/CqE9FkVSMJXOLY8-CBgZUcn8.jpg",A="/my-notes/assets/joR1s467rFzJqOE-CnsanH8S.jpg",F="/my-notes/assets/DtnRaCJh7qzc4w3-C5k1nzXo.jpg",O="/my-notes/assets/JNmjEVWIG2nkxbf-B5PowGFM.jpg",M="/my-notes/assets/9ZfvOxThctdPS6N-CZ8su8RO.jpg",W="/my-notes/assets/jVGTNmd3i2ZRg5h-DWnSpg9N.jpg",E="/my-notes/assets/6PGem8qMrV7NOZS-0MMeA5cx.jpg",P="/my-notes/assets/agMjZkqrSGUm9Ld-BFR0zXgD.jpg",G="/my-notes/assets/RbiFpTDCEaN5fPl-C_4haDn2.jpg",D="/my-notes/assets/7mKakMLhz95VbIp-BcnmB7jo.jpg",N="/my-notes/assets/ZDa92CJVf7TbGk4-DuXIyry2.jpg",V="/my-notes/assets/SQZapDy6vdLkHNx-DMqNpPxz.jpg",R="/my-notes/assets/ieDtpQqdkBzhsKF-DaRJdqVG.jpg",H="/my-notes/assets/LXIvYhnFVBlQTGt-CscnHSrx.jpg",U="/my-notes/assets/Konar26QHWMTwqd-DcxEgJzE.jpg",X="/my-notes/assets/G3NiRaBMkJLneVl-BeySZTj5.jpg",Z="/my-notes/assets/hc354p1ri6NmGgA-CMeULKpu.jpg",K="/my-notes/assets/wIWdRo2velTj1VS-CXhHDoCZ.jpg",Q="/my-notes/assets/7Dq6L1hbreYIy39-CMcfTJCE.jpg",Y="/my-notes/assets/KskDE9J2QdRtlvV-BpxeHCI4.jpg",$="/my-notes/assets/lwrjgRxu46UXHZk-Vo_mk5zF.jpg",nn="/my-notes/assets/Q1RgUn7ejZXzH5E-QQvl3ZYw.jpg",sn="/my-notes/assets/IKe1NL5wm834WdP-DGX4cFiN.jpg",an="/my-notes/assets/tMRbdjE6ZhHuPaQ-MFjNGZnM.jpg",pn="/my-notes/assets/VUshJzZXxC51gpb-BrOrPuVd.jpg",tn="/my-notes/assets/VmajcUlSD6GPsrv-BEgmFjuH.jpg",en="/my-notes/assets/3v7ZJio9mMnK8zk-Dvy9RfZ5.jpg",cn="/my-notes/assets/TuHNLsmokZvMhIR-CQk3PE9V.jpg",on="/my-notes/assets/uRjWKPgFxCcGUvr-CW-ImAmC.jpg",ln="/my-notes/assets/qQweM6DprRJjCl7-CLT2ioTC.jpg",un="/my-notes/assets/xBsuijLa6beOwJy-9wozPY8X.jpg",kn="/my-notes/assets/5adDsGr2iRxywCX-Bsmk0ufT.jpg",rn="/my-notes/assets/u9jSlmAc2GXr4VJ-DJFkogZy.jpg",dn="/my-notes/assets/areQf2g3I74mlpV-zChQ5jE-.jpg",mn="/my-notes/assets/hQ2YLjSgazM9Wkd-MOGNYSS9.jpg",vn="/my-notes/assets/dy6R2VNuOYIJamA-Baz5CrUq.jpg",gn="/my-notes/assets/RMJWl576CiSDs8b-wif899e7.jpg",bn="/my-notes/assets/aMGHTu8sl2Sg4vm-efQ1mbAx.jpg",fn="/my-notes/assets/SY8wjEkdcArvxnQ-J9QAWPkQ.jpg",yn="/my-notes/assets/qNoT6OwylH4Y8xc-C7BjwN1q.jpg",wn="/my-notes/assets/1fBdjMOy4SnADHu-CT3S1fvF.jpg",hn="/my-notes/assets/JXpw64yHb8rCRSg-C3PVjY3Y.jpg",jn="/my-notes/assets/zsjxuSoYEr9lvZy-B9Mr4uiV.jpg",xn="/my-notes/assets/T6Vld1NMB9AJfct-rh4eKMJY.jpg",qn="/my-notes/assets/mGaU6X2ILvqQT1g-CfmwM0Qm.jpg",_n="/my-notes/assets/izpvcCbVA3Ut81u-COf6PvVc.jpg",Cn="/my-notes/assets/gcCnLterFaqPvkK-Dv8xexbc.jpg",Sn="/my-notes/assets/IvjYykGRXiOAMtK-DjPM5wvS.jpg",Ln="/my-notes/assets/YN4gKJbfstpRSCE-DZ9EfC1i.jpg",Bn="/my-notes/assets/keDg2pnsJolaUZH-CObt3iin.jpg",Tn="/my-notes/assets/4jp1N9LnmwJGtOl-CsMXWJoS.jpg",Jn="/my-notes/assets/QBPn8lk9tFd6sgH-CYG1kCFd.jpg",zn="/my-notes/assets/2gMxOrFGkHCJ73o-Cj0LcQ8L.jpg",In="/my-notes/assets/21l4GHg75fCaFzP-D6ZxAqgj.jpg",An="/my-notes/assets/3VjoCckOZG2qNIf-ekwmdgBd.jpg",Fn="/my-notes/assets/rwik4EqaOeMYWfz-CAGFm8PC.jpg",On="/my-notes/assets/ekOZLQnUR2dMXTN-T3x-pH6P.jpg",Mn="/my-notes/assets/YH8dgDRunsG9jPv-DRIAyZuS.jpg",Wn="/my-notes/assets/ZwGfv1HqOjikEPn-DmJo5TUM.jpg",En="/my-notes/assets/L7HyUlVpA5P9iTZ-ZHCDAnhk.jpg",Pn="/my-notes/assets/EGrWzIZuRfejXN2-e4ygo95R.jpg",Gn="/my-notes/assets/BOtWrIe7CuklMcZ-BIBnB8AA.jpg",Dn="/my-notes/assets/2NChELXRkoqJGMQ-BnW4dGwV.jpg",Nn="/my-notes/assets/53kHx2zTZ7wtUfC-rvQWXh10.jpg",Vn={};function Rn(Hn,n){return e(),p("div",null,n[0]||(n[0]=[t('<div class="hint-container tip"><p class="hint-container-title">提示</p><p>课程视频教程链接：<a href="https://www.bilibili.com/video/BV1G84y1v7Vj" target="_blank" rel="noopener noreferrer">https://www.bilibili.com/video/BV1G84y1v7Vj</a></p></div><p>注意：开始学习之前请确保你完成了《Java SE》篇视频教程。</p><p>前面我们已经完成了 JavaSE 部分的全部内容学习，只不过我们在初学阶段一直都是开发的控制台程序，也就是最原始的命令窗口形式的程序，而 Java 也可以开发桌面图形化程序，所以我们接着来学习一下 Java 的图形化界面的开发。</p><h2 id="awt-组件介绍" tabindex="-1"><a class="header-anchor" href="#awt-组件介绍"><span>AWT 组件介绍</span></a></h2><p>在 Java 正式推出的时候，它还包含一个用于基本 GUI 程序设计的类库，名字叫 Abstract Window Toolkit，简称 AWT，抽象窗口工具包，我们可以直接使用 Java 为我们提供的工具包来进行桌面应用程序的开发。只不过这套工具包依附于操作系统提供的 UI，具体样式会根据不同操作系统提供的界面元素进行展示。</p><p>实际上我们现代操作系统都是图形化界面，应用程序都是以一个窗口的形式展示出来的，我们可以直接使用鼠标点击窗口内的元素来使用应用程序，相比传统的命令行形式，可方便太多了，比如在 Windows 和 MacOS 这两种操作系统下：</p><figure><img src="'+s+`" alt="image-20221026164200924" tabindex="0" loading="lazy"><figcaption>image-20221026164200924</figcaption></figure><p>可以看到，不同的操作系统的窗口样式稍微有一些不一样，但是大致的使用方式是差不多的，我们接着来看一下如何使用 Java 编写简单的桌面图形化程序。</p><h3 id="基本框架" tabindex="-1"><a class="header-anchor" href="#基本框架"><span>基本框架</span></a></h3><p>既然我们要编写一个桌面程序，那么肯定是需要窗口来展示我们程序的内容的，所以说，我们可以使用 AWT 为我们提供的组件来创建窗口：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Frame</span> frame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Frame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//Frame是窗体，我们只需要创建这样一个对象就可以了，这样就会直接创建一个新的窗口</span></span>
<span class="line">    frame<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//可以使用setSize方法设定窗体大小</span></span>
<span class="line">    frame<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//默认情况下窗体是不可见的，我们如果要展示出来，还需要设置窗体可见性</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，桌面的左上角已经展示出我们的窗口了：</p><figure><img src="`+c+`" alt="image-20221026165600076" tabindex="0" loading="lazy"><figcaption>image-20221026165600076</figcaption></figure><p>在不同的操作系统下，窗口的样式会不同。</p><p>我们可以通过 Frame 的各种方法来设置窗口的各项属性：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Frame</span> frame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Frame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    frame<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">&quot;原神&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//设置窗口标题</span></span>
<span class="line">    frame<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//设置窗口大小</span></span>
<span class="line">    frame<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span><span class="token constant">BLACK</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//设置窗口背景颜色</span></span>
<span class="line">    frame<span class="token punctuation">.</span><span class="token function">setResizable</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//设置窗口大小是否固定</span></span>
<span class="line">    frame<span class="token punctuation">.</span><span class="token function">setAlwaysOnTop</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//设置窗口是否始终展示在最前面</span></span>
<span class="line">    <span class="token comment">// frame.setLocation(300, 100);    //设置窗口出现的位置</span></span>
<span class="line">    frame<span class="token punctuation">.</span><span class="token function">setLocationRelativeTo</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//设置窗口居中</span></span>
<span class="line">    frame<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//注意，只有将可见性变为true时才会展示出这个窗口，否则窗口是隐藏的</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实际上当我们创建一个窗口之后，会在其他线程中进行处理，包括窗口的绘制、窗口事件的监听等，所以说我们的主线程不会卡住。</p><p>实际上我们的程序打开都是默认居中显示的，所以说我们可以调整一下窗口的位置：</p><div class="language-java" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line">frame<span class="token punctuation">.</span><span class="token function">setLocation</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//setLocation可以调整窗口位置</span></span>
<span class="line"></span></code></pre></div><p>注意，这里的窗口位置以及窗口大小都是以像素为单位。整个屏幕有多少个像素，是根据各位小伙伴电脑的显示器屏幕分辨率来决定的，比如我们的电脑显示器屏幕分辨率为 1920 x 1080，那么我们显示器就可以显示长为 1920 个像素，宽 1080 个像素的矩形，只要是在这个范围内的窗口，都可以显示到屏幕上：</p><figure><img src="`+o+`" alt="image-20221026170449235" tabindex="0" loading="lazy"><figcaption>image-20221026170449235</figcaption></figure><p>那么问题就来了，如果现在我们希望将这个窗口居中，就需要手动调整位置，但我们是要去适配各种分辨率的显示器才可以，不然到其他分辨率下，就无法居中了，我们可以动态获取分辨率来进行位置计算：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Frame</span> frame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Frame</span><span class="token punctuation">(</span><span class="token string">&quot;我是标题&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    frame<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">Dimension</span> screenSize <span class="token operator">=</span> <span class="token class-name">Toolkit</span><span class="token punctuation">.</span><span class="token function">getDefaultToolkit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getScreenSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//获取到屏幕尺寸</span></span>
<span class="line">    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>screenSize<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> frame<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//居中位置就是：屏幕尺寸/2 - 窗口尺寸/2</span></span>
<span class="line">    <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>screenSize<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> frame<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    frame<span class="token punctuation">.</span><span class="token function">setLocation</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//位置设置好了之后再展示出来</span></span>
<span class="line">    frame<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样我们的窗口打开之后默认就是居中放置的了，是不是感觉用 Java 开发图形界面好像也不是那么难？</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>让窗口居中的方法：</p><p><code>frame.setLocationRelativeTo(null); //设置窗口居中</code></p></div><p>得益于 Java 已经为我们封装好了各种方法，所以说要实现什么功能直接调用对应的方法即可，比如我们想要个性化光标，我们可以使用<code>setCursor</code>方法来实现，JDK 已经为我们提供了一些预设的光标样式：</p><figure><img src="`+l+'" alt="image-20221027151713661" tabindex="0" loading="lazy"><figcaption>image-20221027151713661</figcaption></figure><p>设定光标样式后，当我们的鼠标移动到这个窗口内部时，就会变成我们设定好的光标样式了。</p><p>有关其他方法，这里暂时不进行介绍。</p><h3 id="监听器" tabindex="-1"><a class="header-anchor" href="#监听器"><span>监听器</span></a></h3><p>我们可以为窗口添加一系列的监听器，监听器会监听窗口中发生的一些事件，比如我们点击关闭窗口、移动鼠标、鼠标点击等，当发生对应的事件时，就会通知到对应的监听器进行处理，从而我们能够在发生对应事件时进行对应处理。</p><figure><img src="'+i+'" alt="image-20221027161611050" tabindex="0" loading="lazy"><figcaption>image-20221027161611050</figcaption></figure><p>比如我们现在希望点击关闭按钮关闭当前的窗口，但是我们发现默认情况下实际上是关不掉的，因为我们并没有对关闭事件进行处理，默认情况下对于这种点击时没有设定任何动作的，万一我们点了之后并不是要关闭窗口呢。要实现关闭窗口，我们可以使用<code>addXXXListener</code>来添加对应的事件监听器，比如窗口相关的操作那么就是 WindowListener：</p><figure><img src="'+u+`" alt="image-20221027155830335" tabindex="0" loading="lazy"><figcaption>image-20221027155830335</figcaption></figure><p>这里我们可以给一个接口实现，或是使用对应的适配器（适配器模式是设计模式中的一种写法，因为接口中要实现的方法太多，但是实际上我们并不需要实现那么多，只需要实现对应的即可，所以说就可以使用适配器）我们只需要重写对应的方法，当发生对应事件时就会自动调用我们已经实现好的方法：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line">frame<span class="token punctuation">.</span><span class="token function">addWindowListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WindowAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">windowClosing</span><span class="token punctuation">(</span><span class="token class-name">WindowEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment">//windowClosing方法对应的就是窗口关闭事件</span></span>
<span class="line">        frame<span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//当我们点击X号关闭窗口时，就会自动执行此方法了</span></span>
<span class="line">        <span class="token comment">//使用dispose方法来关闭当前窗口</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">windowClosed</span><span class="token punctuation">(</span><span class="token class-name">WindowEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment">//对应窗口已关闭事件</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;窗口已关闭！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//当窗口成功关闭后，会执行这里重写的内容</span></span>
<span class="line">       <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//窗口关闭后退出当前Java程序</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以来看看效果，现在我们点击 X 号关闭窗口就可以成功执行了，并且窗口关闭后我们的 Java 程序就结束了。当然，监听器可以添加多个，并不是只能有一个。</p><p>这里总结一下窗口常用的事件：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">WindowListener</span> <span class="token keyword">extends</span> <span class="token class-name">EventListener</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">windowOpened</span><span class="token punctuation">(</span><span class="token class-name">WindowEvent</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//当窗口的可见性首次变成true时会被调用</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">windowClosing</span><span class="token punctuation">(</span><span class="token class-name">WindowEvent</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//当以后企图关闭窗口（也就是点击X号）时被调用</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">windowClosed</span><span class="token punctuation">(</span><span class="token class-name">WindowEvent</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//窗口被我们成功关闭之后被调用</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">windowIconified</span><span class="token punctuation">(</span><span class="token class-name">WindowEvent</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//窗口最小化时被调用</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">windowDeiconified</span><span class="token punctuation">(</span><span class="token class-name">WindowEvent</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//窗口从最小化状态变成普通状态时调用</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">windowActivated</span><span class="token punctuation">(</span><span class="token class-name">WindowEvent</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//当窗口变成活跃状态时被调用</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">windowDeactivated</span><span class="token punctuation">(</span><span class="token class-name">WindowEvent</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//当窗口变成不活跃时被调用</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了监听窗口相关的动作之外，我们也可以监听鼠标、键盘等操作的事件，比如键盘事件：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line">frame<span class="token punctuation">.</span><span class="token function">addKeyListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">KeyAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">keyTyped</span><span class="token punctuation">(</span><span class="token class-name">KeyEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//监听键盘输入事件，当我们在窗口中敲击键盘输入时会触发</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getKeyChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//可以通过KeyEvent对象来获取当前事件输入的对应字符</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>键盘事件甚至可以细致到键盘按键的几种状态：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">KeyListener</span> <span class="token keyword">extends</span> <span class="token class-name">EventListener</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">keyTyped</span><span class="token punctuation">(</span><span class="token class-name">KeyEvent</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//当一个按键按下之后触发（感觉跟下面这个没啥区别）</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">keyPressed</span><span class="token punctuation">(</span><span class="token class-name">KeyEvent</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//当一个按键按下后触发（按下之后如果不松开会连续触发此事件）</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">keyReleased</span><span class="token punctuation">(</span><span class="token class-name">KeyEvent</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//当一个按键按下然后松开后触发</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们也可以监听鼠标相关的事件，比如当鼠标点击我们界面上某一个位置时，我们就可以获取一下：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line">frame<span class="token punctuation">.</span><span class="token function">addMouseListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MouseAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mouseClicked</span><span class="token punctuation">(</span><span class="token class-name">MouseEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment">//mouseClicked是监听鼠标点击事件（必须要用真的鼠标点击，不知道为啥，笔记本的触摸板不行，可能是MacOS的BUG吧）</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;鼠标点击：&quot;</span><span class="token operator">+</span>e<span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;,&quot;</span><span class="token operator">+</span>e<span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，当我们点击窗口中的某个位置时，就可以获取对应的坐标并打印出来：</p><figure><img src="`+k+`" alt="image-20221027164500070" tabindex="0" loading="lazy"><figcaption>image-20221027164500070</figcaption></figure><p>注意这里的坐标并不是按照我们在数学中学习的平面直角坐标系来的，它的 X 轴是从左往右，但是 Y 轴是从上往下，原点也不是整个屏幕开始，而是我们的窗口左上角。所以说当我们点击右下角时，就会得到一个接近于窗口大小的坐标了。</p><p>我们也可以获取鼠标是使用哪个键点击的，我们的鼠标一般情况下有三个按键：</p><ul><li>BUTTON1 - 鼠标左键，也是我们用的最多的键</li><li>BUTTON2 - 鼠标中键，一般是鼠标滚轮，也是是可以点击的（不会有人以为鼠标滚轮只能滚不能按吧）</li><li>BUTTON3 - 鼠标右键，右键一般就是辅助点按，展开各种选项等</li></ul><p>如果是游戏鼠标，也许能监听到一些其他的按键，这里我们就不测试了，我们来尝试监听一下：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line">frame<span class="token punctuation">.</span><span class="token function">addMouseListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MouseAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mouseClicked</span><span class="token punctuation">(</span><span class="token class-name">MouseEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;鼠标点击：&quot;</span><span class="token operator">+</span>e<span class="token punctuation">.</span><span class="token function">getButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>鼠标滚动事件也可以进行监听：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line">frame<span class="token punctuation">.</span><span class="token function">addMouseWheelListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MouseAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mouseWheelMoved</span><span class="token punctuation">(</span><span class="token class-name">MouseWheelEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getScrollAmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取滚动数量</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>MacOS 下的鼠标滚动是平滑滚动，会触发很多次，不像 Windows 下是一格一格的僵硬滚动。</p><p>通过使用这些监听器，我们就可以更好的控制我们的 GUI 程序了。</p><h3 id="常用组件" tabindex="-1"><a class="header-anchor" href="#常用组件"><span>常用组件</span></a></h3><p>前面我们介绍了监听器，我们接着来看看常用的一些组件，那么什么是组件呢？</p><p>组件实际上是 AWT 为我们预设好的一些可以直接使用的界面元素，比如<strong>按钮、文本框、标签</strong>等等，我们可以使用这些已经帮我们写好的组件来快速拼凑出一个好看且功能强大的程序：</p><figure><img src="`+r+`" alt="image-20221027170224462" tabindex="0" loading="lazy"><figcaption>image-20221027170224462</figcaption></figure><p>在开始学习组件之前，我们先将布局设定为<code>null</code>（因为默认情况下会采用 BorderLayout 作为布局）有关布局我们会在下一部分中进行介绍，这节课我们先介绍没有布局的情况下如何使用这些组件。</p><div class="language-java" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line">frame<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><h4 id="label-标签" tabindex="-1"><a class="header-anchor" href="#label-标签"><span>Label（标签）</span></a></h4><p>首先我们来介绍一下最简单的组件，标签组件相当于一个普通的文本内容，我们可以将自己的标签添加到窗口中：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token class-name">Label</span> label <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string">&quot;我是标签&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//添加标签只需要创建一个Label对象即可</span></span>
<span class="line">label<span class="token punctuation">.</span><span class="token function">setLocation</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//注意，必须设定标签的位置和大小，否则无法展示出来</span></span>
<span class="line">label<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">frame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>label<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//使用add方法添加组件到窗口中</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，组件的位置是以整个窗口的左上角为原点开始的（整个窗口指的是包括标题栏在内）所以说我们如果想要设置组件的位置，我们还得注意加上标题栏的高度，否则会被标题栏遮挡：</p><figure><img src="`+d+`" alt="image-20221027175842110" tabindex="0" loading="lazy"><figcaption>image-20221027175842110</figcaption></figure><blockquote><p>windows 下中文可能乱码或无法正常显示，但在之后使用 Swing 里面的 JLabel 可以解决这个问题。也可以添加 JVM 选项<code>-Dfile.encoding=gbk</code>,文件编码设置为 GBK。</p></blockquote><p>我们可以自由修改文本的字体和大小：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token comment">//直接构造并传入一个Font对象即可</span></span>
<span class="line">label<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Font</span><span class="token punctuation">(</span><span class="token string">&quot;SimSong&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Font</span><span class="token punctuation">.</span><span class="token constant">BOLD</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//Font构造方法需要字体名称、字体样式（加粗、斜体）、字体大小</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>注意必须是操作系统已经安装的字体才支持展示，如果各位小伙伴不知道操作系统有哪些字体，可以使用：</p><div class="language-java" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token class-name">GraphicsEnvironment</span><span class="token punctuation">.</span><span class="token function">getLocalGraphicsEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAllFonts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p>来获取所有的系统字体：</p><figure><img src="`+m+`" alt="image-20221027181909908" tabindex="0" loading="lazy"><figcaption>image-20221027181909908</figcaption></figure><p>这里我们直接使用前面的<code>family</code>即可，比如我们要使用宋体，那么就输入其名称：</p><div class="language-java" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line">label<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Font</span><span class="token punctuation">(</span><span class="token string">&quot;Songti SC&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Font</span><span class="token punctuation">.</span><span class="token constant">BOLD</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><figure><img src="`+v+`" alt="image-20221027182010485" tabindex="0" loading="lazy"><figcaption>image-20221027182010485</figcaption></figure><p>可以看到字体已经成功修改了，当然，为了方便，如果我们的窗口中有很多的标签都想统一使用某一个字体，我们可以直接对窗口设定字体，那么只要是添加到窗口中的组件都会默认使用这个字体，除非单独指定组件字体。</p><p>要修改字体的颜色也很简单，我们可以使用：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line">label<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span><span class="token constant">BLACK</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//setBackground依然是背景颜色，注意背景填充就是我们之前设定的大小</span></span>
<span class="line">label<span class="token punctuation">.</span><span class="token function">setForeground</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span><span class="token constant">WHITE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//setForeground是设定字体颜色</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+g+`" alt="image-20221027183745934" tabindex="0" loading="lazy"><figcaption>image-20221027183745934</figcaption></figure><h4 id="button-按钮" tabindex="-1"><a class="header-anchor" href="#button-按钮"><span>Button（按钮）</span></a></h4><p>我们接着来认识一下下一个组件，这个组件的名字叫做按钮，实际上按钮也是我们经常会使用的一个组件：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token class-name">Button</span> button <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">&quot;点击充值&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//Button是按钮组件</span></span>
<span class="line">button<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">frame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>button<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样就可以添加一个按钮到我们的窗口中了：</p><figure><img src="`+b+`" alt="image-20221027182903783" tabindex="0" loading="lazy"><figcaption>image-20221027182903783</figcaption></figure><p>只不过，既然是按钮，那么肯定要添加一些点击动作才可以，比如点击按钮之后打印充值成功：</p><div class="language-java" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line">button<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;充值成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//addActionListener就是按钮点击监听器</span></span>
<span class="line"></span></code></pre></div><p>是不是感觉还是很简单？当然，如果要修改按钮的字体或是颜色，依然使用之前的方式即可。</p><h4 id="textfield-文本框" tabindex="-1"><a class="header-anchor" href="#textfield-文本框"><span>TextField（文本框）</span></a></h4><p>只不过光有按钮似乎太单调了一点，我们接着来认识下一个组件：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token class-name">TextField</span> field <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TextField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//TextField是文本框</span></span>
<span class="line">field<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">frame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>field<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+f+`" alt="image-20221027184138604" tabindex="0" loading="lazy"><figcaption>image-20221027184138604</figcaption></figure><p>我们经常要在一些软件上登录，那么就要输入我们的用户名和密码，所以说文本框的作用还是非常明显的，我们也可以通过 AWT 组件来实现这些功能，我们可以来试试看：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token class-name">TextField</span> field <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TextField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">field<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">frame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>field<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">Button</span> button <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">&quot;点击登录&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">button<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">//点击按钮直接获取文本框中的文本内容，只需要调用getText方法即可</span></span>
<span class="line">button<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;输入的用户名是：&quot;</span><span class="token operator">+</span>field<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">frame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>button<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们来试试看吧：</p><figure><img src="`+y+'" alt="image-20221027184618359" tabindex="0" loading="lazy"><figcaption>image-20221027184618359</figcaption></figure><figure><img src="'+w+`" alt="image-20221027184627653" tabindex="0" loading="lazy"><figcaption>image-20221027184627653</figcaption></figure><p>是不是感觉有内味了？当然，可能会有小伙伴觉得如果我们输入密码的话，不应该将展示的文字隐藏起来吗？我们可以这样：</p><div class="language-java" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line">field<span class="token punctuation">.</span><span class="token function">setEchoChar</span><span class="token punctuation">(</span><span class="token char">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//setEchoChar设定展示字符，无论我们输入的是什么，最终展示出来的都是我们指定的字符</span></span>
<span class="line"></span></code></pre></div><figure><img src="`+h+`" alt="image-20221027184814288" tabindex="0" loading="lazy"><figcaption>image-20221027184814288</figcaption></figure><p>当然，我们在获取输入的文本时还是输入的文本本身，不会变成展示的文本，只是一个视觉效果而已。这样，我们就可以将密码框做出来了。各位小伙伴可以尝试做一个登录界面。</p><h4 id="checkbox、checkboxgroup-复选框" tabindex="-1"><a class="header-anchor" href="#checkbox、checkboxgroup-复选框"><span>Checkbox、CheckboxGroup（复选框）</span></a></h4><p>但是肯定有小伙伴疑问，不是还有一个记住密码的勾选框吗？安排：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token class-name">Checkbox</span> checkbox <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Checkbox</span><span class="token punctuation">(</span><span class="token string">&quot;记住密码&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">checkbox<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//这个大小并不是勾选框的大小，具体的勾选框大小要根据操作系统决定，跟Label一样，是展示的空间大小</span></span>
<span class="line">frame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>checkbox<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最终展示出来的效果就是：</p><figure><img src="`+j+`" alt="image-20221027185748324" tabindex="0" loading="lazy"><figcaption>image-20221027185748324</figcaption></figure><p>效果还是挺不错的，我们也可以设定一个多选框：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token class-name">CheckboxGroup</span> group <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CheckboxGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//创建勾选框组</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">Checkbox</span> c1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Checkbox</span><span class="token punctuation">(</span><span class="token string">&quot;选我&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">c1<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">frame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">Checkbox</span> c2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Checkbox</span><span class="token punctuation">(</span><span class="token string">&quot;你干嘛&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">c2<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">frame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">c1<span class="token punctuation">.</span><span class="token function">setCheckboxGroup</span><span class="token punctuation">(</span>group<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//多个勾选框都可以添加到勾选框组中</span></span>
<span class="line">c2<span class="token punctuation">.</span><span class="token function">setCheckboxGroup</span><span class="token punctuation">(</span>group<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+x+`" alt="image-20221027190207441" tabindex="0" loading="lazy"><figcaption>image-20221027190207441</figcaption></figure><p>我们可以使用<code>getSelectedCheckbox</code>方法来获取已经被选中的勾选框：</p><div class="language-java" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>group<span class="token punctuation">.</span><span class="token function">getSelectedCheckbox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><h4 id="textarea-文本域" tabindex="-1"><a class="header-anchor" href="#textarea-文本域"><span>TextArea（文本域）</span></a></h4><p>之前的文本框只能输入单行文本，如果我要输入多行文本怎么办呢？</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token class-name">TextArea</span> textArea <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TextArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">textArea<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">frame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>textArea<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用文本域组件就可以输入多行文本了。</p><figure><img src="`+q+`" alt="image-20231202204043508" tabindex="0" loading="lazy"><figcaption>image-20231202204043508</figcaption></figure><ul><li>点击按钮去获取文本内容</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line">button<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span>e<span class="token operator">-&gt;</span><span class="token punctuation">{</span></span>
<span class="line"> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>textArea<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+_+'" alt="image-20231202204055139" tabindex="0" loading="lazy"><figcaption>image-20231202204055139</figcaption></figure><p>常用组件就暂时介绍到这里。</p><h3 id="布局和面板" tabindex="-1"><a class="header-anchor" href="#布局和面板"><span>布局和面板</span></a></h3><p>前面我们介绍了各种各样的组件，现在我们就可以利用这些组件来拼凑一个好看的程序了。</p><p>只不过，如果不使用布局，那么我们只能手动设置组件的位置以及大小，这就使得我们的程序在尺寸的设计上很有限，因为一旦窗口的大小发生变化，我们的组件依然是会放置在原本的位置上，要保证我们的设计不被破坏就只能固定窗口大小，但是很多应用都是支持放大和缩小的，并且在不同的大小下组件会自己调整位置：</p><figure><img src="'+C+`" alt="image-20221028135701447" tabindex="0" loading="lazy"><figcaption>image-20221028135701447</figcaption></figure><p>可以看到窗口的大小可以自由移动并且组件的位置会根据窗口大小自己进行调整。</p><p>这正是因为使用了布局实现的，布局可以根据自己的一些性质，对容器（这里可以是我们的窗口）内部的组件自动进行调整，包括组件的位置、组件的大小等，Java 为我们提供了各种各样的布局管理器，我们来看看吧。</p><h4 id="borderlayout-边界布局" tabindex="-1"><a class="header-anchor" href="#borderlayout-边界布局"><span>BorderLayout（边界布局）</span></a></h4><p>默认情况下，我们的窗口采用的是边界布局（BorderLayout）这种布局方式支持将组件放置到五个区域：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line">frame<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BorderLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//使用边界布局</span></span>
<span class="line">frame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">&quot;1号按钮&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">BorderLayout</span><span class="token punctuation">.</span><span class="token constant">WEST</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//在添加组件时，可以在后面加入约束</span></span>
<span class="line">frame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">&quot;2号按钮&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">BorderLayout</span><span class="token punctuation">.</span><span class="token constant">EAST</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">frame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">&quot;3号按钮&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">BorderLayout</span><span class="token punctuation">.</span><span class="token constant">SOUTH</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">frame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">&quot;4号按钮&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">BorderLayout</span><span class="token punctuation">.</span><span class="token constant">NORTH</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">frame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">&quot;5号按钮&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">BorderLayout</span><span class="token punctuation">.</span><span class="token constant">CENTER</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，约束只有在当前容器为对应布局时才可以使用。这里我们采用的是边界布局，边界布局可以将组件设定到五个区域：</p><figure><img src="`+S+`" alt="image-20221028140816161" tabindex="0" loading="lazy"><figcaption>image-20221028140816161</figcaption></figure><p>可以看到，分别在东、南、西、北、中心位置都可以添加组件，组件的大小会被自动调整，并且随着我们的窗口大小变化，组件的大小也会跟着自动调整，是不是感觉挺方便的？边界布局的性质：</p><ul><li>BorderLayout 布局的容器某个位置的某个组件会直接充满整个区域。</li><li>如果在某个位置重复添加组件，只有最后一个添加的组件可见。</li><li>缺少某个位置的组件时，其他位置的组件会延伸到该位置。</li></ul><p>我们还可以调整组件之间的间距：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token class-name">BorderLayout</span> borderLayout <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BorderLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">borderLayout<span class="token punctuation">.</span><span class="token function">setHgap</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//Hgap是横向间距</span></span>
<span class="line">borderLayout<span class="token punctuation">.</span><span class="token function">setVgap</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//Vgap是纵向间距</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调整之后，边距就非常明显了：</p><figure><img src="`+L+`" alt="image-20221028143042506" tabindex="0" loading="lazy"><figcaption>image-20221028143042506</figcaption></figure><h4 id="flowlayout-流式布局" tabindex="-1"><a class="header-anchor" href="#flowlayout-流式布局"><span>FlowLayout（流式布局）</span></a></h4><p>我们接着来认识一下下一个布局，FlowLayout 流式布局，流式布局实际上就是按顺序排列的一种布局：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line">frame<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FlowLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//采用流式布局</span></span>
<span class="line">frame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">&quot;1号按钮&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">frame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">&quot;2号按钮&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">frame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">&quot;3号按钮&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>采用流式布局后，按钮会根据内容大小，自动调整为对应的大小，并且他们之间是有间距的：</p><figure><img src="`+B+'" alt="image-20221028142144585" tabindex="0" loading="lazy"><figcaption>image-20221028142144585</figcaption></figure><p>当我们对窗口大小进行调整时，流式布局也会进行自动调整：</p><figure><img src="'+T+`" alt="image-20221028142326191" tabindex="0" loading="lazy"><figcaption>image-20221028142326191</figcaption></figure><p>我们也可以在设定流式布局时指定对齐模式：</p><div class="language-java" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line">frame<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FlowLayout</span><span class="token punctuation">(</span><span class="token class-name">FlowLayout</span><span class="token punctuation">.</span><span class="token constant">RIGHT</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//指定为右对齐</span></span>
<span class="line"></span></code></pre></div><p>对齐方式会直接决定组件的排列方式：</p><figure><img src="`+J+`" alt="image-20221028142506961" tabindex="0" loading="lazy"><figcaption>image-20221028142506961</figcaption></figure><p>我们同样可以使用 Hgap 和 Vgap 来调整组件之间的间距：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token class-name">FlowLayout</span> flowLayout <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FlowLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">flowLayout<span class="token punctuation">.</span><span class="token function">setHgap</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">flowLayout<span class="token punctuation">.</span><span class="token function">setVgap</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+z+'" alt="image-20221028143230216" tabindex="0" loading="lazy"><figcaption>image-20221028143230216</figcaption></figure><h4 id="cardlayout-卡片布局" tabindex="-1"><a class="header-anchor" href="#cardlayout-卡片布局"><span>CardLayout（卡片布局）</span></a></h4><p>我们接着来看卡片布局，CardLayout 对象将卡片作为一个容器中的每个组件，这个卡片布局怎么说呢，有点像 iOS14 新出的叠放小组件（安卓应该也有）就像很多张卡片叠在一起，每次只能看到最顶上的这张卡片，但是我们可以将下层的卡片切到顶上来：</p><figure><img src="'+I+`" alt="image-20221028143949323" tabindex="0" loading="lazy"><figcaption>image-20221028143949323</figcaption></figure><p>卡片布局就是这样，我们可以添加多个组件：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token class-name">CardLayout</span> layout <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CardLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">frame<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span>layout<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">frame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string">&quot;我是1号&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">frame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string">&quot;我是2号&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">frame<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    layout<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>frame<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//我们需要使用CardLayout对象来进行切换</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们每三秒钟切换一次卡片，可以看到我们添加的标签每三秒就会变化一次，实际上我们可以利用卡片布局来做一个类似跑马灯的效果，是不是感觉很神奇？</p><h4 id="gridlayout-网格布局" tabindex="-1"><a class="header-anchor" href="#gridlayout-网格布局"><span>GridLayout（网格布局）</span></a></h4><p>我们接着来看网格布局，GridLayout 以矩形网格的形式对组件进行管理：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line">frame<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GridLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></span>
<span class="line">    frame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">&quot;号按钮&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种布局就很好理解了，默认情况下会生成一行按格子划分的相等区域：</p><figure><img src="`+A+`" alt="image-20221028145118733" tabindex="0" loading="lazy"><figcaption>image-20221028145118733</figcaption></figure><p>我们也可以手动指定行数和列数：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token class-name">GridLayout</span> gridLayout <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GridLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">gridLayout<span class="token punctuation">.</span><span class="token function">setRows</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">frame<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span>gridLayout<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></span>
<span class="line">    frame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">&quot;号按钮&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+F+'" alt="image-20221028145330522" tabindex="0" loading="lazy"><figcaption>image-20221028145330522</figcaption></figure><p>所有的组件都会整齐排列在网格中。</p><h4 id="gridbaglayout-网格包布局管理器" tabindex="-1"><a class="header-anchor" href="#gridbaglayout-网格包布局管理器"><span>GridBagLayout（网格包布局管理器）</span></a></h4><p>最后一种布局是 GridBagLayout，是最灵活的布局管理器，它同样是按照网格进行划分，但是一个组件可以同时占据多个网格。这种情况其实也是经常会出现的，比如计算器上的按钮虽然看起来也是按照网格排列的，但是有些按钮同时占据了横向或是纵向的两个网格，这种情况使用 GridBagLayout 布局就可以很好的处理：</p><figure><img src="'+O+'" alt="image-20221028145752545" tabindex="0" loading="lazy"><figcaption>image-20221028145752545</figcaption></figure><p>虽然这个布局很强大，但是用起来也是很麻烦的，所以说这里就不做讲解了，感兴趣的小伙伴可以自行了解。</p><h4 id="panel-面板" tabindex="-1"><a class="header-anchor" href="#panel-面板"><span>Panel（面板）</span></a></h4><p>虽然认识了这么多的布局，但是我们发现，很多应用程序并不只是由单一的布局组成的，而是多种布局相互嵌套的结果，比如我们的 IDEA 界面，就不仅仅是一个布局完成的（这里只是举个例子）而是多种布局在嵌套使用：</p><figure><img src="'+M+'" alt="image-20221028151242522" tabindex="0" loading="lazy"><figcaption>image-20221028151242522</figcaption></figure><p>但是只有我们的窗口才能设置布局啊，总不可能让多个窗口拼接在一起吧？实际上除了窗口可以作为容器之外，我们也可以使用其他的容器，这时，我们就需要用到面板。</p><p>类面板是最简单的容器类，它跟窗口一样，可以提供一个空间，同样可以随意添加组件到面板中，只不过面板本身也是一个组件，所以说面板是可以放到其他容器中的容器，就像：</p><figure><img src="'+W+'" alt="image-20221028151701189" tabindex="0" loading="lazy"><figcaption>image-20221028151701189</figcaption></figure><figure><img src="'+E+`" alt="image-20221028151845514" tabindex="0" loading="lazy"><figcaption>image-20221028151845514</figcaption></figure><p>面板本身也是容器，所以说也可以单独设置面板内部的布局，比如现在我们想要分两个区域，上半部分区域是流式布局，下半部分区域采用网格布局，那么我们就可以先将窗口采用网格布局，并在上下各添加一个面板：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token class-name">GridLayout</span> layout <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GridLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//先设置整个窗口的布局</span></span>
<span class="line">layout<span class="token punctuation">.</span><span class="token function">setRows</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//设置行数为2，一会就会分成两行了</span></span>
<span class="line">frame<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span>layout<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">Panel</span> top <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Panel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//接着我们创建一下上半部分的面板和下半部分的面板</span></span>
<span class="line">top<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span><span class="token constant">PINK</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//添加一个背景颜色方便区分</span></span>
<span class="line">frame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>top<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">Panel</span> bottom <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Panel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">bottom<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span><span class="token constant">ORANGE</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">frame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>bottom<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，我们的两个面板就按照网格布局，被分成了上下两部分：</p><figure><img src="`+P+`" alt="image-20221028152352861" tabindex="0" loading="lazy"><figcaption>image-20221028152352861</figcaption></figure><p>接着我们就可以分别在上半部分的面板和下半部分的面板中进行单独配置了：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token class-name">Panel</span> top <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Panel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">top<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span><span class="token constant">PINK</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">top<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FlowLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//面板默认会采用FlowLayout，所以说这里指不指定都一样</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token comment">//面板就像窗口一样，可以设定布局和添加组件</span></span>
<span class="line">    top<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">&quot;流式&quot;</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">frame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>top<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">Panel</span> bottom <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Panel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">bottom<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span><span class="token constant">ORANGE</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">bottom<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GridLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//下半部分我们采用网格布局</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></span>
<span class="line">    bottom<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">&quot;网格&quot;</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">frame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>bottom<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们将上半部分面板设定为流式布局，下半部分面板设定为网格布局：</p><figure><img src="`+G+'" alt="image-20221028152617119" tabindex="0" loading="lazy"><figcaption>image-20221028152617119</figcaption></figure><p>利用面板，我们就可以实现各种布局的自由组合，当然，面板在后面还会有更多的用处。</p><h3 id="滚动面板和列表" tabindex="-1"><a class="header-anchor" href="#滚动面板和列表"><span>滚动面板和列表</span></a></h3><p>有些时候，我们的窗口大小可能并不能完全显示内部的内容，比如出现了一张很大的图片。</p><figure><img src="'+D+`" alt="image-20221028153201386" tabindex="0" loading="lazy"><figcaption>image-20221028153201386</figcaption></figure><p>此时就会出现滚动条来让我们进行拖拽，这样就可以向下滑动查看没有完全展示出来的内容了。而我们之前开发的程序都没办法做到这样的滚动，超出部分会直接无法显示。</p><p>AWT 也为我们提供了滚动面板组件，滚动面板也是一个容器，但是我们无法修改它的布局，它只能容纳单个组件，比如展示一个图片、或者是列表等，我们也可以将其与 Panel 配合使用，比如：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token class-name">ScrollPane</span> scrollPane <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ScrollPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//创建滚动面板</span></span>
<span class="line">frame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>scrollPane<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">GridLayout</span> layout <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GridLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//创建滚动面板内部的要展示的面板</span></span>
<span class="line">layout<span class="token punctuation">.</span><span class="token function">setRows</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">Panel</span> panel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Panel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">panel<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span>layout<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></span>
<span class="line">    panel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">&quot;我是按钮&quot;</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//为面板添加按钮</span></span>
<span class="line">scrollPane<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>panel<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，无法显示的部分会自动变成滚动面板，我们滑动就可以展示了：</p><figure><img src="`+N+`" alt="image-20221028155050727" tabindex="0" loading="lazy"><figcaption>image-20221028155050727</figcaption></figure><p>这里需要特别提一下，我们看到这里的按钮大小采用的是自动生成的大小，但是如果我们希望按钮的大小按照我们喜欢的来怎么办呢？我们知道，使用布局之后，组件的大小实际上是自动决定的，只有未使用布局的情况下才能自由更改组件大小，那么我们怎么才能干预呢？我们可以为组件设定一个建议的大小：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Button</span> button <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">&quot;我是按钮&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    button<span class="token punctuation">.</span><span class="token function">setPreferredSize</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Dimension</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//设置首选大小</span></span>
<span class="line">    panel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>button<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当布局管理器在自动调整内部组件大小时，如果不是必须要按照布局大小来展示或者是高度或宽度不确定，那么就会采用我们建议的大小展示，比如这里只能确定宽度，而高度是不确定的，那么就可以使用我们建议的大小来展示：</p><figure><img src="`+V+`" alt="image-20221028155443331" tabindex="0" loading="lazy"><figcaption>image-20221028155443331</figcaption></figure><p>当然，首选大小可能不太好理解，还需要各位小伙伴多多尝试才能理解。</p><p>实际上滚动面板的最佳搭档就是 List 列表（注意这里的列表不是我们集合类里面学习的列表，而是展示出来的列表组件）</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token class-name">List</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//注意是awt包下的List，别导错了</span></span>
<span class="line">list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;小糍粑&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;锅巴洋芋&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;手抓饼&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;凉面&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">list<span class="token punctuation">.</span><span class="token function">setMultipleMode</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//是否开启多选模式</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>列表组件就像是一个选择列表一样：</p><figure><img src="`+R+`" alt="image-20221028160340931" tabindex="0" loading="lazy"><figcaption>image-20221028160340931</figcaption></figure><p>列表会将元素依次展示出来，我们可以选择列表中的某一项：</p><div class="language-java" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line">list<span class="token punctuation">.</span><span class="token function">addItemListener</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p>列表可以添加监听器，当我们选择某个物品时，就会自动触发：</p><figure><img src="`+H+`" alt="image-20221028160611113" tabindex="0" loading="lazy"><figcaption>image-20221028160611113</figcaption></figure><p>列表就很时候拿来做文件列表。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token class-name">List</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  list<span class="token punctuation">.</span><span class="token function">setMultipleMode</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 设置多选</span></span>
<span class="line">list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;Java&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;C++&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;Python&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;C#&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;PHP&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;JavaScript&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;Go&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;Kotlin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;Rust&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;Perl&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;Lua&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">list<span class="token punctuation">.</span><span class="token function">addItemListener</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">getSelectedIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; : &quot;</span> <span class="token operator">+</span> list<span class="token punctuation">.</span><span class="token function">getSelectedItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">scrollPane<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="菜单栏" tabindex="-1"><a class="header-anchor" href="#菜单栏"><span>菜单栏</span></a></h3><p>前面我们认识了各种各样的组件，我们接着来看菜单，实际上各位小伙伴会发现我们的程序上方一般都会有一排菜单：</p><figure><img src="`+U+'" alt="image-20221028161209224" tabindex="0" loading="lazy"><figcaption>image-20221028161209224</figcaption></figure><p>在 MacOS 下是整合到状态栏中的：</p><figure><img src="'+X+'" alt="image-20221028161239672" tabindex="0" loading="lazy"><figcaption>image-20221028161239672</figcaption></figure><p>这些菜单一般都会包含我们程序中的一些基本操作，实际上我们的程序中很多地方都会使用到下拉菜单：</p><figure><img src="'+Z+`" alt="image-20221028161118028" tabindex="0" loading="lazy"><figcaption>image-20221028161118028</figcaption></figure><p>而我们编写 AWT 程序也可以添加这样的菜单，只需要为窗口设定一个菜单栏即可：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token class-name">MenuBar</span> bar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MenuBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//创建菜单栏</span></span>
<span class="line"><span class="token class-name">Menu</span> menu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Menu</span><span class="token punctuation">(</span><span class="token string">&quot;我是1号菜单&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">menu<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MenuItem</span><span class="token punctuation">(</span><span class="token string">&quot;测试1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">menu<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MenuItem</span><span class="token punctuation">(</span><span class="token string">&quot;测试2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">bar<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>menu<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">frame<span class="token punctuation">.</span><span class="token function">setMenuBar</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//为窗口设定刚刚定义好的菜单栏</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>设定好 MenuBar 之后，我们的程序就有菜单了：</p><figure><img src="`+K+'" alt="image-20221028161741397" tabindex="0" loading="lazy"><figcaption>image-20221028161741397</figcaption></figure><p>虽然有点丑，但是确实是内味，不过还是 MacOS 下好看：</p><figure><img src="'+Q+`" alt="image-20221028161910928" tabindex="0" loading="lazy"><figcaption>image-20221028161910928</figcaption></figure><p>我们着重来看一下 MenuItem，这是我们菜单的每一个选项，我们可以为其添加监听器来监听用户是否点击：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token class-name">MenuItem</span> item <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MenuItem</span><span class="token punctuation">(</span><span class="token string">&quot;测试1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">item<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;一号选项被点击了！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">menu<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其实跟我们之前学习的按钮是差不多的：</p><figure><img src="`+Y+`" alt="image-20221028162602244" tabindex="0" loading="lazy"><figcaption>image-20221028162602244</figcaption></figure><p>我们还可以为菜单中的选项设定快捷键：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token class-name">MenuItem</span> item <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MenuItem</span><span class="token punctuation">(</span><span class="token string">&quot;测试1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">item<span class="token punctuation">.</span><span class="token function">setShortcut</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MenuShortcut</span><span class="token punctuation">(</span><span class="token char">&#39;A&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//MenuShortcut就是指定快捷键组合，默认情况下是Ctrl+指定按键</span></span>
<span class="line"><span class="token comment">//item.setShortcut(new MenuShortcut(&#39;A&#39;, true));   //第二个参数指定为true表示需要Ctrl+Shift+指定按键</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的效果就是 Ctrl+A 触发快捷键：</p><figure><img src="`+$+`" alt="image-20221030173320786" tabindex="0" loading="lazy"><figcaption>image-20221030173320786</figcaption></figure><p>当然，除了这种普通的菜单选项之外，还有可以勾选的：</p><div class="language-java" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line">menu<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CheckboxMenuItem</span><span class="token punctuation">(</span><span class="token string">&quot;测试2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p>CheckboxMenuItem 是可以勾选的选项，它能够对状态进行记录，我们点击选项之后会变成勾选状态：</p><figure><img src="`+nn+'" alt="image-20221028162655033" tabindex="0" loading="lazy"><figcaption>image-20221028162655033</figcaption></figure><p>实际上要添加这样的菜单栏还是挺简单的的，我们接着来看弹出菜单，弹出菜单其实也经常出现，比如我们要新建一个类，我们就可以右键对应的包：</p><figure><img src="'+sn+`" alt="image-20221028214019648" tabindex="0" loading="lazy"><figcaption>image-20221028214019648</figcaption></figure><p>弹出一个浮在窗口之上的，并且可以进行选择的菜单，这个就是弹出菜单。</p><p>比如我们想要实现右键窗口任意位置都弹出菜单：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token class-name">PopupMenu</span> menu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PopupMenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//创建弹出菜单</span></span>
<span class="line">menu<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MenuItem</span><span class="token punctuation">(</span><span class="token string">&quot;选项1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//每一个选项依然是使用MenuItem</span></span>
<span class="line">menu<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MenuItem</span><span class="token punctuation">(</span><span class="token string">&quot;选项2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">frame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>menu<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//注意，弹出菜单也要作为组件加入到窗口中（但是默认情况下不显示）</span></span>
<span class="line"></span>
<span class="line">frame<span class="token punctuation">.</span><span class="token function">addMouseListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MouseAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mousePressed</span><span class="token punctuation">(</span><span class="token class-name">MouseEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">MouseEvent</span><span class="token punctuation">.</span><span class="token constant">BUTTON3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">//监听鼠标右键</span></span>
<span class="line">            menu<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span>frame<span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//要展示弹出菜单，我们只需要调用show方法即可</span></span>
<span class="line">           <span class="token comment">//注意，第一个参数必须是弹出菜单所加入的窗口或是窗口中的任意一个组件</span></span>
<span class="line">           <span class="token comment">//后面的坐标就是相对于这个窗口或是组件的原点（左上角）这个位置进行弹出</span></span>
<span class="line">           <span class="token comment">//我们这里写的就是相对于当前窗口的左上角，鼠标点击位置的x、y位置弹出窗口</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们来看看实际效果吧：</p><figure><img src="`+an+'" alt="image-20221028215651667" tabindex="0" loading="lazy"><figcaption>image-20221028215651667</figcaption></figure><p>这样，我们就可以设计出更加高级的程序了。</p><h3 id="对话框" tabindex="-1"><a class="header-anchor" href="#对话框"><span>对话框</span></a></h3><p>有些时候，我们点击关闭按钮之后，窗口并不会直接关闭，而是会弹出一个对话框询问我们是否要退出，比如我们使用记事本编辑完之后未保存就关闭记事本，就会提示我们：</p><figure><img src="'+pn+`" alt="image-20221028220721666" tabindex="0" loading="lazy"><figcaption>image-20221028220721666</figcaption></figure><p>实际上像这样弹出的的一个对话框，在很多时候都很关键，我们也可以使用 AWT 为我们提供的对话框，比如我们现在希望在关闭窗口时询问我们是否真的要关闭：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token class-name">Dialog</span> dialog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dialog</span><span class="token punctuation">(</span>frame<span class="token punctuation">,</span> <span class="token string">&quot;我是对话框&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">//第一个参数是父窗口或是父对话框（没错，对话框也可以由对话框唤起）</span></span>
<span class="line"><span class="token comment">//最后一个参数是当对话框展示时，是否让父窗口（对话框）无法点击</span></span>
<span class="line">dialog<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">frame<span class="token punctuation">.</span><span class="token function">addWindowListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WindowAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">windowClosing</span><span class="token punctuation">(</span><span class="token class-name">WindowEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        dialog<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们点击关闭时：</p><figure><img src="`+tn+`" alt="image-20221028223431754" tabindex="0" loading="lazy"><figcaption>image-20221028223431754</figcaption></figure><p>可以看到这里确实弹出了一个对话框（这个对话框无法最小化到图标）也就是说我们只能通过操作对话框来关闭它。</p><p>只不过就单单是这样的一个对话框太过单调了，我们可以为其添加一些按钮之类的东西：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token class-name">Dialog</span> dialog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dialog</span><span class="token punctuation">(</span>frame<span class="token punctuation">,</span> <span class="token string">&quot;我是对话框&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">dialog<span class="token punctuation">.</span><span class="token function">setResizable</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">dialog<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string">&quot;确定是否要退出程序？&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">BorderLayout</span><span class="token punctuation">.</span><span class="token constant">NORTH</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//对话框默认采用的是边界布局</span></span>
<span class="line">dialog<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">&quot;取消&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">BorderLayout</span><span class="token punctuation">.</span><span class="token constant">WEST</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">dialog<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">&quot;不退出&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">BorderLayout</span><span class="token punctuation">.</span><span class="token constant">EAST</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">dialog<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样我们退出时，就有对应的提示了：</p><figure><img src="`+en+`" alt="image-20221028224410637" tabindex="0" loading="lazy"><figcaption>image-20221028224410637</figcaption></figure><p>对话框就像一个特殊的窗口一样，各位小伙伴可以自由发挥。</p><p>有些时候我们在使用应用程序的时候，可能需要我们去选择电脑上的一些文件，这个时候我们就可以使用文件对话框：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token class-name">FileDialog</span> dialog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileDialog</span><span class="token punctuation">(</span>frame<span class="token punctuation">,</span> <span class="token string">&quot;请选择一个文件&quot;</span><span class="token punctuation">,</span> <span class="token class-name">FileDialog</span><span class="token punctuation">.</span><span class="token constant">LOAD</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//选择文件对话框类型，可以是加载文件或是保存文件</span></span>
<span class="line"></span>
<span class="line">frame<span class="token punctuation">.</span><span class="token function">addWindowListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WindowAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">windowClosing</span><span class="token punctuation">(</span><span class="token class-name">WindowEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        dialog<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>文件对话框是根据操作系统提供的文件选择器决定的：</p><figure><img src="`+cn+`" alt="image-20221028224815769" tabindex="0" loading="lazy"><figcaption>image-20221028224815769</figcaption></figure><p>我们可以通过文件对话框选择一个文件：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token class-name">FileDialog</span> dialog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileDialog</span><span class="token punctuation">(</span>frame<span class="token punctuation">,</span> <span class="token string">&quot;请选择一个文件&quot;</span><span class="token punctuation">,</span> <span class="token class-name">FileDialog</span><span class="token punctuation">.</span><span class="token constant">LOAD</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">frame<span class="token punctuation">.</span><span class="token function">addWindowListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WindowAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">windowClosing</span><span class="token punctuation">(</span><span class="token class-name">WindowEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        dialog<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//注意，需要将对话框展示出来之后，才能进行选择</span></span>
<span class="line">       <span class="token comment">//选择完成之后getDirectory和getFile方法就可以返回结果了，否则会阻塞</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;选择的文件为：&quot;</span><span class="token operator">+</span>dialog<span class="token punctuation">.</span><span class="token function">getDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> dialog<span class="token punctuation">.</span><span class="token function">getFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>选择文件之后，我们可以通过对话框直接获取到对应的文件：</p><figure><img src="`+on+`" alt="image-20221028225343739" tabindex="0" loading="lazy"><figcaption>image-20221028225343739</figcaption></figure><p>是不是感觉还是挺简单的？</p><h3 id="自定义组件" tabindex="-1"><a class="header-anchor" href="#自定义组件"><span>自定义组件</span></a></h3><p>除了使用官方提供的这些组件之外，我们也可以自己创建一些组件来使用，比如官方没有提供图片组件，我们可以自己编写一个图片组件用于在窗口中展示我们的图片。</p><p>要自己编写一个组件，需要完成下面的步骤：</p><ul><li>必须继承自 Component 类，表示这是一个 AWT 组件。</li><li>需要自己实现<code>paintComponent</code>方法，这个方法就是组件的绘制方法，最终绘制出来的结果就是展示出来的结果了。</li></ul><p>首先我们先把最简单的事情做了：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ImageView</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>   <span class="token comment">//继承自Component表示是一个组件</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">ImageView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">paint</span><span class="token punctuation">(</span><span class="token class-name">Graphics</span> g<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//重写paint方法，这个方法就是组件的绘制方法</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以先创建一个这个组件并放到我们的窗口中：</p><div class="language-java" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line">frame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ImageView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p>这里用的是边界布局，默认情况下组件会被添加到中心，占满整个窗口。但是由于我们并没有编写任何绘制内容，所以说组件是空白的一片。</p><p>我们来看看这个<code>paint</code>方法该如何重写，这个方法实际上是在窗口绘制时自动调用，那么到底什么是绘制呢？实际上绘制就是需要我们进行画图操作，当窗口首次展示或是修改大小时就会调用这个方法绘制组件（使用过 OpenGL 的小伙伴应该能够很容易上手）</p><p>这个方法给了我们一个 Graphics 对象，实际上这个对象就是我们用于绘制图形的工具，比如我们这个组件需要绘制的是一个矩形：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token annotation punctuation">@Override</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">paint</span><span class="token punctuation">(</span><span class="token class-name">Graphics</span> g<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment">//各位小伙伴可以将Graphics看做一只画笔，我们想让画笔做什么就做什么</span></span>
<span class="line">    g<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span><span class="token constant">BLACK</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//我们可以先将画笔切换为黑色</span></span>
<span class="line">    g<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//drawRect就是绘制矩形区域，这里的x和y是相对于当前组件的位置来的</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们来看看最后会绘制成啥样：</p><figure><img src="`+ln+`" alt="image-20221028232701565" tabindex="0" loading="lazy"><figcaption>image-20221028232701565</figcaption></figure><p>可以看到整个组件都被涂成了黑色，我们还可以绘制更多好玩的图形：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">paint</span><span class="token punctuation">(</span><span class="token class-name">Graphics</span> g<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    g<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span><span class="token constant">BLACK</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    g<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    g<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span><span class="token constant">RED</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//画笔改成红色</span></span>
<span class="line">   <span class="token comment">//在中间画个圆角矩形边框</span></span>
<span class="line">    g<span class="token punctuation">.</span><span class="token function">drawRoundRect</span><span class="token punctuation">(</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>得到的效果就是这样了：</p><figure><img src="`+un+`" alt="image-20221028233307877" tabindex="0" loading="lazy"><figcaption>image-20221028233307877</figcaption></figure><p>是不是感觉还挺好玩的，就像我们在玩画画游戏一样。这里列一下 Graphics 接口提供的所有功能：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Graphics</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">//移动画笔原点到指定坐标，默认是(0,0)</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">//设定画笔颜色</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">setColor</span><span class="token punctuation">(</span><span class="token class-name">Color</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">//设置为普通绘画模式</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">setPaintMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">//交替颜色模式，比较高级，小伙伴自行了解</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">setXORMode</span><span class="token punctuation">(</span><span class="token class-name">Color</span> c1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">//设置字体，绘制文本内容时就按照这个字体来绘制</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">setFont</span><span class="token punctuation">(</span><span class="token class-name">Font</span> font<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">//设置裁剪区域，一旦设置裁剪区域，那么裁剪区域以外的地方即使绘制，也不会生效，绘制</span></span>
<span class="line">   <span class="token comment">//只会在裁剪区域内生效（有点像图层蒙版？）</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">setClip</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> width<span class="token punctuation">,</span> <span class="token keyword">int</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">//设定自定义形状的裁剪区域</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">setClip</span><span class="token punctuation">(</span><span class="token class-name">Shape</span> clip<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">//拷贝指定区域的内容到另一个位置</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">copyArea</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> width<span class="token punctuation">,</span> <span class="token keyword">int</span> height<span class="token punctuation">,</span></span>
<span class="line">                                  <span class="token keyword">int</span> dx<span class="token punctuation">,</span> <span class="token keyword">int</span> dy<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">//绘制直线</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">drawLine</span><span class="token punctuation">(</span><span class="token keyword">int</span> x1<span class="token punctuation">,</span> <span class="token keyword">int</span> y1<span class="token punctuation">,</span> <span class="token keyword">int</span> x2<span class="token punctuation">,</span> <span class="token keyword">int</span> y2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">//填充矩形区域</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> width<span class="token punctuation">,</span> <span class="token keyword">int</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">//绘制矩形边框</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">drawRect</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> width<span class="token punctuation">,</span> <span class="token keyword">int</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">//绘制圆角矩形边框</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">drawRoundRect</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> width<span class="token punctuation">,</span> <span class="token keyword">int</span> height<span class="token punctuation">,</span></span>
<span class="line">                                       <span class="token keyword">int</span> arcWidth<span class="token punctuation">,</span> <span class="token keyword">int</span> arcHeight<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">//填充圆角矩形区域</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">fillRoundRect</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> width<span class="token punctuation">,</span> <span class="token keyword">int</span> height<span class="token punctuation">,</span></span>
<span class="line">                                       <span class="token keyword">int</span> arcWidth<span class="token punctuation">,</span> <span class="token keyword">int</span> arcHeight<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">//绘制3D矩形边框（其实就是加了个深色和浅色边框，有一个视觉效果罢了）</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">draw3DRect</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> width<span class="token punctuation">,</span> <span class="token keyword">int</span> height<span class="token punctuation">,</span></span>
<span class="line">                           <span class="token keyword">boolean</span> raised<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">//填充3D矩形区域（同上）</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fill3DRect</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> width<span class="token punctuation">,</span> <span class="token keyword">int</span> height<span class="token punctuation">,</span></span>
<span class="line">                           <span class="token keyword">boolean</span> raised<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">//绘制椭圆形边框</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">drawOval</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> width<span class="token punctuation">,</span> <span class="token keyword">int</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">//填充椭圆形区域</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">fillOval</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> width<span class="token punctuation">,</span> <span class="token keyword">int</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">//绘制弧线边框</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">drawArc</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> width<span class="token punctuation">,</span> <span class="token keyword">int</span> height<span class="token punctuation">,</span></span>
<span class="line">                                 <span class="token keyword">int</span> startAngle<span class="token punctuation">,</span> <span class="token keyword">int</span> arcAngle<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">//填充扇形区域</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">fillArc</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> width<span class="token punctuation">,</span> <span class="token keyword">int</span> height<span class="token punctuation">,</span></span>
<span class="line">                                 <span class="token keyword">int</span> startAngle<span class="token punctuation">,</span> <span class="token keyword">int</span> arcAngle<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">//绘制折线（需要提供多个坐标）</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">drawPolyline</span><span class="token punctuation">(</span><span class="token keyword">int</span> xPoints<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> yPoints<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">                                      <span class="token keyword">int</span> nPoints<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">//绘制多边形边框</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">drawPolygon</span><span class="token punctuation">(</span><span class="token keyword">int</span> xPoints<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> yPoints<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">                                     <span class="token keyword">int</span> nPoints<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">//填充多边形区域</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">fillPolygon</span><span class="token punctuation">(</span><span class="token keyword">int</span> xPoints<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> yPoints<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">                                     <span class="token keyword">int</span> nPoints<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">//绘制文本</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">drawString</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">//绘制图片（绘制大小为图片原本大小）</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">boolean</span> <span class="token function">drawImage</span><span class="token punctuation">(</span><span class="token class-name">Image</span> img<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span></span>
<span class="line">                                      <span class="token class-name">ImageObserver</span> observer<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">//绘制按自定义大小缩放后的图片</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">boolean</span> <span class="token function">drawImage</span><span class="token punctuation">(</span><span class="token class-name">Image</span> img<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span></span>
<span class="line">                                      <span class="token keyword">int</span> width<span class="token punctuation">,</span> <span class="token keyword">int</span> height<span class="token punctuation">,</span></span>
<span class="line">                                      <span class="token class-name">ImageObserver</span> observer<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">//绘制图片时如果是透明部分则采用背景颜色填充</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">boolean</span> <span class="token function">drawImage</span><span class="token punctuation">(</span><span class="token class-name">Image</span> img<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span></span>
<span class="line">                                      <span class="token class-name">Color</span> bgcolor<span class="token punctuation">,</span></span>
<span class="line">                                      <span class="token class-name">ImageObserver</span> observer<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">//绘制按自定义大小缩放后带背景颜色的图片</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">boolean</span> <span class="token function">drawImage</span><span class="token punctuation">(</span><span class="token class-name">Image</span> img<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span></span>
<span class="line">                                      <span class="token keyword">int</span> width<span class="token punctuation">,</span> <span class="token keyword">int</span> height<span class="token punctuation">,</span></span>
<span class="line">                                      <span class="token class-name">Color</span> bgcolor<span class="token punctuation">,</span></span>
<span class="line">                                      <span class="token class-name">ImageObserver</span> observer<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">//对原本的图片按照起始坐标和尺寸进行裁剪后，再以给定大小绘制到给定位置</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">boolean</span> <span class="token function">drawImage</span><span class="token punctuation">(</span><span class="token class-name">Image</span> img<span class="token punctuation">,</span></span>
<span class="line">                                      <span class="token keyword">int</span> dx1<span class="token punctuation">,</span> <span class="token keyword">int</span> dy1<span class="token punctuation">,</span> <span class="token keyword">int</span> dx2<span class="token punctuation">,</span> <span class="token keyword">int</span> dy2<span class="token punctuation">,</span></span>
<span class="line">                                      <span class="token keyword">int</span> sx1<span class="token punctuation">,</span> <span class="token keyword">int</span> sy1<span class="token punctuation">,</span> <span class="token keyword">int</span> sx2<span class="token punctuation">,</span> <span class="token keyword">int</span> sy2<span class="token punctuation">,</span></span>
<span class="line">                                      <span class="token class-name">ImageObserver</span> observer<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">//累了</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">boolean</span> <span class="token function">drawImage</span><span class="token punctuation">(</span><span class="token class-name">Image</span> img<span class="token punctuation">,</span></span>
<span class="line">                                      <span class="token keyword">int</span> dx1<span class="token punctuation">,</span> <span class="token keyword">int</span> dy1<span class="token punctuation">,</span> <span class="token keyword">int</span> dx2<span class="token punctuation">,</span> <span class="token keyword">int</span> dy2<span class="token punctuation">,</span></span>
<span class="line">                                      <span class="token keyword">int</span> sx1<span class="token punctuation">,</span> <span class="token keyword">int</span> sy1<span class="token punctuation">,</span> <span class="token keyword">int</span> sx2<span class="token punctuation">,</span> <span class="token keyword">int</span> sy2<span class="token punctuation">,</span></span>
<span class="line">                                      <span class="token class-name">Color</span> bgcolor<span class="token punctuation">,</span></span>
<span class="line">                                      <span class="token class-name">ImageObserver</span> observer<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们这里要实现的时绘制一个图片，那么我们就可以像这样编写了：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ImageView</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Image</span> image<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">ImageView</span><span class="token punctuation">(</span><span class="token class-name">String</span> filename<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        image <span class="token operator">=</span> <span class="token class-name">ImageIO</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//我们可以使用ImageIO类来快速将图片文件读取为Image对象</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">paint</span><span class="token punctuation">(</span><span class="token class-name">Graphics</span> g<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">       <span class="token comment">//绘制图片需要提供Image对象</span></span>
<span class="line">        g<span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们来试试看效果吧：</p><figure><img src="`+kn+`" alt="image-20221028235756338" tabindex="0" loading="lazy"><figcaption>image-20221028235756338</figcaption></figure><p>可以看到图片成功绘制出来了，这样，我们就提供自己编写绘制逻辑，成功完成了一个简单的自定义组件。</p><p>当然，现在我们讲了如何加载图片，顺便把设定自定义的程序图标介绍一下吧：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token class-name">Image</span> image <span class="token operator">=</span> <span class="token class-name">ImageIO</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;test.png&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">frame<span class="token punctuation">.</span><span class="token function">setIconImage</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，在 MacOS 下这样写没用，得用专用的增强包：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token class-name">Image</span> image <span class="token operator">=</span> <span class="token class-name">ImageIO</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;test.png&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">Application</span><span class="token punctuation">.</span><span class="token function">getApplication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setDockIconImage</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，我们的程序就会显示为我们自己定义的图标了。</p><h3 id="窗口修饰和自定义形状" tabindex="-1"><a class="header-anchor" href="#窗口修饰和自定义形状"><span>窗口修饰和自定义形状</span></a></h3><p>实际上我的窗口在默认情况下都是处于修饰状态，那么什么是修饰状态呢？</p><p>窗口修饰实际上就是我们窗口外面添加的边框：</p><figure><img src="`+s+`" alt="image-20221026164200924" tabindex="0" loading="lazy"><figcaption>image-20221026164200924</figcaption></figure><p>有些时候，可能我们并不需要系统为我们提供的窗口边框，我们希望能够自己编写窗口的边框，包括各种按钮等，此时我们就可以将窗口设定为非修饰状态：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Frame</span> frame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Frame</span><span class="token punctuation">(</span><span class="token string">&quot;我是窗口&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    frame<span class="token punctuation">.</span><span class="token function">setUndecorated</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//将窗口设定为非修饰状态</span></span>
<span class="line">    frame<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    frame<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>非修饰状态下，就只有一个窗口本身了：</p><figure><img src="`+rn+`" alt="image-20221029111107959" tabindex="0" loading="lazy"><figcaption>image-20221029111107959</figcaption></figure><p>并且这个窗口是无法完成拖拽操作的，要实现拖拽还得我们自己编写（太原始了）可以看到，在默认情况下窗口的形状是一个方形的，我们可以将其调整为其他形状：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Frame</span> frame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Frame</span><span class="token punctuation">(</span><span class="token string">&quot;我是窗口&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    frame<span class="token punctuation">.</span><span class="token function">setUndecorated</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    frame<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token comment">//注意，只有窗口在非修饰状态下才能设定形状</span></span>
<span class="line">   <span class="token comment">//这里我们使用圆角矩形，形状最好跟窗口大小一样</span></span>
<span class="line">    frame<span class="token punctuation">.</span><span class="token function">setShape</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RoundRectangle2D<span class="token punctuation">.</span>Double</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    frame<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，我们的窗口变成了这样：</p><figure><img src="`+dn+`" alt="image-20221029111439062" tabindex="0" loading="lazy"><figcaption>image-20221029111439062</figcaption></figure><p>变成了好看的圆角矩形（但是这个圆角处理得不太好，有点毛毛糙糙的）圆角矩形也是现代操作系统窗口的设计语言。</p><p>我们也可以自行为窗口添加标题栏，同样只需要重写一下<code>paint</code>方法自行绘制就可以了：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token class-name">Frame</span> frame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Frame</span><span class="token punctuation">(</span><span class="token string">&quot;我是窗口&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//使用匿名内部类（或者自己写个子类也行）</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">paint</span><span class="token punctuation">(</span><span class="token class-name">Graphics</span> g<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        g<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span><span class="token constant">LIGHT_GRAY</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        g<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//先绘制标题栏</span></span>
<span class="line">        g<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span><span class="token constant">BLACK</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        g<span class="token punctuation">.</span><span class="token function">drawString</span><span class="token punctuation">(</span><span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//绘制标题名称</span></span>
<span class="line">        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">paint</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//原本的绘制别覆盖了，该怎么做还要怎么做</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们来看看效果吧：</p><figure><img src="`+mn+`" alt="image-20221029112035219" tabindex="0" loading="lazy"><figcaption>image-20221029112035219</figcaption></figure><p>是不是感觉不依靠操作系统，我们自己也能写一个好看的窗口出来了？</p><p>只不过这个窗口还不能拖动，我们来实现一下按住标题栏就可以拖动：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line">frame<span class="token punctuation">.</span><span class="token function">addMouseMotionListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MouseMotionAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment">//只需要写一个监听器就可以搞定了</span></span>
<span class="line">    <span class="token keyword">int</span> oldX<span class="token punctuation">,</span> oldY<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mouseDragged</span><span class="token punctuation">(</span><span class="token class-name">MouseEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment">//鼠标拖动时如果是标题栏，就将窗口位置修改</span></span>
<span class="line">        <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">28</span><span class="token punctuation">)</span></span>
<span class="line">            frame<span class="token punctuation">.</span><span class="token function">setLocation</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getXOnScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> oldX<span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getYOnScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> oldY<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mouseMoved</span><span class="token punctuation">(</span><span class="token class-name">MouseEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment">//记录上一次的鼠标位置</span></span>
<span class="line">        oldX <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        oldY <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>至此，有关 AWT 相关的内容，我们就讲解到这里，相信各位小伙伴肯定已经跃跃欲试想要开发一个自己的桌面应用程序了。只不过很遗憾，Java 官方并没有再对 AWT 相关内容进行维护，因为 AWT 采用的是取不同操作系统交集策略，因为有些功能只有部分操作系统才有，这就导致很多功能都被砍掉，维护起来也很困难。下节课开始，我们会继续介绍 Swing 相关组件。</p><h2 id="swing-组件介绍" tabindex="-1"><a class="header-anchor" href="#swing-组件介绍"><span>Swing 组件介绍</span></a></h2><p>前面我们介绍了 AWT，通过 Java 官方为我们提供的 GUI 框架，我们就可以编写出自己的桌面应用程序了，现在各位小伙伴应该已经有着良好的图形化界面开发基础了。</p><p>而 Swing 组件才是我们要学习的重点内容，它也是一套 GUI 框架，但是它是基于 AWT 编写的上层框架。</p><blockquote><p>Swing 是在 AWT 的基础上构建的一套新的图形界面系统，它提供了 AWT 所能够提供的所有功能，并且用纯粹的 Java 代码对 AWT 的功能进行了大幅度的扩充。例如说并不是所有的操作系统都提供了对树形控件的支持， Swing 利用了 AWT 中所提供的基本作图方法对树形控件进行模拟。由于 Swing 控件是用 100%的 Java 代码来实现的，因此在一个平台上设计的树形控件可以在其他平台上使用。由于在 Swing 中没有使用本地方法来实现图形功能，我们通常把 Swing 控件称为轻量级控件。</p></blockquote><p>其实简单来说，这玩意就是 AWT 那一套东西的扩展，或者说是强化版，很多东西还是沿用的 AWT 中的。</p><h3 id="基本使用" tabindex="-1"><a class="header-anchor" href="#基本使用"><span>基本使用</span></a></h3><p>我们来看看如何使用 Swing 编写桌面程序，首先还是最重要的窗口：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">JFrame</span> frame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JFrame</span><span class="token punctuation">(</span><span class="token string">&quot;我是窗口&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//Swing中的窗口叫做JFrame，对应的就是AWT中的Frame</span></span>
<span class="line">    <span class="token comment">//它实际上就是Frame的子类，所以说我们之前怎么用的，现在怎么用就行了</span></span>
<span class="line">    frame<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    frame<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>是不是感觉学会 AWT 之后再看 Swing 也太简单了？</p><p>当然，既然是 AWT 的扩展，那肯定是有更多的新增功能的，比如我们之前想要实现点击 X 号关闭 Java 程序，这里我们只需要使用一个方法就可以设定了，不需要我们自己去写监听器：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token comment">//我们可以直接为窗口设定关闭操作，JFrame已经为我们预设好了一些常用的操作了</span></span>
<span class="line">frame<span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span><span class="token class-name">JFrame</span><span class="token punctuation">.</span><span class="token constant">EXIT_ON_CLOSE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//EXIT_ON_CLOSE就是直接退出程序，默认是只隐藏</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Swing 为我们提供了所有原本 AWT 中的组件的升级版，他们的名字前面都加上了 J，比如按钮组件：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">JFrame</span> frame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JFrame</span><span class="token punctuation">(</span><span class="token string">&quot;我是窗口&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    frame<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">JButton</span> button <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">&quot;Link Start&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//Button组件对应的就是JButton了</span></span>
<span class="line">    button<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    frame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>button<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    frame<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    frame<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Swing 不像 AWT 那样，平台组件长啥样，就用什么，它的组件都是自行绘制的：</p><figure><img src="`+vn+`" alt="image-20221029120313940" tabindex="0" loading="lazy"><figcaption>image-20221029120313940</figcaption></figure><p>这样，我们在不同的平台上，看到的组件 UI 样式，都会是一样的，不会出现长得不一样的情况。并且我们可以为组件自由替换皮肤，我们会在后面进行介绍。</p><p>还有，Swing 在没有设定布局时，组件的坐标原点并不是窗口的左上角，而是窗口标题栏下方的左上角：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token class-name">JFrame</span> frame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JFrame</span><span class="token punctuation">(</span><span class="token string">&quot;我是窗口&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">frame<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">frame<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">frame<span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span><span class="token class-name">WindowConstants</span><span class="token punctuation">.</span><span class="token constant">EXIT_ON_CLOSE</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">JButton</span> button <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">&quot;我是按钮&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">button<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">frame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>button<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">frame<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+gn+`" alt="image-20221105171035570" tabindex="0" loading="lazy"><figcaption>image-20221105171035570</figcaption></figure><p>这一点确实比 AWT 好很多，不然咱都不知道不同平台的标题栏到底是多高。至于为什么是这样，这是因为 JFrame 内部实际上单独维护了一个面板来存放组件，很多操作都被重定向给了内部的面板，这里就不深入说了，知道就行。</p><p>同样的，如果我们要使用菜单，直接使用对应的类即可：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token class-name">JFrame</span> frame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JFrame</span><span class="token punctuation">(</span><span class="token string">&quot;我是窗口&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">JMenuBar</span> bar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JMenuBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//JMenuBar对应的就是MenuBar</span></span>
<span class="line"><span class="token class-name">JMenu</span> menu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JMenu</span><span class="token punctuation">(</span><span class="token string">&quot;我是菜单&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">menu<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JMenuItem</span><span class="token punctuation">(</span><span class="token string">&quot;选项1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">menu<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JMenuItem</span><span class="token punctuation">(</span><span class="token string">&quot;选项2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">bar<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>menu<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">frame<span class="token punctuation">.</span><span class="token function">setJMenuBar</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">frame<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">frame<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个菜单也是 Swing 自己绘制的，如果是 AWT 的话，不同系统菜单位置还不一样，虽然这里是自己画的，但是效果看着还行：</p><figure><img src="`+bn+`" alt="image-20221029120737715" tabindex="0" loading="lazy"><figcaption>image-20221029120737715</figcaption></figure><p>所以，Swing 相关组件在使用上其实和我们之前学习的 AWT 是差不多的，只要前面 AWT 学的没问题，这里简直 So Easy。</p><p>因为 Swing 是沿用的 AWT 框架体系，所以说 AWT 提供的旧组件，也是可以用的，但是这里不推荐：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">JFrame</span> frame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JFrame</span><span class="token punctuation">(</span><span class="token string">&quot;我是窗口&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    frame<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    frame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">&quot;我是按钮&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//可以继续使用AWT组件，但是有新的咱肯定用新的啊</span></span>
<span class="line">    frame<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有关其他组件还请各位小伙伴自行了解。</p><h3 id="新增组件介绍" tabindex="-1"><a class="header-anchor" href="#新增组件介绍"><span>新增组件介绍</span></a></h3><p>Swing 除了强化 AWT 提供的组件之外，还自行实现了各种各样新式的组件，我们来依次介绍一下。</p><p>首先是进度条组件：</p><figure><img src="`+fn+`" alt="image-20221105163846233" tabindex="0" loading="lazy"><figcaption>image-20221105163846233</figcaption></figure><p>很多时候我们都会用到进度条来展示某些任务的完成进度：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token class-name">JProgressBar</span> bar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JProgressBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">bar<span class="token punctuation">.</span><span class="token function">setMaximum</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//设定进度条的最大值</span></span>
<span class="line">bar<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//设定进度值</span></span>
<span class="line">bar<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以利用进度条来写一个很简单的案例，比如文件的拷贝：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token class-name">JProgressBar</span> bar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JProgressBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//进度条显示文件拷贝进度</span></span>
<span class="line">bar<span class="token punctuation">.</span><span class="token function">setMaximum</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">bar<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">JButton</span> button <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">&quot;点击开始&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//点击按钮开始拷贝文件</span></span>
<span class="line">button<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">button<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">//注意，不能直接在这个线程里面处理，因为这个线程是负责图形界面的，得单独创建一个线程处理，否则图形界面会卡死</span></span>
<span class="line">    <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;in.iso&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">FileInputStream</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">FileOutputStream</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">&quot;out.iso&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">long</span> size <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> current <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">int</span> len<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            current <span class="token operator">+=</span> len<span class="token punctuation">;</span></span>
<span class="line">            bar<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>bar<span class="token punctuation">.</span><span class="token function">getMaximum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>current <span class="token operator">/</span> size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//每次拷贝都更新进度条</span></span>
<span class="line">           bar<span class="token punctuation">.</span><span class="token function">repaint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//因为并不是每次更新值都会使得组件重新绘制，如果视觉上比较卡，可以每次拷贝都重新绘制组件</span></span>
<span class="line">            out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> exception<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        exception<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，我们在拷贝文件的时候，就有一个进度条实时显示当前的进度了：</p><figure><img src="`+yn+`" alt="image-20221105165756172" tabindex="0" loading="lazy"><figcaption>image-20221105165756172</figcaption></figure><p>我们接着来看下一个组件，开关按钮：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token class-name">JToggleButton</span> button <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JToggleButton</span><span class="token punctuation">(</span><span class="token string">&quot;我是切换按钮&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//开关按钮有两个状态，一个是开一个是关</span></span>
<span class="line">button<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>它就像：</p><figure><img src="`+wn+'" alt="image-20221105170052200" tabindex="0" loading="lazy"><figcaption>image-20221105170052200</figcaption></figure><p>它有着两个状态，我们点击一次会使得其切换到另一种状态：</p><figure><img src="'+hn+`" alt="image-20221105170125623" tabindex="0" loading="lazy"><figcaption>image-20221105170125623</figcaption></figure><p>还有一些大型组件，比如颜色选择器：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token class-name">JColorChooser</span> chooser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JColorChooser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">chooser<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">600</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>颜色选择器的主要作用顾名思义，就是让用户选择一个颜色：</p><figure><img src="`+jn+'" alt="image-20221105170623359" tabindex="0" loading="lazy"><figcaption>image-20221105170623359</figcaption></figure><p>这个太高级了，看着就很专业。同样的还有文件选择器<code>JFileChooser</code>：</p><figure><img src="'+xn+'" alt="image-20221105170745920" tabindex="0" loading="lazy"><figcaption>image-20221105170745920</figcaption></figure><p>完了，这 Mac 越用咋越像 Windows 了。</p><p>当然，Swing 考虑得不止这些，甚至连工具提示都有，啥是工具提示？</p><figure><img src="'+qn+`" alt="image-20221105171336948" tabindex="0" loading="lazy"><figcaption>image-20221105171336948</figcaption></figure><p>实际上就是当我们鼠标移动到某个组件上时，会给出一个漂浮提示，告诉我们这个组件是干嘛用的。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token class-name">JButton</span> button <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">&quot;我是按钮&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">button<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">button<span class="token punctuation">.</span><span class="token function">setToolTipText</span><span class="token punctuation">(</span><span class="token string">&quot;这个按钮是用来解决你毕设的！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+_n+'" alt="image-20221105171453445" tabindex="0" loading="lazy"><figcaption>image-20221105171453445</figcaption></figure><p><code>setToolTipText</code>方法是<code>JComponent</code>就带有的，因此任何组件都可以设置这样的工具提示，是不是感觉很高级？</p><p>还有文件树，我们经常在窗口中看到这样的：</p><figure><img src="'+Cn+`" alt="image-20221105171728838" tabindex="0" loading="lazy"><figcaption>image-20221105171728838</figcaption></figure><p>我们的文件实际上在硬盘上就是以树形存储的，而 Swing 也为我们提供了能够显示树形关系的组件：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token class-name">JTree</span> tree <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">tree<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+Sn+`" alt="image-20221105171813979" tabindex="0" loading="lazy"><figcaption>image-20221105171813979</figcaption></figure><p>这样，我们就可以用它来做一个文件资源管理器了：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token comment">//这里我们让JTree展示.idea目录下所有文件</span></span>
<span class="line"><span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;.idea&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//这里我们列出.idea目录下所有文件</span></span>
<span class="line"><span class="token class-name">DefaultMutableTreeNode</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMutableTreeNode</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//既然是树形关系，肯定有一个根结点</span></span>
<span class="line"><span class="token comment">//拿到当前目录下所有文件和文件夹</span></span>
<span class="line"><span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElseGet</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">File</span> f <span class="token operator">:</span> files<span class="token punctuation">)</span></span>
<span class="line">    root<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DefaultMutableTreeNode</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//构造子结点并连接</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">JTree</span> tree <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JTree</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//设定默认的根结点</span></span>
<span class="line">tree<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>来看看效果吧：</p><figure><img src="`+Ln+'" alt="image-20221105172802572" tabindex="0" loading="lazy"><figcaption>image-20221105172802572</figcaption></figure><p>你就说有没有内味吧。</p><h3 id="多面板和分割面板" tabindex="-1"><a class="header-anchor" href="#多面板和分割面板"><span>多面板和分割面板</span></a></h3><p>前面我们介绍了 Swing 为我们提供的丰富组件，我们接着来看多面板。</p><figure><img src="'+Bn+`" alt="image-20221105173345221" tabindex="0" loading="lazy"><figcaption>image-20221105173345221</figcaption></figure><p>多面板顾名思义，就是为了在一个窗口中展示多个面板，但是面板是可以自由切换的，在顶部会有一个小小的标签，我们点击之后就可以切换到对应的面板了：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token class-name">JTabbedPane</span> pane <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JTabbedPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">pane<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">pane<span class="token punctuation">.</span><span class="token function">addTab</span><span class="token punctuation">(</span><span class="token string">&quot;一号&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token function">setBackground</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span><span class="token constant">ORANGE</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">pane<span class="token punctuation">.</span><span class="token function">addTab</span><span class="token punctuation">(</span><span class="token string">&quot;二号&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token function">setBackground</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span><span class="token constant">PINK</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>JTabbedPane 跟我们之前认识的 Panel 很像，相当于也是将我们的组件装进了内部，但是它可以同时装很多个，并且支持自由切换，所以说是很高级的。</p><p>这里我们创建两个面板，将一号面板设定为橙色，二号面板设定为粉色，分别添加到里面：</p><figure><img src="`+Tn+`" alt="image-20221105173821177" tabindex="0" loading="lazy"><figcaption>image-20221105173821177</figcaption></figure><p>这样，我们就可以布置一号面板做某些事情，二号面板做另外一些事情了：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token class-name">JTabbedPane</span> pane <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JTabbedPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">pane<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">pane<span class="token punctuation">.</span><span class="token function">addTab</span><span class="token punctuation">(</span><span class="token string">&quot;一号&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">JColorChooser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//一号面板当颜色选择器</span></span>
<span class="line">pane<span class="token punctuation">.</span><span class="token function">addTab</span><span class="token punctuation">(</span><span class="token string">&quot;二号&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">JFileChooser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//二号面板当文件选择器</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>高级感一下就出来了不是：</p><figure><img src="`+Jn+'" alt="image-20221105174105955" tabindex="0" loading="lazy"><figcaption>image-20221105174105955</figcaption></figure><p>除了多面板这样的特殊面板组件之外，我们也可以使用分割面板：</p><figure><img src="'+zn+'" alt="image-20221105174239436" tabindex="0" loading="lazy"><figcaption>image-20221105174239436</figcaption></figure><p>分割面板将一块完整的面板分割为两个部分，这样，我们就可以分别在左右两边进行操作了，而且中间的分割线是可以拖动的，实际上我们的 IDEA 也是这样的：</p><figure><img src="'+In+`" alt="image-20221105174326135" tabindex="0" loading="lazy"><figcaption>image-20221105174326135</figcaption></figure><p>IDEA 的左边是文件管理器，右边就是编辑区域，同样支持拖动中间的分割线，这样的设计是非常人性化的。</p><p>我们来看看如何创建分割面板：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token class-name">JSplitPane</span> pane <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSplitPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">pane<span class="token punctuation">.</span><span class="token function">setOrientation</span><span class="token punctuation">(</span><span class="token class-name">JSplitPane</span><span class="token punctuation">.</span><span class="token constant">HORIZONTAL_SPLIT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//设定为横向分割</span></span>
<span class="line"><span class="token comment">//横向分割之后，我们需要指定左右两边的组件</span></span>
<span class="line">pane<span class="token punctuation">.</span><span class="token function">setLeftComponent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token function">setBackground</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span><span class="token constant">ORANGE</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">pane<span class="token punctuation">.</span><span class="token function">setRightComponent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token function">setBackground</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span><span class="token constant">PINK</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+An+`" alt="image-20221105174609500" tabindex="0" loading="lazy"><figcaption>image-20221105174609500</figcaption></figure><p>配合我们之前的 JTree 组件和 JTextArea 组件，我们也可以写一个简单的 IDEA 软件出来：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token class-name">JTextArea</span> area <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JTextArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//右边就是我们需要编辑的文本域</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;.idea&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">DefaultMutableTreeNode</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMutableTreeNode</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElseGet</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">File</span> f <span class="token operator">:</span> files<span class="token punctuation">)</span></span>
<span class="line">    root<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DefaultMutableTreeNode</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">JTree</span> tree <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JTree</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//左边就是我们的文件树</span></span>
<span class="line">tree<span class="token punctuation">.</span><span class="token function">addTreeSelectionListener</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>   <span class="token comment">//点击文件之后，我们需要变换编辑窗口中的文本内容，这里加个监听器</span></span>
<span class="line">    area<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//先清空</span></span>
<span class="line">    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">FileReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">&quot;.idea/&quot;</span><span class="token operator">+</span>e<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLastPathComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment">//直接开始读取内容</span></span>
<span class="line">        <span class="token keyword">int</span> len<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">            area<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>area<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>chars<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//开始写入到编辑窗口中</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">pane<span class="token punctuation">.</span><span class="token function">setLeftComponent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JScrollPane</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//文件树和编辑区域都套一个滚动面板，因为有可能会撑得很大</span></span>
<span class="line">pane<span class="token punctuation">.</span><span class="token function">setRightComponent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JScrollPane</span><span class="token punctuation">(</span>area<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们来看看我们自己写的 IDEA 软件怎么样吧：</p><figure><img src="`+Fn+`" alt="image-20221105180609195" tabindex="0" loading="lazy"><figcaption>image-20221105180609195</figcaption></figure><p>嗯，真不错，各位小伙伴赶紧去 JetBrains 投简历吧！</p><h3 id="选项窗口" tabindex="-1"><a class="header-anchor" href="#选项窗口"><span>选项窗口</span></a></h3><p>前面我们介绍过对话框，但是 AWT 提供的对话框太过原始，很多功能都需要我们自行实现，而 Swing 为我们提供了一套已经实现好的预设选项对话框，我们只需要直接使用即可。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token class-name">JFrame</span> frame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JFrame</span><span class="token punctuation">(</span><span class="token string">&quot;我是窗口&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">frame<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">frame<span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span><span class="token class-name">WindowConstants</span><span class="token punctuation">.</span><span class="token constant">DO_NOTHING_ON_CLOSE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//先将默认关闭行为设定为什么都不做</span></span>
<span class="line">frame<span class="token punctuation">.</span><span class="token function">addWindowListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WindowAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment">//我们自己来实现窗口关闭行为</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">windowClosing</span><span class="token punctuation">(</span><span class="token class-name">WindowEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment">//这里我们可以直接展示一个预设好的确认对话框</span></span>
<span class="line">        <span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token class-name">JOptionPane</span><span class="token punctuation">.</span><span class="token function">showConfirmDialog</span><span class="token punctuation">(</span>frame<span class="token punctuation">,</span> <span class="token string">&quot;你真的要退出吗？&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span><span class="token punctuation">(</span>value <span class="token operator">==</span> <span class="token class-name">JOptionPane</span><span class="token punctuation">.</span><span class="token constant">OK_OPTION</span><span class="token punctuation">)</span>    <span class="token comment">//返回值就是用户的选择结果，也是预置好的，这里判断如果是OK那么就退出</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们之前要实现这样的一个功能，非常麻烦，但是现在就很简单了：</p><figure><img src="`+On+`" alt="image-20221106162732123" tabindex="0" loading="lazy"><figcaption>image-20221106162732123</figcaption></figure><p>官方已经给我们预设好了一个对话框，我们直接用就可以了。当然，还有各种类型的，我们可以自己定义窗口的标题、图标等：</p><div class="language-java" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token class-name">JOptionPane</span><span class="token punctuation">.</span><span class="token function">showConfirmDialog</span><span class="token punctuation">(</span>frame<span class="token punctuation">,</span> <span class="token string">&quot;你真的要退出吗？&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;退出程序&quot;</span><span class="token punctuation">,</span> <span class="token class-name">JOptionPane</span><span class="token punctuation">.</span><span class="token constant">YES_NO_OPTION</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p>除了这种简单的对话框，Swing 还为我们提供了一些其他类型的对话框，比如单纯的消息提示框：</p><div class="language-java" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token class-name">JOptionPane</span><span class="token punctuation">.</span><span class="token function">showMessageDialog</span><span class="token punctuation">(</span>frame<span class="token punctuation">,</span> <span class="token string">&quot;我是简单的提示消息！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><figure><img src="`+Mn+`" alt="image-20221106165351473" tabindex="0" loading="lazy"><figcaption>image-20221106165351473</figcaption></figure><p>还有用户输入文本的输入对话框：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token class-name">JFrame</span> frame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JFrame</span><span class="token punctuation">(</span><span class="token string">&quot;我是窗口&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">frame<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">frame<span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span><span class="token class-name">WindowConstants</span><span class="token punctuation">.</span><span class="token constant">DO_NOTHING_ON_CLOSE</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">frame<span class="token punctuation">.</span><span class="token function">addWindowListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WindowAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">windowClosing</span><span class="token punctuation">(</span><span class="token class-name">WindowEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token class-name">JOptionPane</span><span class="token punctuation">.</span><span class="token function">showInputDialog</span><span class="token punctuation">(</span><span class="token string">&quot;毕业后的你，将何去何从呢？&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+Wn+`" alt="image-20221106165324954" tabindex="0" loading="lazy"><figcaption>image-20221106165324954</figcaption></figure><p>通过灵活使用这些对话框，用户与我们的交互就更加亲密了。</p><h3 id="自定义主题" tabindex="-1"><a class="header-anchor" href="#自定义主题"><span>自定义主题</span></a></h3><p>Swing 早就考虑到了不同平台可能会出现的组件样式差异，因此推出了皮肤机制。</p><p>就像我们可以给英雄换皮肤一样，我们的组件 UI 也是可以换皮肤的，官方名称叫做 LookAndFeel，Swing 官方为我们提供了很多套皮肤，这些皮肤都是可以跨平台的，当然也有某些平台专属的限定皮肤：</p><ul><li>MetalLookAndFeel - 官方默认皮肤</li><li>WindowsLookAndFeel - Windows 操作系统限定皮肤，其他平台无法使用</li><li>MotifLookAndFeel - 官方皮肤</li><li>NimbusLookAndFeel - 官方皮肤</li><li>AquaLookAndFeel - MacOS 操作系统限定皮肤，其他平台无法使用</li></ul><p>更换皮肤很简单，我们只需要执行一个方法就可以，它是全局生效的：</p><div class="language-java" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token class-name">UIManager</span><span class="token punctuation">.</span><span class="token function">setLookAndFeel</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AquaLookAndFeel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p>这里我们将皮肤设定为 MacOS 的冰雪节限定皮肤 AquaLookAndFeel：</p><figure><img src="`+En+'" alt="image-20221106170921703" tabindex="0" loading="lazy"><figcaption>image-20221106170921703</figcaption></figure><p>是不是感觉视觉上和之前的皮肤不太一样？我们可以多看看其他的皮肤：</p><figure><img src="'+Pn+'" alt="image-20221106171046755" tabindex="0" loading="lazy"><figcaption>image-20221106171046755</figcaption></figure><figure><img src="'+Gn+`" alt="image-20221106171110930" tabindex="0" loading="lazy"><figcaption>image-20221106171110930</figcaption></figure><p>实际上 Swing 组件的绘制并不是由组件本身编写的，而是在各个 UI 实现类中编写的，所以说要修改组件样式只需要更换皮肤即可。</p><p>除了全局设定皮肤之外，我们也可以单独对某些组件设定皮肤，每个组件都有自己的<code>getUI</code>方法，这个方法就是获取当前组件使用的 UI 样式的：</p><div class="language-java" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>tree<span class="token punctuation">.</span><span class="token function">getUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p>这里得到的是：</p><figure><img src="`+Dn+`" alt="image-20221106224348544" tabindex="0" loading="lazy"><figcaption>image-20221106224348544</figcaption></figure><p>我们可以自己编写一个 UI 样式来为组件进行设定：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">TestJButtonUI</span> <span class="token keyword">extends</span> <span class="token class-name">ButtonUI</span> <span class="token punctuation">{</span>   <span class="token comment">//继承对应的UI父类</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">paint</span><span class="token punctuation">(</span><span class="token class-name">Graphics</span> g<span class="token punctuation">,</span> <span class="token class-name">JComponent</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment">//我们只需要重写对应UI的paint方法就可以了</span></span>
<span class="line">        <span class="token keyword">int</span> width <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> height <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        g<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span><span class="token constant">BLACK</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        g<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        g<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span><span class="token constant">WHITE</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">JButton</span> button <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">JButton</span><span class="token punctuation">)</span> c<span class="token punctuation">;</span></span>
<span class="line">        g<span class="token punctuation">.</span><span class="token function">drawString</span><span class="token punctuation">(</span>button<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们只需要使用 set 方法来设定即可：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token class-name">JButton</span> button <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">&quot;我是按钮&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">button<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">button<span class="token punctuation">.</span><span class="token function">setUI</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TestJButtonUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//将UI设定为我们自己定义的即可</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样就换成我们自己的皮肤了：</p><figure><img src="`+Nn+'" alt="image-20221106231437842" tabindex="0" loading="lazy"><figcaption>image-20221106231437842</figcaption></figure><p>各位小伙伴甚至可以编写一套自己的 UI，并制作成一个 LookAndFeel，这样我们写出来的程序就非常个性化了。</p>',445)]))}const Zn=a(Vn,[["render",Rn]]),Kn=JSON.parse('{"path":"/codenotes/java/javagui/swing.html","title":"GUI程序开发 (Swing)","lang":"zh-CN","frontmatter":{"title":"GUI程序开发 (Swing)","icon":"window","category":["Java","GUI","Swing"],"tag":["Java","GUI","Swing","入门"],"sticky":false,"star":false,"article":false,"timeline":false,"description":"提示 课程视频教程链接：https://www.bilibili.com/video/BV1G84y1v7Vj 注意：开始学习之前请确保你完成了《Java SE》篇视频教程。 前面我们已经完成了 JavaSE 部分的全部内容学习，只不过我们在初学阶段一直都是开发的控制台程序，也就是最原始的命令窗口形式的程序，而 Java 也可以开发桌面图形化程序，所以...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"GUI程序开发 (Swing)\\",\\"description\\":\\"提示 课程视频教程链接：https://www.bilibili.com/video/BV1G84y1v7Vj 注意：开始学习之前请确保你完成了《Java SE》篇视频教程。 前面我们已经完成了 JavaSE 部分的全部内容学习，只不过我们在初学阶段一直都是开发的控制台程序，也就是最原始的命令窗口形式的程序，而 Java 也可以开发桌面图形化程序，所以...\\"}"],["meta",{"property":"og:url","content":"https://www.stazxr.cn/my-notes/my-notes/codenotes/java/javagui/swing.html"}],["meta",{"property":"og:site_name","content":"終わり群星の知识宝库"}],["meta",{"property":"og:title","content":"GUI程序开发 (Swing)"}],["meta",{"property":"og:description","content":"提示 课程视频教程链接：https://www.bilibili.com/video/BV1G84y1v7Vj 注意：开始学习之前请确保你完成了《Java SE》篇视频教程。 前面我们已经完成了 JavaSE 部分的全部内容学习，只不过我们在初学阶段一直都是开发的控制台程序，也就是最原始的命令窗口形式的程序，而 Java 也可以开发桌面图形化程序，所以..."}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-10T16:32:49.000Z"}],["meta",{"property":"article:tag","content":"入门"}],["meta",{"property":"article:tag","content":"Swing"}],["meta",{"property":"article:tag","content":"GUI"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:modified_time","content":"2025-06-10T16:32:49.000Z"}]]},"git":{"createdTime":1714921446000,"updatedTime":1749573169000,"contributors":[{"name":"talentestors","username":"talentestors","email":"talentestors@gmail.com","commits":7,"url":"https://github.com/talentestors"}]},"readingTime":{"minutes":50.67,"words":15201},"filePathRelative":"codenotes/java/javagui/swing.md","autoDesc":true}');export{Zn as comp,Kn as data};
