import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{ah as p,ap as e,ai as t}from"./app-CAqLFJSb.js";const l="/my-notes/assets/image-20211220165805138-979042b3-5fDXhpjs.png",c="/my-notes/assets/image-20211220170035786-a15af40b-CzDsiM-s.png",o="/my-notes/assets/image-20211220170059944-8c680e3a-BrhPRle3.png",i="/my-notes/assets/image-20211220170120693-cd6f14ac-DtKxSMHU.png",u="/my-notes/assets/image-20211220170144820-c1013bce-qwOGxPHl.png",r="/my-notes/assets/image-20211220170201094-a890a24e-CnXtJT8V.png",d="/my-notes/assets/image-20211220170222829-e53bf18c-uuqCaPNZ.png",k="/my-notes/assets/image-20211220170240311-9429aa17-DmPKC5v2.png",s="/my-notes/assets/image-20211220170256901-96dfa01b-CpkM13oT.png",m="/my-notes/assets/image-20211220170309302-9aa09c8c-BXpCUn_7.png",v="/my-notes/assets/image-20211220170330013-ffd0a919-BwQvkc_T.png",g="/my-notes/assets/image-20211220170344605-a72fc2c9-Czf0mWhb.png",b="/my-notes/assets/image-20211220170400682-9348cf93-oJEidc-_.png",h="/my-notes/assets/image-20211220170415040-dcb1ec09-fr9kPliq.png",y="/my-notes/assets/image-20211220170435812-5072090f-D4Zj90EX.png",f="/my-notes/assets/image-20211220170517934-ad55f5ba-Cq6YD3ZJ.png",w="/my-notes/assets/image-20211220170545792-3a183e10-Dw_V1npa.png",_="/my-notes/assets/image-20211220170600963-a48f0134-DPJ-PRS7.png",T="/my-notes/assets/image-20211220170616147-715b9ce0-BskQ_K55.png",x="/my-notes/assets/image-20211220170631437-ec509a1e-ndUqKxzs.png",N={};function z(B,n){return t(),p("div",null,n[0]||(n[0]=[e('<blockquote><p><strong>树</strong>是数据结构中的重中之重，尤其以各类二叉树为学习的难点。</p><p>数据结构可视化的网站：<a href="https://www.cs.usfca.edu/~galles/visualization/Algorithms.html" target="_blank" rel="noopener noreferrer">https://www.cs.usfca.edu/~galles/visualization/Algorithms.html</a></p></blockquote><h2 id="一、重点概念" tabindex="-1"><a class="header-anchor" href="#一、重点概念"><span>一、重点概念</span></a></h2><h3 id="_1-1-结点概念" tabindex="-1"><a class="header-anchor" href="#_1-1-结点概念"><span>1.1 结点概念</span></a></h3><p><strong>结点</strong>是数据结构中的基础，是构成复杂数据结构的基本组成单位。</p><h3 id="_1-2-树结点声明" tabindex="-1"><a class="header-anchor" href="#_1-2-树结点声明"><span>1.2 树结点声明</span></a></h3><p>本系列文章中提及的结点专指树的结点。</p><h2 id="二、-树" tabindex="-1"><a class="header-anchor" href="#二、-树"><span>二、 树</span></a></h2><h3 id="_2-1-定义" tabindex="-1"><a class="header-anchor" href="#_2-1-定义"><span>2.1 定义</span></a></h3><p>**树（Tree）**是 n（n&gt;=0)个结点的有限集。n=0 时称为空树。在任意一颗非空树中： 1）有且仅有一个特定的称为根（Root）的结点； 2）当 n&gt;1 时，其余结点可分为 m(m&gt;0)个互不相交的有限集 T1、T2、......、Tn，其中每一个集合本身又是一棵树，并且称为根的子树。</p><p>此外，树的定义还需要强调以下两点： 1）根结点是唯一的，不可能存在多个根结点，数据结构中的树只能有一个根结点。 2）子树的个数没有限制，但它们一定是互不相交的。</p><p>示例树： 下图为一棵普通的树：</p><figure><img src="'+l+'" alt="图2.1 普通树" tabindex="0" loading="lazy"><figcaption>图2.1 普通树</figcaption></figure><p>由树的定义可以看出，树的定义使用了递归的方式。递归在树的学习过程中起着重要作用，如果对于递归不是十分了解，建议先看看<a href="https://blog.csdn.net/feizaosyuacm/article/details/54919389" target="_blank" rel="noopener noreferrer">递归算法</a></p><h3 id="_2-2-结点的度" tabindex="-1"><a class="header-anchor" href="#_2-2-结点的度"><span>2.2 结点的度</span></a></h3><p>结点拥有的子树数目称为结点的<strong>度</strong>。</p><figure><img src="'+c+'" alt="image-20211220170035786" tabindex="0" loading="lazy"><figcaption>image-20211220170035786</figcaption></figure><h3 id="_2-3-结点关系" tabindex="-1"><a class="header-anchor" href="#_2-3-结点关系"><span>2.3 结点关系</span></a></h3><p>结点子树的根结点为该结点的<strong>孩子结点</strong>。相应该结点称为孩子结点的<strong>双亲结点</strong>（父节点）。 图 2.2 中，A 为 B 的双亲结点，B 为 A 的孩子结点。 同一个双亲结点的孩子结点之间互称<strong>兄弟结点</strong>。 图 2.2 中，结点 B 与结点 C 互为兄弟结点。</p><h3 id="_2-4-结点层次" tabindex="-1"><a class="header-anchor" href="#_2-4-结点层次"><span>2.4 结点层次</span></a></h3><p>从根开始定义起，根为第一层，根的孩子为第二层，以此类推。 图 2.3 表示了图 2.1 所示树的层次关系</p><figure><img src="'+o+'" alt="image-20211220170059944" tabindex="0" loading="lazy"><figcaption>image-20211220170059944</figcaption></figure><h3 id="_2-5-树的深度" tabindex="-1"><a class="header-anchor" href="#_2-5-树的深度"><span>2.5 树的深度</span></a></h3><p>树中结点的最大层次数称为树的深度或高度。图 2.1 所示树的深度为 4。</p><h2 id="三、-二叉树" tabindex="-1"><a class="header-anchor" href="#三、-二叉树"><span>三、 二叉树</span></a></h2><h3 id="_3-1-定义" tabindex="-1"><a class="header-anchor" href="#_3-1-定义"><span>3.1 定义</span></a></h3><p><strong>二叉树</strong>是 n(n&gt;=0)个结点的有限集合，该集合或者为空集（称为空二叉树），或者由一个根结点和两棵互不相交的、分别称为根结点的左子树和右子树组成。 图 3.1 展示了一棵普通二叉树：</p><figure><img src="'+i+'" alt="image-20211220170120693" tabindex="0" loading="lazy"><figcaption>image-20211220170120693</figcaption></figure><h3 id="_3-2-二叉树特点" tabindex="-1"><a class="header-anchor" href="#_3-2-二叉树特点"><span>3.2 二叉树特点</span></a></h3><p>由二叉树定义以及图示分析得出二叉树有以下特点：</p><ul><li>1）每个结点最多有两棵子树，所以二叉树中不存在度大于 2 的结点。</li><li>2）左子树和右子树是有顺序的，次序不能任意颠倒。</li><li>3）即使树中某结点只有一棵子树，也要区分它是左子树还是右子树。</li></ul><h3 id="_3-3-二叉树性质" tabindex="-1"><a class="header-anchor" href="#_3-3-二叉树性质"><span>3.3 二叉树性质</span></a></h3><ul><li>1）在二叉树的第 i 层上最多有 $2^i-1$ 个节点 。（i&gt;=1）</li><li>2）二叉树中如果深度为 k,那么最多有$2^k-1$个节点。(k&gt;=1）</li><li>3）$n0=n2+1$ ，$n0$表示度数为 0 的节点数，$n2$表示度数为 2 的节点数。</li><li>4）在完全二叉树中，具有 n 个节点的完全二叉树的深度为$[\\log_2 n]+1$，其中$[\\log_2 n]$是向下取整。</li><li>5）若对含 n 个结点的完全二叉树从上到下且从左至右进行 1 至 n 的编号，则对完全二叉树中任意一个编号为 i 的结点有如下特性：</li></ul><blockquote><ol><li>若 i=1，则该结点是二叉树的根，无双亲, 否则，编号为 [i/2] 的结点为其双亲结点;</li><li>若 2i&gt;n，则该结点无左孩子结点， 否则，编号为 2i 的结点为其左孩子结点；</li><li>若 2i+1&gt;n，则该结点无右孩子结点， 否则，编号为 2i+1 的结点为其右孩子结点。</li></ol></blockquote><h3 id="_3-4-斜树" tabindex="-1"><a class="header-anchor" href="#_3-4-斜树"><span>3.4 斜树</span></a></h3><p><strong>斜树</strong>：所有的结点都只有左子树的二叉树叫左斜树。所有结点都是只有右子树的二叉树叫右斜树。这两者统称为斜树。</p><figure><img src="'+u+'" alt="图3.2 左斜树" tabindex="0" loading="lazy"><figcaption>图3.2 左斜树</figcaption></figure><figure><img src="'+r+'" alt="图3.3 右斜树" tabindex="0" loading="lazy"><figcaption>图3.3 右斜树</figcaption></figure><h3 id="_3-5-满二叉树" tabindex="-1"><a class="header-anchor" href="#_3-5-满二叉树"><span>3.5 满二叉树</span></a></h3><p><strong>满二叉树</strong>：在一棵二叉树中。如果所有分支结点都存在左子树和右子树，并且所有叶子都在同一层上，这样的二叉树称为满二叉树。 满二叉树的特点有：</p><ul><li>1）叶子只能出现在最下一层。出现在其它层就不可能达成平衡。</li><li>2）非叶子结点的度一定是 2。</li><li>3）在同样深度的二叉树中，满二叉树的结点个数最多，叶子数最多。</li></ul><figure><img src="'+d+'" alt="图3.4 满二叉树" tabindex="0" loading="lazy"><figcaption>图3.4 满二叉树</figcaption></figure><h3 id="_3-6-完全二叉树" tabindex="-1"><a class="header-anchor" href="#_3-6-完全二叉树"><span>3.6 完全二叉树</span></a></h3><p><strong>完全二叉树</strong>：对一颗具有 n 个结点的二叉树按层编号，如果编号为 i(1&lt;=i&lt;=n)的结点与同样深度的满二叉树中编号为 i 的结点在二叉树中位置完全相同，则这棵二叉树称为完全二叉树。 图 3.5 展示一棵完全二叉树</p><figure><img src="'+k+'" alt="图3.5 完全二叉树" tabindex="0" loading="lazy"><figcaption>图3.5 完全二叉树</figcaption></figure><p><strong>特点</strong>：</p><ul><li>1）叶子结点只能出现在最下层和次下层。</li><li>2）最下层的叶子结点集中在树的左部。</li><li>3）倒数第二层若存在叶子结点，一定在右部连续位置。</li><li>4）如果结点度为 1，则该结点只有左孩子，即没有右子树。</li><li>5）同样结点数目的二叉树，完全二叉树深度最小。 <strong>注</strong>：满二叉树一定是完全二叉树，但反过来不一定成立。</li></ul><h3 id="_3-7-二叉树的存储结构" tabindex="-1"><a class="header-anchor" href="#_3-7-二叉树的存储结构"><span>3.7 二叉树的存储结构</span></a></h3><h4 id="_3-7-1-顺序存储" tabindex="-1"><a class="header-anchor" href="#_3-7-1-顺序存储"><span>3.7.1 顺序存储</span></a></h4><p>二叉树的顺序存储结构就是使用一维数组存储二叉树中的结点，并且结点的存储位置，就是数组的下标索引。</p><figure><img src="'+s+'" alt="图3.6" tabindex="0" loading="lazy"><figcaption>图3.6</figcaption></figure><p>所示的一棵完全二叉树采用顺序存储方式，如图 3.7 表示：</p><figure><img src="'+m+'" alt="图3.7" tabindex="0" loading="lazy"><figcaption>图3.7</figcaption></figure><p>顺序存储</p><p>由图可以看出，当二叉树为完全二叉树时，结点数刚好填满数组。 那么当二叉树不为完全二叉树时，采用顺序存储形式如何呢？例如：对于图 3.8 描述的二叉树：</p><figure><img src="'+v+'" alt="图3.8" tabindex="0" loading="lazy"><figcaption>图3.8</figcaption></figure><p>其中浅色结点表示结点不存在。那么图 3.8 所示的二叉树的顺序存储结构如图 3.9 所示：</p><figure><img src="'+g+'" alt="图3.9" tabindex="0" loading="lazy"><figcaption>图3.9</figcaption></figure><p>其中，<code>∧</code>表示数组中此位置没有存储结点。此时可以发现，顺序存储结构中已经出现了空间浪费的情况。 那么对于图 3.3 所示的右斜树极端情况对应的顺序存储结构如图 3.10 所示：</p><figure><img src="'+b+'" alt="图3.10" tabindex="0" loading="lazy"><figcaption>图3.10</figcaption></figure><p>可以看出，对于这种右斜树极端情况，采用顺序存储的方式是十分浪费空间的。因此，顺序存储一般适用于完全二叉树。</p><h4 id="_3-7-2-二叉链表" tabindex="-1"><a class="header-anchor" href="#_3-7-2-二叉链表"><span>3.7.2 二叉链表</span></a></h4><p>既然顺序存储不能满足二叉树的存储需求，那么考虑采用链式存储。由二叉树定义可知，二叉树的每个结点最多有两个孩子。因此，可以将结点数据结构定义为一个数据和两个指针域。表示方式如图 3.11 所示：</p><figure><img src="'+h+`" alt="图3.11" tabindex="0" loading="lazy"><figcaption>图3.11</figcaption></figure><p>定义结点代码：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token class-name">Node</span> <span class="token class-name">TreeNode</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">T</span> data<span class="token punctuation">;</span> <span class="token comment">// 数据</span></span>
<span class="line">    <span class="token class-name">TreeNode</span> left<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">TreeNode</span> right<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>则图 3.6 所示的二叉树可以采用图 3.12 表示。</p><figure><img src="`+y+'" alt="图3.12" tabindex="0" loading="lazy"><figcaption>图3.12</figcaption></figure><p>图 3.12 中采用一种链表结构存储二叉树，这种链表称为二叉链表。</p><h3 id="_3-8-二叉树遍历" tabindex="-1"><a class="header-anchor" href="#_3-8-二叉树遍历"><span>3.8 二叉树遍历</span></a></h3><p>二叉树的遍历一个重点考查的知识点。</p><h4 id="_3-8-1-定义" tabindex="-1"><a class="header-anchor" href="#_3-8-1-定义"><span>3.8.1 定义</span></a></h4><p><strong>二叉树的遍历</strong>是指从二叉树的根结点出发，按照某种次序依次访问二叉树中的所有结点，使得每个结点被访问一次，且仅被访问一次。 二叉树的访问次序可以分为四种：</p><p>首先了解一下<strong>递归遍历</strong></p><p>由上自下，从左到右</p><p>每个节点会走三次。</p><h4 id="_3-8-2-前序遍历" tabindex="-1"><a class="header-anchor" href="#_3-8-2-前序遍历"><span>3.8.2 前序遍历</span></a></h4><p><strong>前序遍历</strong>通俗的说就是从二叉树的根结点出发，当第一次到达结点时就输出结点数据，按照先向左在向右的方向访问。</p><figure><img src="'+s+`" alt="图3.13" tabindex="0" loading="lazy"><figcaption>图3.13</figcaption></figure><p>如图所示二叉树访问如下： 先序遍历的结果: <strong>ABDHIEJCFG</strong></p><h4 id="_3-8-3-中序遍历" tabindex="-1"><a class="header-anchor" href="#_3-8-3-中序遍历"><span>3.8.3 中序遍历</span></a></h4><p><strong>中序遍历</strong>就是从二叉树的根结点出发，当第二次到达结点时就输出结点数据，按照先向左再向右的方向访问。</p><p>中序遍历输出为：<strong>HDIBJEAFCG</strong></p><h4 id="_3-8-4-后序遍历" tabindex="-1"><a class="header-anchor" href="#_3-8-4-后序遍历"><span>3.8.4 后序遍历</span></a></h4><p><strong>后序遍历</strong>就是从二叉树的根结点出发，当第三次到达结点时就输出结点数据，按照先向左再向右的方向访问。</p><p>后序遍历输出为：<strong>HIDJEBFGCA</strong></p><h4 id="_3-8-5-层次遍历" tabindex="-1"><a class="header-anchor" href="#_3-8-5-层次遍历"><span>3.8.5 层次遍历</span></a></h4><p>层次遍历就是按照树的层次自上而下的遍历二叉树。针对图 3.13 所示二叉树的层次遍历结果为： <strong>ABCDEFGHIJ</strong> 层次遍历的详细方法可以参考<a href="https://blog.csdn.net/lingchen2348/article/details/52774535" target="_blank" rel="noopener noreferrer">二叉树的按层遍历法</a>。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RecursiveBinaryTree</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">public</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">public</span> <span class="token class-name">Node</span> left<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">public</span> <span class="token class-name">Node</span> right<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            value <span class="token operator">=</span> v<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 先序打印所有节点</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">Preorder</span><span class="token punctuation">(</span><span class="token class-name">Node</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">Preorder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">Preorder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">Inorder</span><span class="token punctuation">(</span><span class="token class-name">Node</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token class-name">Inorder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">Inorder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">Postorder</span><span class="token punctuation">(</span><span class="token class-name">Node</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token class-name">Postorder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">Postorder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Node</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        root<span class="token punctuation">.</span>left<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        root<span class="token punctuation">.</span>left<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        root<span class="token punctuation">.</span>right<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        root<span class="token punctuation">.</span>right<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">Preorder</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;====先序遍历====&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">Inorder</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;====中序遍历====&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">Postorder</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;====后续遍历====&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不用递归，用栈实现先序，效率高一点</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UnRecursiveBinaryTree</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">public</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">public</span> <span class="token class-name">Node</span> left<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">public</span> <span class="token class-name">Node</span> right<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   value <span class="token operator">=</span> v<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">pre</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;pre-order: &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">&gt;</span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">   stack<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    head <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">     stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">     stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四、其他的树的分类" tabindex="-1"><a class="header-anchor" href="#四、其他的树的分类"><span>四、其他的树的分类</span></a></h2><h3 id="_4-1-二叉查找树-又叫做二叉搜索树-二叉排序树" tabindex="-1"><a class="header-anchor" href="#_4-1-二叉查找树-又叫做二叉搜索树-二叉排序树"><span><strong>4.1 二叉查找树（又叫做二叉搜索树，二叉排序树）</strong></span></a></h3><p>特征：</p><ol><li>若左子树不为空，那么左子树所有节点的值小于均小于他的根节点的值。</li><li>若右子树不为空，那么右子树的所有节点的值大于根节点的值。</li><li>左右子树也分别为二叉排序树。</li><li>没有键值相等的节点。</li></ol><figure><img src="`+f+`" alt="图a" tabindex="0" loading="lazy"><figcaption>图a</figcaption></figure><p><strong>二叉排序树查找操作</strong></p><p>首先我们提供一个二叉树的结构。</p><p>然后我们来看看二叉排序树的查找是如何实现的</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BinaryTree</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 主要是表达查询，所以手动构造一棵二叉排序树</span></span>
<span class="line">        <span class="token class-name">TreeNode</span> binaryTree1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token number">62</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">TreeNode</span> binaryTree2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token number">58</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        binaryTree1<span class="token punctuation">.</span>lchild <span class="token operator">=</span> binaryTree2<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">TreeNode</span> binaryTree3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token number">47</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        binaryTree2<span class="token punctuation">.</span>lchild <span class="token operator">=</span> binaryTree3<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">TreeNode</span> binaryTree4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token number">35</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        binaryTree3<span class="token punctuation">.</span>lchild <span class="token operator">=</span> binaryTree4<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">TreeNode</span> binaryTree5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token number">37</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        binaryTree4<span class="token punctuation">.</span>rchild <span class="token operator">=</span> binaryTree5<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">TreeNode</span> binaryTree6 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token number">51</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        binaryTree3<span class="token punctuation">.</span>rchild <span class="token operator">=</span> binaryTree6<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">TreeNode</span> binaryTree7 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token number">88</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        binaryTree1<span class="token punctuation">.</span>rchild <span class="token operator">=</span> binaryTree7<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">TreeNode</span> binaryTree8 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token number">88</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        binaryTree7<span class="token punctuation">.</span>lchild <span class="token operator">=</span> binaryTree8<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">TreeNode</span> binaryTree9 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        binaryTree7<span class="token punctuation">.</span>rchild <span class="token operator">=</span> binaryTree9<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">TreeNode</span> binaryTree10 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token number">93</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        binaryTree9<span class="token punctuation">.</span>lchild <span class="token operator">=</span> binaryTree10<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">TreeNode</span> treeNode <span class="token operator">=</span> <span class="token function">searchBinaryTree</span><span class="token punctuation">(</span>binaryTree1<span class="token punctuation">,</span> <span class="token number">35000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>treeNode <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token string">&quot;没有这个数&quot;</span> <span class="token operator">:</span> treeNode<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 二叉排序树</span>
<span class="line">     *</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token parameter">root</span>   待查询的二叉排序树</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token parameter">target</span> 查找关键字</span>
<span class="line">     * <span class="token keyword">@return</span> 没有返回null，有则返回节点</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">TreeNode</span> <span class="token function">searchBinaryTree</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 树节点不存在，返回</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">==</span> root<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 查找成功</span></span>
<span class="line">            <span class="token keyword">return</span> root<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">&lt;</span> root<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 关键字小于根节点查找左子树</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token function">searchBinaryTree</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>lchild<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// 关键字大于根节点查找右子树</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token function">searchBinaryTree</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>rchild<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 二叉树，数据结构</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">TreeNode</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">int</span> data<span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">TreeNode</span> lchild<span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">TreeNode</span> rchild<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">public</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">public</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-平衡二叉树-avl-树" tabindex="-1"><a class="header-anchor" href="#_4-2-平衡二叉树-avl-树"><span><strong>4.2 平衡二叉树（AVL 树）</strong></span></a></h3><p>含有相同节点的二叉查找树可以有不同的形态，而二叉查找树的平均查找长度与树的深度有关，所以需要找出一个查找平均长度最小的一棵，那就是平衡二叉树（图 b），具有以下性质：</p><ol><li>要么是棵空树，要么其根节点左右子树的深度之差的绝对值不超过 1；</li><li>其左右子树也都是平衡二叉树；</li><li>二叉树节点的平衡因子定义为该节点的左子树的深度减去右子树的深度。则平衡二叉树的所有节点的平衡因子只可能是-1,0,1。</li></ol><figure><img src="`+w+'" alt="图b" tabindex="0" loading="lazy"><figcaption>图b</figcaption></figure><h3 id="_4-3-红黑树" tabindex="-1"><a class="header-anchor" href="#_4-3-红黑树"><span><strong>4.3 红黑树</strong></span></a></h3><p>红黑树是一种自平衡二叉树，在<strong>平衡二叉树的基础上每个节点又增加了一个颜色的属性</strong>，节点的颜色只能是红色或黑色。具有以下性质：</p><ol><li>根节点只能是黑色；</li><li>红黑树中所有的叶子节点后面再接上左右两个空节点，这样可以保持算法的一致性，而且所有的空节点都是黑色；</li><li>其他的节点要么是红色，要么是黑色，红色节点的父节点和左右孩子节点都是黑色，及黑红相间；</li><li>在任何一棵子树中，从根节点向下走到空节点的路径上<strong>所经过的黑节点的数目相同</strong>，从而保证了是一个平衡二叉树。</li></ol><figure><img src="'+_+'" alt="图c" tabindex="0" loading="lazy"><figcaption>图c</figcaption></figure><h3 id="_4-4-b-树-也叫-b-树" tabindex="-1"><a class="header-anchor" href="#_4-4-b-树-也叫-b-树"><span><strong>4.4 B-树（也叫 B 树）</strong></span></a></h3><p>B-树是一种平衡多路查找树，它在文件系统中很有用。一棵 m 阶 B-树（图 d 为 4 阶 B-树），具有下列性质：</p><ol><li>树中每个节点至多有 m 棵子树；</li><li>若根节点不是叶子节点，则至少有 2 棵子树；</li><li>除根节点之外的所有非终端节点至少有$\\lceil m/2 \\rceil$棵子树；</li><li>每个节点中的信息结构为（A0,K1,A1,K2......Kn,An），其中$n$表示关键字个数，$Ki$为关键字，$Ai$为指针；</li><li>所有的<strong>叶子节点都出现在同一层次上</strong>，且不带任何信息，也是为了保持算法的一致性。</li></ol><figure><img src="'+T+'" alt="图d" tabindex="0" loading="lazy"><figcaption>图d</figcaption></figure><h3 id="_4-5-b-树" tabindex="-1"><a class="header-anchor" href="#_4-5-b-树"><span><strong>4.5 B+树</strong></span></a></h3><p>B+数是 B-树的一种变形，它与 B-树的差别在于（图 e 为 3 阶 B+树）：</p><ol><li>有 n 棵子树的节点含有 n 个关键字；</li><li>所有的叶子节点包含了全部关键字的信息，及指向这些关键字记录的指针，<strong>且叶子节点本身按关键字大小自小到大顺序链接</strong>；</li><li>所有非终端节点可以看成是索引部分，节点中仅含有其子树（根节点）中最大（或最小）关键字，所有 B+树更像一个索引顺序表；</li><li>对 B+树进行查找运算，一是从最小关键字起进行顺序查找，二是从根节点开始，进行随机查找。</li></ol><figure><img src="'+x+'" alt="图e" tabindex="0" loading="lazy"><figcaption>图e</figcaption></figure>',115)]))}const q=a(N,[["render",z]]),A=JSON.parse('{"path":"/codenotes/java/javase/%E6%A0%91.html","title":"数据结构--树","lang":"zh-CN","frontmatter":{"title":"数据结构--树","icon":"tree","category":["javase","数据结构","树"],"tag":["javase","数据结构","树"],"sticky":false,"star":false,"article":false,"order":9,"timeline":false,"description":"树是数据结构中的重中之重，尤其以各类二叉树为学习的难点。 数据结构可视化的网站：https://www.cs.usfca.edu/~galles/visualization/Algorithms.html 一、重点概念 1.1 结点概念 结点是数据结构中的基础，是构成复杂数据结构的基本组成单位。 1.2 树结点声明 本系列文章中提及的结点专指树的结点。...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"数据结构--树\\",\\"description\\":\\"树是数据结构中的重中之重，尤其以各类二叉树为学习的难点。 数据结构可视化的网站：https://www.cs.usfca.edu/~galles/visualization/Algorithms.html 一、重点概念 1.1 结点概念 结点是数据结构中的基础，是构成复杂数据结构的基本组成单位。 1.2 树结点声明 本系列文章中提及的结点专指树的结点。...\\"}"],["meta",{"property":"og:url","content":"https://www.stazxr.cn/my-notes/my-notes/codenotes/java/javase/%E6%A0%91.html"}],["meta",{"property":"og:site_name","content":"終わり群星の知识宝库"}],["meta",{"property":"og:title","content":"数据结构--树"}],["meta",{"property":"og:description","content":"树是数据结构中的重中之重，尤其以各类二叉树为学习的难点。 数据结构可视化的网站：https://www.cs.usfca.edu/~galles/visualization/Algorithms.html 一、重点概念 1.1 结点概念 结点是数据结构中的基础，是构成复杂数据结构的基本组成单位。 1.2 树结点声明 本系列文章中提及的结点专指树的结点。..."}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-26T05:21:52.000Z"}],["meta",{"property":"article:tag","content":"树"}],["meta",{"property":"article:tag","content":"数据结构"}],["meta",{"property":"article:tag","content":"javase"}],["meta",{"property":"article:modified_time","content":"2025-05-26T05:21:52.000Z"}]]},"git":{"createdTime":1714921446000,"updatedTime":1748236912000,"contributors":[{"name":"talentestors","username":"talentestors","email":"talentestors@gmail.com","commits":6,"url":"https://github.com/talentestors"}]},"readingTime":{"minutes":12.73,"words":3818},"filePathRelative":"codenotes/java/javase/树.md","autoDesc":true}');export{q as comp,A as data};
