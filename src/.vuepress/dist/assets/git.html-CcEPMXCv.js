import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{ah as i,ap as p,ai as l}from"./app-CAqLFJSb.js";const t="/my-notes/assets/areas-ef38e741-BY0ZXSzm.png",c="/my-notes/assets/image-20210316212457416-62bfdc2a-BST8ZZuB.png",o="/my-notes/assets/image-20210316214437985-2956454f-Bpav_ImP.png",r="/my-notes/assets/image-20210316221252036-21f2b3f7-DjOxyWK9.png",d="/my-notes/assets/image-20210316221845292-8f628f66-DU-p6QYq.png",u="/my-notes/assets/image-20210315100125472-29dec56b-yTFZtvlc.png",m="/my-notes/assets/image-20210315100412732-4620ac19-Cs7QDCxN.png",g="/my-notes/assets/image-20210316223001173-3b39b549-D0TT8KeY.png",b="/my-notes/assets/image-20210316141240499-a40a7b38-Bn6RBaJt.png",v="/my-notes/assets/image-20210316141308572-271089e2-DEh-cHo2.png",k="/my-notes/assets/image-20210316141401006-19f8e475-B5Kn-xNp.png",h="/my-notes/assets/image-20210316142109047-35dd766c-D_iH1-ht.png",f="/my-notes/assets/image-20210316142040365-8bbc87fb-BldwOcAL.png",y="/my-notes/assets/image-20210316142303377-bbfde513-C1tI5M0C.png",x="/my-notes/assets/image-20210316142318619-b069e8c7-C9OEDLJE.png",_="/my-notes/assets/image-20210316142705234-0bcef3c6-BQzyKFa4.png",q="/my-notes/assets/image-20210316143811271-330f6ba6-BLo1_ixN.png",D="/my-notes/assets/image-20210316143923380-bf0502e4-BujEp7vb.png",G="/my-notes/assets/image-20210316144205201-d0096190-C2556cvF.png",S="/my-notes/assets/image-20210316144308897-2002da30-CwgX9UGk.png",w="/my-notes/assets/image-20210316144512234-10cc368d-CjDHIuLv.png",O="/my-notes/assets/image-20210316144809258-c175de5a-BnHdlwCF.png",E="/my-notes/assets/image-20210316144902740-193b760b-CQY73Sms.png",j="/my-notes/assets/image-20210316144940684-1e4cb7d5-BqIvpddX.png",H="/my-notes/assets/image-20210316145026969-8e809286-DYCH3DeQ.png",$="/my-notes/assets/image-20210316145048834-231f716d-DNwSyqZP.png",T="/my-notes/assets/image-20210316145150233-3a655df0-ChhP4vda.png",L="/my-notes/assets/image-20210316145202029-76d92ba6-DGDBYCfP.png",B="/my-notes/assets/image-20210316154759831-f5926af7-BvNBksLs.png",z="/my-notes/assets/170141_5aa5bc98_551147-5983bb6e-Ijy5LHaO.png",R="/my-notes/assets/233212_29a62378_551147-9d04d8e4-DiuyHeqU.png",A="/my-notes/assets/170837_4c5ef029_551147-20915a65-1S0RYBar.png",M="/my-notes/assets/image-20210316173317900-2bdba5d1-BG2N2Xgo.png",P="/my-notes/assets/image-20210318143710841-89588c83-Bm78M5yX.png",n="/my-notes/assets/image-20210316161344242-99345513-DcUeAlXv.png",a="/my-notes/assets/image-20210316161514694-f908097f-DKrm2R3v.png",N="/my-notes/assets/image-20210316162346682-01561211-CV2tTzHa.png",I="/my-notes/assets/image-20210318145518474-724ffea0-CauwCuK2.png",C="/my-notes/assets/image-20210316162529369-89eebb82-DjVOswR9.png",K="/my-notes/assets/image-20210316162711300-794ee557-Cvluj4oR.png",W="/my-notes/assets/image-20210316162936698-574f16d7-CgXv51Gj.png",F="/my-notes/assets/image-20210316162907857-f8f42c87-BnTEP2SU.png",U="/my-notes/assets/image-20210316163025733-a57acff5-By8mC-8U.png",X="/my-notes/assets/image-20210316163045014-dfa44fbe-D3dWmlmF.png",Y="/my-notes/assets/image-20210316163136823-925f94dd-Ci7fS06c.png",Q={};function Z(J,s){return l(),i("div",null,s[0]||(s[0]=[p(`<h2 id="第一章-git-安装" tabindex="-1"><a class="header-anchor" href="#第一章-git-安装"><span>第一章 Git 安装</span></a></h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>相关网站和文章：</p><p><a href="https://www.bookstack.cn/books/pro-git2" target="_blank" rel="noopener noreferrer">《Pro Git 中文版(第二版)》 - 书栈网 · BookStack</a></p><p><a href="https://git-scm.com/book/zh/v2" target="_blank" rel="noopener noreferrer">https://git-scm.com/book/zh/v2</a></p><p><a href="https://liaoxuefeng.com/books/git/introduction/index.html" target="_blank" rel="noopener noreferrer">Git 教程 - 廖雪峰的官方网站</a></p><p><a href="https://marklodato.github.io/visual-git-guide/index-zh-cn.html" target="_blank" rel="noopener noreferrer">图解 Git</a></p></div><p>windows 安装：进入网站 <a href="https://git-scm.com/" target="_blank" rel="noopener noreferrer">https://git-scm.com/</a> 下载安装，然后在 cmd 命令行配置</p><p>还可以去清华源上下载！<a href="https://mirrors.tuna.tsinghua.edu.cn" target="_blank" rel="noopener noreferrer">https://mirrors.tuna.tsinghua.edu.cn</a></p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token operator">&gt;</span> <span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">&quot;talentestors&quot;</span></span>
<span class="line"><span class="token operator">&gt;</span> <span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">&quot;talentestors@gmail.com&quot;</span></span>
<span class="line"><span class="token comment">#检查信息是否写入成功</span></span>
<span class="line"><span class="token function">git</span> config <span class="token parameter variable">--list</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以直接修改配置文件（我的配置如下）</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token punctuation">[</span>user<span class="token punctuation">]</span></span>
<span class="line">    name <span class="token operator">=</span> talentestors</span>
<span class="line">    email <span class="token operator">=</span> talentestors@gmail.com</span>
<span class="line"><span class="token punctuation">[</span>http<span class="token punctuation">]</span></span>
<span class="line">    sslVerify <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line"><span class="token punctuation">[</span>init<span class="token punctuation">]</span></span>
<span class="line">    defaultBranch <span class="token operator">=</span> main</span>
<span class="line"><span class="token punctuation">[</span>core<span class="token punctuation">]</span></span>
<span class="line">    editor <span class="token operator">=</span> nvim</span>
<span class="line">    ignorecase <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token comment"># 忽略文件大小写</span></span>
<span class="line">    autocrlf <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment"># windows换行符 (only Windows)</span></span>
<span class="line">    pager <span class="token operator">=</span></span>
<span class="line"><span class="token punctuation">[</span>color<span class="token punctuation">]</span></span>
<span class="line">    ui <span class="token operator">=</span> always</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置文件在<strong>home 目录</strong>下的<code>.gitconfig</code>文件（没有需要自己建）</p><blockquote><p>windows: <code>C:\\Users\\&lt;YourUsername&gt;\\.gitconfig</code></p><p>Linux: <code>~/.gitconfig</code></p></blockquote><ul><li>ubuntu 配置：<code>apt-get install git</code></li><li>centos 配置：<code>yum install git</code></li><li>msys2 配置：<code>pacman -S git</code> (windows)</li><li>scoop 配置：<code>scoop install git</code> (windows)</li><li>arch 配置：<code>sudo pacman -S git</code></li></ul><h2 id="第二章-理论基础" tabindex="-1"><a class="header-anchor" href="#第二章-理论基础"><span>第二章 理论基础</span></a></h2><h3 id="_1-git-是什么" tabindex="-1"><a class="header-anchor" href="#_1-git-是什么"><span>（1）Git 是什么？</span></a></h3><p>那么，简单地说，Git 究竟是怎样的一个系统呢？ 请注意接下来的内容非常重要，若你理解了 Git 的思想和基本工作原理，用起来就会知其所以然，游刃有余。 在学习 Git 时，请尽量理清你对其它版本管理系统已有的认识，如 CVS、Subversion 或 Perforce， 这样能帮助你使用工具时避免发生混淆。尽管 Git 用起来与其它的版本控制系统非常相似， 但它在对信息的存储和认知方式上却有很大差异，理解这些差异将有助于避免使用中的困惑。</p><h3 id="_2-三种状态" tabindex="-1"><a class="header-anchor" href="#_2-三种状态"><span>（2）三种状态</span></a></h3><p>现在请注意，如果你希望后面的学习更顺利，请记住下面这些关于 Git 的概念。 Git 有三种状态，你的文件可能处于其中之一： <strong>已提交（committed）</strong>、<strong>已修改（modified）</strong> 和 <strong>已暂存（staged）</strong>。</p><ul><li>已修改表示修改了文件，但还没保存到数据库中。</li><li>已暂存表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中。</li><li>已提交表示数据已经安全地保存在本地数据库中。</li></ul><p>这会让我们的 Git 项目拥有三个阶段：工作区、暂存区以及 Git 目录。</p><p><img src="`+t+`" alt="工作区、暂存区以及 Git 目录。" loading="lazy">工作区、暂存区以及 Git 目录。</p><p>工作目录、暂存区域以及 Git 仓库.</p><p>工作区是对项目的某个版本独立提取出来的内容。 这些从 Git 仓库的压缩数据库中提取出来的文件，放在磁盘上供你使用或修改。</p><p>暂存区是一个文件，保存了下次将要提交的文件列表信息，一般在 Git 仓库目录中。 按照 Git 的术语叫做“索引”，不过一般说法还是叫“暂存区”。</p><p>Git 仓库目录是 Git 用来保存项目的元数据和对象数据库的地方。 这是 Git 中最重要的部分，从其它计算机克隆仓库时，复制的就是这里的数据。</p><p>基本的 Git 工作流程如下：</p><ol><li>在工作区中修改文件。</li><li>将你想要下次提交的更改选择性地暂存，这样只会将更改的部分添加到暂存区。</li><li>提交更新，找到暂存区的文件，将快照永久性存储到 Git 目录。</li></ol><p>如果 Git 目录中保存着特定版本的文件，就属于 <strong>已提交</strong> 状态。 如果文件已修改并放入暂存区，就属于 <strong>已暂存</strong> 状态。 如果自上次检出后，作了修改但还没有放到暂存区域，就是 <strong>已修改</strong> 状态。 在 <a href="https://git-scm.com/book/zh/v2/ch00/ch02-git-basics-chapter" target="_blank" rel="noopener noreferrer">Git 基础</a> 一章，你会进一步了解这些状态的细节， 并学会如何根据文件状态实施后续操作，以及怎样跳过暂存直接提交。</p><p>如上，如果每个版本中有文件发生变动，Git 会将整个文件复制并保存起来。这种设计看似会多消耗更多的空间，但在分支管理时却是带来了很多的益处和便利。</p><h3 id="_3-git-保证完整性" tabindex="-1"><a class="header-anchor" href="#_3-git-保证完整性"><span>（3）Git 保证完整性</span></a></h3><p>Git 中所有的数据在存储前都计算校验和，然后以校验和来引用。 这意味着不可能在 Git 不知情时更改任何文件内容或目录内容。 这个功能建构在 Git 底层，是构成 Git 哲学不可或缺的部分。 若你在传送过程中丢失信息或损坏文件，Git 就能发现。</p><p>Git 用以计算校验和的机制叫做 SHA-1 散列（hash，哈希）。 这是一个由 40 个十六进制字符（0-9 和 a-f）组成的字符串，基于 Git 中文件的内容或目录结构计算出来。 SHA-1 哈希看起来是这样：</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">24b9da6552252987aa493b52f8696cd6d3b00373</span>
<span class="line"></span></code></pre></div><p>Git 中使用这种哈希值的情况很多，你将经常看到这种哈希值。 实际上，Git 数据库中保存的信息都是以文件内容的哈希值来索引，而不是文件名。</p><h2 id="第三章-实战" tabindex="-1"><a class="header-anchor" href="#第三章-实战"><span>第三章 实战</span></a></h2><h3 id="_1、初始化-git" tabindex="-1"><a class="header-anchor" href="#_1、初始化-git"><span>1、初始化 Git</span></a></h3><h4 id="_1-初次运行-git-前的配置" tabindex="-1"><a class="header-anchor" href="#_1-初次运行-git-前的配置"><span>（1）初次运行 Git 前的配置</span></a></h4><p>既然已经在系统上安装了 Git，你会想要做几件事来定制你的 Git 环境。 每台计算机上只需要配置一次，程序升级时会保留配置信息。 你可以在任何时候再次通过运行命令来修改它们。</p><p>Git 自带一个 <code>git config</code> 的工具来帮助设置控制 Git 外观和行为的配置变量。</p><p>在 Windows 系统中，Git 会查找 <code>$HOME</code> 目录下（一般情况下是 <code>C:\\Users\\$USER</code> ）的 <code>.gitconfig</code> 文件。</p><p>你可以通过以下命令查看所有的配置以及它们所在的文件：</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">git</span> config <span class="token parameter variable">--list</span> --show-origin</span>
<span class="line"></span></code></pre></div><h4 id="_2-用户信息" tabindex="-1"><a class="header-anchor" href="#_2-用户信息"><span>（2）用户信息</span></a></h4><p>安装完 Git 之后，要做的第一件事就是设置你的用户名和邮件地址。 这一点很重要，因为每一个 Git 提交都会使用这些信息，它们会写入到你的每一次提交中，不可更改：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">&quot;itnanls&quot;</span></span>
<span class="line"><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">&quot;510180298@qq.com&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>再次强调，如果使用了 <code>--global</code> 选项，那么该命令只需要运行一次，因为之后无论你在该系统上做任何事情， Git 都会使用那些信息。 当你想针对特定项目使用不同的用户名称与邮件地址时，可以在那个项目目录下运行没有 <code>--global</code> 选项的命令来配置。</p><p>很多 GUI 工具都会在第一次运行时帮助你配置这些信息。</p><h4 id="_3-检查配置信息" tabindex="-1"><a class="header-anchor" href="#_3-检查配置信息"><span>（3）检查配置信息</span></a></h4><p>如果想要检查你的配置，可以使用 <code>git config --list</code> 命令来列出所有 Git 当时能找到的配置。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">$ <span class="token function">git</span> config <span class="token parameter variable">--list</span></span>
<span class="line"><span class="token assign-left variable">user.name</span><span class="token operator">=</span>John Doe</span>
<span class="line"><span class="token assign-left variable">user.email</span><span class="token operator">=</span>johndoe@example.com</span>
<span class="line"><span class="token assign-left variable">color.status</span><span class="token operator">=</span>auto</span>
<span class="line"><span class="token assign-left variable">color.branch</span><span class="token operator">=</span>auto</span>
<span class="line"><span class="token assign-left variable">color.interactive</span><span class="token operator">=</span>auto</span>
<span class="line"><span class="token assign-left variable">color.diff</span><span class="token operator">=</span>auto</span>
<span class="line"><span class="token punctuation">..</span>.</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可能会看到重复的变量名，因为 Git 会从不同的文件中读取同一个配置（例如：<code>/etc/gitconfig</code> 与 <code>~/.gitconfig</code>）。 这种情况下，Git 会使用它找到的每一个变量的最后一个配置。</p><p>你可以通过输入 <code>git config &lt;key&gt;</code>： 来检查 Git 的某一项配置</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">$ <span class="token function">git</span> config user.name</span>
<span class="line">John Doe</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>还可以直接修改配置文件--&gt; <code>\\.ssh/config</code></p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">ssh-agent <span class="token function">bash</span></span>
<span class="line">ssh-add .ssh/id_rsa.github</span>
<span class="line">ssh-add .ssh/id_rsa.gitee</span>
<span class="line"></span>
<span class="line"><span class="token function">touch</span> .ssh/config</span>
<span class="line"></span>
<span class="line"><span class="token function">ssh</span> <span class="token parameter variable">-T</span> git@gitee.com</span>
<span class="line"><span class="token function">ssh</span> <span class="token parameter variable">-T</span> git@github.com</span>
<span class="line"></span>
<span class="line">---</span>
<span class="line"></span>
<span class="line"><span class="token comment"># gitee</span></span>
<span class="line">Host gitee.com</span>
<span class="line">HostName gitee.com</span>
<span class="line">PreferredAuthentications publickey</span>
<span class="line">IdentityFile ~/.ssh/id_rsa.gitee</span>
<span class="line"><span class="token comment"># github</span></span>
<span class="line">Host github.com</span>
<span class="line">HostName github.com</span>
<span class="line"><span class="token comment"># Port 443 (可选)</span></span>
<span class="line">PreferredAuthentications publickey</span>
<span class="line">IdentityFile ~/.ssh/id_rsa.github</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-尝试" tabindex="-1"><a class="header-anchor" href="#_4-尝试"><span>（4）尝试</span></a></h4><p>在自己方便的盘中新建一个文件夹，这里以 MyProject 为例，注意路径中不要含有中文字符。打开 cmd 命令窗口，操作如下：</p><p>找一个空文件夹：</p><p>点击鼠标右键-----》git bash here</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">// 初始化 仓库</span>
<span class="line"><span class="token number">51018</span>@DESKTOP-6R8BLO2 MINGW64 ~/Desktop/git-study</span>
<span class="line">$ <span class="token function">git</span> init</span>
<span class="line">Initialized empty Git repository <span class="token keyword">in</span> C:/Users/51018/Desktop/git-study/.git/</span>
<span class="line"><span class="token number">51018</span>@DESKTOP-6R8BLO2 MINGW64 ~/Desktop/git-study <span class="token punctuation">(</span>master<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">// 添加一个文件</span>
<span class="line">$ <span class="token function">touch</span> a.txt</span>
<span class="line">$ <span class="token builtin class-name">echo</span> <span class="token number">123</span> <span class="token operator">&gt;</span> a.txt</span>
<span class="line"><span class="token number">51018</span>@DESKTOP-6R8BLO2 MINGW64 ~/Desktop/git-study <span class="token punctuation">(</span>master<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">// 提交至缓存区</span>
<span class="line">$ <span class="token function">git</span> <span class="token function">add</span> a.txt</span>
<span class="line"><span class="token number">51018</span>@DESKTOP-6R8BLO2 MINGW64 ~/Desktop/git-study <span class="token punctuation">(</span>master<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">// 提交到本地仓库</span>
<span class="line">$ <span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&#39;first&#39;</span></span>
<span class="line"><span class="token punctuation">[</span>master <span class="token punctuation">(</span>root-commit<span class="token punctuation">)</span> ac41d06<span class="token punctuation">]</span> first</span>
<span class="line"> <span class="token number">1</span> <span class="token function">file</span> changed, <span class="token number">0</span> insertions<span class="token punctuation">(</span>+<span class="token punctuation">)</span>, <span class="token number">0</span> deletions<span class="token punctuation">(</span>-<span class="token punctuation">)</span></span>
<span class="line"> create mode <span class="token number">100644</span> a.txt</span>
<span class="line"></span>
<span class="line"><span class="token number">51018</span>@DESKTOP-6R8BLO2 MINGW64 ~/Desktop/git-study <span class="token punctuation">(</span>master<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-获取帮助" tabindex="-1"><a class="header-anchor" href="#_5-获取帮助"><span>（5）获取帮助</span></a></h4><p>若你使用 Git 时需要获取帮助，有三种等价的方法可以找到 Git 命令的综合手册（manpage）：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">git</span> <span class="token builtin class-name">help</span> <span class="token operator">&lt;</span>verb<span class="token operator">&gt;</span></span>
<span class="line"><span class="token function">git</span> <span class="token operator">&lt;</span>verb<span class="token operator">&gt;</span> <span class="token parameter variable">--help</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>例如，要想获得 <code>git config</code> 命令的手册，执行</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">git</span> <span class="token builtin class-name">help</span> config</span>
<span class="line"></span></code></pre></div><p>此外，如果你不需要全面的手册，只需要可用选项的快速参考，那么可以用 <code>-h</code> 选项获得更简明的 “help” 输出：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">$ <span class="token function">git</span> <span class="token function">add</span> <span class="token parameter variable">-h</span></span>
<span class="line">usage: <span class="token function">git</span> <span class="token function">add</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>options<span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>--<span class="token punctuation">]</span> <span class="token operator">&lt;</span>pathspec<span class="token operator">&gt;</span><span class="token punctuation">..</span>.</span>
<span class="line"></span>
<span class="line">    -n, --dry-run         dry run</span>
<span class="line">    -v, <span class="token parameter variable">--verbose</span>         be verbose</span>
<span class="line"></span>
<span class="line">    -i, <span class="token parameter variable">--interactive</span>     interactive picking</span>
<span class="line">    -p, <span class="token parameter variable">--patch</span>           <span class="token keyword">select</span> hunks interactively</span>
<span class="line">    -e, <span class="token parameter variable">--edit</span>            edit current <span class="token function">diff</span> and apply</span>
<span class="line">    -f, <span class="token parameter variable">--force</span>           allow adding otherwise ignored files</span>
<span class="line">    -u, <span class="token parameter variable">--update</span>          update tracked files</span>
<span class="line">    <span class="token parameter variable">--renormalize</span>         renormalize EOL of tracked files <span class="token punctuation">(</span>implies -u<span class="token punctuation">)</span></span>
<span class="line">    -N, --intent-to-add   record only the fact that the path will be added later</span>
<span class="line">    -A, <span class="token parameter variable">--all</span>             <span class="token function">add</span> changes from all tracked and untracked files</span>
<span class="line">    --ignore-removal      ignore paths removed <span class="token keyword">in</span> the working tree <span class="token punctuation">(</span>same as --no-all<span class="token punctuation">)</span></span>
<span class="line">    <span class="token parameter variable">--refresh</span>             don&#39;t add, only refresh the index</span>
<span class="line">    --ignore-errors       just skip files <span class="token function">which</span> cannot be added because of errors</span>
<span class="line">    --ignore-missing      check <span class="token keyword">if</span> - even missing - files are ignored <span class="token keyword">in</span> dry run</span>
<span class="line">    <span class="token parameter variable">--chmod</span> <span class="token punctuation">(</span>+<span class="token operator">|</span>-<span class="token punctuation">)</span>x        override the executable bit of the listed files</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、基础命令" tabindex="-1"><a class="header-anchor" href="#_2、基础命令"><span>2、基础命令</span></a></h3><p>我们怎么知道哪些文件是新添加的，哪些文件已经加入了暂存区域呢？总不能让我们自己拿个本本记下来吧？ 当然不，作为世界上最伟大的版本控制系统，你能遇到的囧境，Git 早已有了相应的解决方案。随时随地都可以使用<strong>git status</strong>查看当前状态</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">$ <span class="token function">git</span> status</span>
<span class="line">On branch master</span>
<span class="line">nothing to commit, working tree clean</span>
<span class="line">$ <span class="token function">git</span> <span class="token function">add</span> b.txt</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果代码报错：git 上传代码报错-The file will have its original line endings in your working directory</p><p>原因是因为文件中换行符的差别导致的。</p><blockquote><p>这里需要知道 CRLF 和 LF 的区别：</p></blockquote><p>windows 下的换行符是 CRLF 而 Unix 的换行符格式是 LF。git 默认支持 LF。</p><p>上面的报错的意思是会把 CRLF（也就是回车换行）转换成 Unix 格式（LF），这些是转换文件格式的警告，不影响使用。</p><p>一般 commit 代码时 git 会把 CRLF 转 LF，pull 代码时 LF 换 CRLF。</p><p>解决方案：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">git</span> <span class="token function">rm</span> <span class="token parameter variable">-r</span> <span class="token parameter variable">--cached</span> <span class="token builtin class-name">.</span></span>
<span class="line"><span class="token function">git</span> config core.autocrlf <span class="token boolean">false</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后重新上传代码即可。</p><p>为 true 时，Git 会将你 add 的所有文件视为文本问价你，将结尾的 CRLF 转换为 LF，而 checkout 时会再将文件的 LF 格式转为 CRLF 格式。</p><p>为 false 时，line endings 不做任何改变，文本文件保持其原来的样子。</p><p>为 input 时，add 时 Git 会把 CRLF 转换为 LF，而 check 时仍旧为 LF，所以 Windows 操作系统不建议设置此值。</p><p>输入<strong>git status</strong>命令，提示如下：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token number">51018</span>@DESKTOP-6R8BLO2 MINGW64 ~/Desktop/git-study <span class="token punctuation">(</span>master<span class="token punctuation">)</span></span>
<span class="line">$ <span class="token builtin class-name">echo</span> <span class="token number">1234</span> <span class="token operator">&gt;</span> b.txt</span>
<span class="line"></span>
<span class="line"><span class="token number">51018</span>@DESKTOP-6R8BLO2 MINGW64 ~/Desktop/git-study <span class="token punctuation">(</span>master<span class="token punctuation">)</span></span>
<span class="line">$ <span class="token function">git</span> <span class="token function">add</span> b.txt</span>
<span class="line"></span>
<span class="line">$ <span class="token function">git</span> status</span>
<span class="line">On branch master</span>
<span class="line">Changes to be committed:</span>
<span class="line">  <span class="token punctuation">(</span>use <span class="token string">&quot;git reset HEAD &lt;file&gt;...&quot;</span> to unstage<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        new file:   b.txt</span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token number">51018</span>@DESKTOP-6R8BLO2 MINGW64 ~/Desktop/git-study <span class="token punctuation">(</span>master<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Untracked files</strong> 说明存在未跟踪的文件（下边红色的那个）</p><p>所谓的“未跟踪”文件，是指那些新添加的并且未被加入到暂存区域或提交的文件。它们处于一个逍遥法外的状态，但你一旦将它们加入暂存区域或提交到 Git 仓库，它们就开始受到 Git 的“跟踪”。</p><p>这里圆括号中的英文是 git 给我们的建议：使用 git add &lt;file&gt; 命令将待提交的文件添加到暂存区域。</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">F<span class="token punctuation">:</span>\\MyProject<span class="token operator">&gt;</span>git <span class="token keyword">add</span> <span class="token class-name">LICENSE</span></span>
<span class="line"></span>
<span class="line">F<span class="token punctuation">:</span>\\MyProject<span class="token operator">&gt;</span>git status</span>
<span class="line">On branch master</span>
<span class="line">Changes to <span class="token class-name">be</span> committed<span class="token punctuation">:</span></span>
<span class="line">  <span class="token punctuation">(</span>use <span class="token string">&quot;git reset HEAD &lt;file&gt;...&quot;</span> <span class="token class-name">to</span> unstage<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">new</span> file<span class="token punctuation">:</span>   <span class="token function">LICENSE</span><span class="token punctuation">(</span>绿色<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再次添加到暂存区域，然后执行 git commit -m &quot;b.txt&quot; 命令：</p><p>修改数据</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code class="language-rust"><span class="line"><span class="token number">51018</span><span class="token operator">@</span><span class="token constant">DESKTOP</span><span class="token operator">-</span>6R8BLO2 <span class="token constant">MINGW64</span> ~<span class="token operator">/</span><span class="token class-name">Desktop</span><span class="token operator">/</span>git<span class="token operator">-</span><span class="token function">study</span> <span class="token punctuation">(</span>master<span class="token punctuation">)</span></span>
<span class="line">$ echo <span class="token number">123</span> <span class="token operator">&gt;</span> b<span class="token punctuation">.</span>txt</span>
<span class="line"></span>
<span class="line">$ git status</span>
<span class="line"><span class="token class-name">On</span> branch master</span>
<span class="line"><span class="token class-name">Changes</span> not staged <span class="token keyword">for</span> commit<span class="token punctuation">:</span></span>
<span class="line">  <span class="token punctuation">(</span><span class="token keyword">use</span> <span class="token string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">(</span><span class="token keyword">use</span> <span class="token string">&quot;git checkout -- &lt;file&gt;...&quot;</span> to discard changes <span class="token keyword">in</span> working directory<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        modified<span class="token punctuation">:</span>   b<span class="token punctuation">.</span>txt</span>
<span class="line"></span>
<span class="line">no changes added to <span class="token function">commit</span> <span class="token punctuation">(</span><span class="token keyword">use</span> <span class="token string">&quot;git add&quot;</span> and<span class="token operator">/</span>or <span class="token string">&quot;git commit -a&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token number">51018</span><span class="token operator">@</span><span class="token constant">DESKTOP</span><span class="token operator">-</span>6R8BLO2 <span class="token constant">MINGW64</span> ~<span class="token operator">/</span><span class="token class-name">Desktop</span><span class="token operator">/</span>git<span class="token operator">-</span><span class="token function">study</span> <span class="token punctuation">(</span>master<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改文件后，使用 git status 查看数据。</p><blockquote><p>git log 查看历史操作记录</p></blockquote><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">$ <span class="token function">git</span> log</span>
<span class="line">commit 5da78a44017dda030d1fe273e2a470792534ba9a <span class="token punctuation">(</span>HEAD -<span class="token operator">&gt;</span> master<span class="token punctuation">)</span></span>
<span class="line">Author: zhangnan <span class="token operator">&lt;</span><span class="token number">510180298</span>@qq.com<span class="token operator">&gt;</span></span>
<span class="line">Date:   Sat Mar <span class="token number">13</span> <span class="token number">16</span>:01:01 <span class="token number">2021</span> +0800</span>
<span class="line"></span>
<span class="line">    <span class="token number">123</span></span>
<span class="line"></span>
<span class="line">commit c7c0e3bf6d64404e3e68632c24ca13eac38b02e2</span>
<span class="line">Author: zhangnan <span class="token operator">&lt;</span><span class="token number">510180298</span>@qq.com<span class="token operator">&gt;</span></span>
<span class="line">Date:   Sat Mar <span class="token number">13</span> <span class="token number">15</span>:53:38 <span class="token number">2021</span> +0800</span>
<span class="line"></span>
<span class="line">    first</span>
<span class="line"></span>
<span class="line"><span class="token number">51018</span>@DESKTOP-6R8BLO2 MINGW64 ~/Desktop/git-study <span class="token punctuation">(</span>master<span class="token punctuation">)</span></span>
<span class="line">* d5a12d8a966da5bf36c1f4a080c5d507398f5f59 <span class="token punctuation">(</span>HEAD -<span class="token operator">&gt;</span> master<span class="token punctuation">)</span> first</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果中：有 head 代表当前所处的分之，master 代表当前是 master 分支。可以按下不表。</p><p>两次的提交记录看到了。--pretty=oneline</p><p>head git 中的分支，其实本质上仅仅是个指向 commit 对象的可变指针。git 是如何知道你当前在哪个分支上工作的呢？ 其实答案也很简单，它保存着一个名为 HEAD 的特别指针。在 git 中，它是一个指向你正在工作中的本地分支的指针，可以将 HEAD 想象为当前分支的别名。</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">git</span> log <span class="token parameter variable">--graph</span></span>
<span class="line"></span></code></pre></div><h3 id="_3、时光回退" tabindex="-1"><a class="header-anchor" href="#_3、时光回退"><span>3、时光回退</span></a></h3><p>有关回退的命令有两个：<strong>reset 和 checkout</strong></p><h4 id="_1-回滚快照" tabindex="-1"><a class="header-anchor" href="#_1-回滚快照"><span>（1）回滚快照</span></a></h4><p><em>注：快照即提交的版本，每个版本我们称之为一个快照。</em></p><p>现在我们利用 reset 命令回滚快照，并看看 Git 仓库和三棵树分别发生了什么。</p><p>执行 git reset HEAD~ 命令：</p><p><em>注：HEAD 表示最新提交的快照，而 HEAD~ 表示 HEAD 的上一个快照，HEAD~~表示上上个快照，如果表示上 10 个快照，则可以用 HEAD ~10</em></p><p>此时我们的快找回滚到了第二棵数（暂存区域）</p><p>记住：head 永远指向当前分支的当前快照</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">$ <span class="token function">git</span>  <span class="token parameter variable">--hard</span> reset head~</span>
<span class="line"></span>
<span class="line"><span class="token number">51018</span>@DESKTOP-6R8BLO2 MINGW64 ~/Desktop/git-study <span class="token punctuation">(</span>master<span class="token punctuation">)</span></span>
<span class="line">$ <span class="token function">git</span> log</span>
<span class="line">commit c7c0e3bf6d64404e3e68632c24ca13eac38b02e2 <span class="token punctuation">(</span>HEAD -<span class="token operator">&gt;</span> master<span class="token punctuation">)</span></span>
<span class="line">Author: zhangnan <span class="token operator">&lt;</span><span class="token number">510180298</span>@qq.com<span class="token operator">&gt;</span></span>
<span class="line">Date:   Sat Mar <span class="token number">13</span> <span class="token number">15</span>:53:38 <span class="token number">2021</span> +0800</span>
<span class="line"></span>
<span class="line">    first</span>
<span class="line"></span>
<span class="line"><span class="token number">51018</span>@DESKTOP-6R8BLO2 MINGW64 ~/Desktop/git-study <span class="token punctuation">(</span>master<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，只剩下一个记录了。</p><figure><img src="`+c+'" alt="image-20210316212457416" tabindex="0" loading="lazy"><figcaption>image-20210316212457416</figcaption></figure><blockquote><p>参数选择</p></blockquote><p>--hard : 回退版本库，暂存区，工作区。（因此我们修改过的代码就没了，需要谨慎使用）</p><p>reset 不仅移动 HEAD 的指向，将快照回滚动到暂存区域，它还将暂存区域的文件还原到工作目录。</p><p>--mixed: 回退版本库，暂存区。(--mixed 为 git reset 的默认参数，即当任何参数都不加的时候的参数)</p><p>--soft: 回退版本库。</p><p>就相当于只移动 HEAD 的指向，但并不会将快照回滚到暂存区域。相当于撤消了上一次的提交（commit）。</p><figure><img src="'+o+`" alt="image-20210316214437985" tabindex="0" loading="lazy"><figcaption>image-20210316214437985</figcaption></figure><h4 id="_2-回滚指定快照" tabindex="-1"><a class="header-anchor" href="#_2-回滚指定快照"><span><strong>（2）回滚指定快照</strong></span></a></h4><p>reset 不仅可以回滚指定快照，还可以回滚个别文件。</p><p>命令格式为：</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">git</span> reset <span class="token parameter variable">--hard</span>  c7c0e3bf6d64404e3e68632c24ca13eac38b02e2</span>
<span class="line"></span></code></pre></div><p>这样，它就会将忽略移动 HEAD 的指向这一步（因为你只是回滚快照的部分内容，并不是整个快照，所以 HEAD 的指向不应该发生改变），直接将指定快照的指定文件回滚到暂存区域。</p><p><strong>不仅可以往回滚，还可以往前滚！</strong></p><p>这里需要强调的是：reset 不仅是一个“复古”的命令，它不仅可以回到过去，还可以去到“未来”。</p><p>唯一的一个前提条件是：你需要知道指定快照的 ID 号。</p><p><strong>那如果不小心把命令窗口关了不记得 ID 号怎么办？</strong> 命令：</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">git</span> reflog</span>
<span class="line"></span></code></pre></div><p>Git 记录的每一次操作的版本 ID 号</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">git</span> reset <span class="token parameter variable">--hard</span> 7ce4954</span>
<span class="line"></span></code></pre></div><h3 id="_4、版本对比" tabindex="-1"><a class="header-anchor" href="#_4、版本对比"><span>4、版本对比</span></a></h3><h4 id="_1-暂存区与工作树" tabindex="-1"><a class="header-anchor" href="#_1-暂存区与工作树"><span>（1）暂存区与工作树</span></a></h4><p>目的：对比版本之间有哪些不同</p><p>在已经存在的文件 b.txt 中添加内容：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">$ <span class="token function">git</span> <span class="token function">diff</span></span>
<span class="line"><span class="token function">diff</span> <span class="token parameter variable">--git</span> a/b.txt b/b.txt</span>
<span class="line">index 9ab39d5<span class="token punctuation">..</span>4d37a8a <span class="token number">100644</span></span>
<span class="line">--- a/b.txt</span>
<span class="line">+++ b/b.txt</span>
<span class="line">@@ -2,3 +2,4 @@</span>
<span class="line"> <span class="token number">1212</span></span>
<span class="line"> <span class="token number">123123123</span></span>
<span class="line"> <span class="token number">234234234</span></span>
<span class="line">+手动阀手动阀</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在来解释一下上面每一行的含义：</p><p><strong>第一行：</strong> diff --git a/b.txt b/b.txt 表示对比的是存放在暂存区域和工作目录的 b.txt</p><p><strong>第二行：</strong> index 9ab39d5..4d37a8a 100644 表示对应文件的 ID 分别是 9ab39d5 和 4d37a8a，左边暂存区域，后边当前目录。最后的 100644 是指定文件的类型和权限</p><p><strong>第三行：</strong> --- a/b.txt</p><p>--- 表示该文件是旧文件（存放在暂存区域）</p><p><strong>第四行：</strong> +++ b/b.txt +++ 表示该文件是新文件（存放在工作区域）</p><p><strong>第五行：</strong> @@ -2,3 +2,4 @@ 以 @@ 开头和结束，中间的“-”表示旧文件，“+”表示新文件，后边的数字表示“开始行号，显示行数”</p><p>内容：+代表新增的行 -代表少了的行</p><p>直接执行 git diff 命令是比较暂存区域与工作目录的文件内容：</p><h4 id="_2-工作树和最新提交" tabindex="-1"><a class="header-anchor" href="#_2-工作树和最新提交"><span>（2）工作树和最新提交</span></a></h4><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">$ <span class="token function">git</span> <span class="token function">diff</span> <span class="token function">head</span></span>
<span class="line">warning: LF will be replaced by CRLF <span class="token keyword">in</span> b.txt.</span>
<span class="line">The <span class="token function">file</span> will have its original line endings <span class="token keyword">in</span> your working directory</span>
<span class="line"><span class="token function">diff</span> <span class="token parameter variable">--git</span> a/b.txt b/b.txt</span>
<span class="line">new <span class="token function">file</span> mode <span class="token number">100644</span></span>
<span class="line">index 0000000<span class="token punctuation">..</span>4d37a8a</span>
<span class="line">--- /dev/null</span>
<span class="line">+++ b/b.txt</span>
<span class="line">@@ -0,0 +1,5 @@</span>
<span class="line">+123</span>
<span class="line">+1212</span>
<span class="line">+123123123</span>
<span class="line">+234234234</span>
<span class="line">+手动阀手动阀</span>
<span class="line"></span>
<span class="line"><span class="token number">51018</span>@DESKTOP-6R8BLO2 MINGW64 ~/Desktop/git-study <span class="token punctuation">(</span>master<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-两个历史快照" tabindex="-1"><a class="header-anchor" href="#_3-两个历史快照"><span>（3）两个历史快照</span></a></h4><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">$ <span class="token function">git</span> <span class="token function">diff</span> 5da78a4 c7c0e3b</span>
<span class="line"><span class="token function">diff</span> <span class="token parameter variable">--git</span> a/b.txt b/b.txt</span>
<span class="line">deleted <span class="token function">file</span> mode <span class="token number">100644</span></span>
<span class="line">index 81c545e<span class="token punctuation">..</span>0000000</span>
<span class="line">--- a/b.txt</span>
<span class="line">+++ /dev/null</span>
<span class="line">@@ <span class="token parameter variable">-1</span> +0,0 @@</span>
<span class="line"><span class="token parameter variable">-1234</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-比较仓库和暂存区" tabindex="-1"><a class="header-anchor" href="#_4-比较仓库和暂存区"><span>（4）比较仓库和暂存区</span></a></h4><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">$ <span class="token function">git</span> <span class="token function">diff</span> <span class="token parameter variable">--cached</span> c7c0e3b</span>
<span class="line"><span class="token function">diff</span> <span class="token parameter variable">--git</span> a/b.txt b/b.txt</span>
<span class="line">new <span class="token function">file</span> mode <span class="token number">100644</span></span>
<span class="line">index 0000000<span class="token punctuation">..</span>9ab39d5</span>
<span class="line">--- /dev/null</span>
<span class="line">+++ b/b.txt</span>
<span class="line">@@ -0,0 +1,4 @@</span>
<span class="line">+123</span>
<span class="line">+1212</span>
<span class="line">+123123123</span>
<span class="line">+234234234</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5、删除文件" tabindex="-1"><a class="header-anchor" href="#_5、删除文件"><span>5、删除文件</span></a></h3><blockquote><p>不小心删除文件怎么办？</p></blockquote><p>现在从工作目录中手动删除 b.txt 文件，然后执行 git status 命令：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">$ <span class="token function">git</span> status</span>
<span class="line">On branch master</span>
<span class="line">Changes not staged <span class="token keyword">for</span> commit:</span>
<span class="line">  <span class="token punctuation">(</span>use <span class="token string">&quot;git add/rm &lt;file&gt;...&quot;</span> to update what will be committed<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">(</span>use <span class="token string">&quot;git checkout -- &lt;file&gt;...&quot;</span> to discard changes <span class="token keyword">in</span> working directory<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        deleted:    b.txt</span>
<span class="line"></span>
<span class="line">no changes added to commit <span class="token punctuation">(</span>use <span class="token string">&quot;git add&quot;</span> and/or <span class="token string">&quot;git commit -a&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>提醒使用 checkout 命令可以将暂存区域的文件恢复到工作目录：</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">git</span> checkout -- b.txt</span>
<span class="line"></span></code></pre></div><p>文件就会重新返回。</p><blockquote><p>那么如何彻底删除一个文件呢？</p></blockquote><p>假如你不小心把小黄图下载到了工作目录，然后又不小心提交到了 Git 仓库：</p><p>新增一个 c.txt 文件</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token number">51018</span>@DESKTOP-6R8BLO2 MINGW64 ~/Desktop/git-study <span class="token punctuation">(</span>master<span class="token punctuation">)</span></span>
<span class="line">$ <span class="token builtin class-name">echo</span> <span class="token number">123</span> <span class="token operator">&gt;</span> c.txt</span>
<span class="line"></span>
<span class="line"><span class="token number">51018</span>@DESKTOP-6R8BLO2 MINGW64 ~/Desktop/git-study <span class="token punctuation">(</span>master<span class="token punctuation">)</span></span>
<span class="line">$ <span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span></span>
<span class="line"><span class="token number">51018</span>@DESKTOP-6R8BLO2 MINGW64 ~/Desktop/git-study <span class="token punctuation">(</span>master<span class="token punctuation">)</span></span>
<span class="line">$ <span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&#39;third&#39;</span></span>
<span class="line"><span class="token punctuation">[</span>master 3bd84d8<span class="token punctuation">]</span> third</span>
<span class="line"> <span class="token number">1</span> <span class="token function">file</span> changed, <span class="token number">1</span> insertion<span class="token punctuation">(</span>+<span class="token punctuation">)</span></span>
<span class="line"> create mode <span class="token number">100644</span> c.txt</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还有方法：</p><p>执行 git rm a.txt 命令：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">$ <span class="token function">git</span> <span class="token function">rm</span> c.txt</span>
<span class="line"><span class="token function">rm</span> <span class="token string">&#39;c.txt&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>此时工作目录中的 c.txt 已经被删除……</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token number">51018</span>@DESKTOP-6R8BLO2 MINGW64 ~/Desktop/git-study <span class="token punctuation">(</span>master<span class="token punctuation">)</span></span>
<span class="line">$ <span class="token function">ls</span></span>
<span class="line">a.txt  b.txt  mintty.exe.stackdump</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但执行 git status 命令，你仍然发现 Git 还不肯松手：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">$ <span class="token function">git</span> status</span>
<span class="line">On branch master</span>
<span class="line">Changes to be committed:</span>
<span class="line">  <span class="token punctuation">(</span>use <span class="token string">&quot;git reset HEAD &lt;file&gt;...&quot;</span> to unstage<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        deleted:    c.txt</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>意思是说它在仓库的快照中发现有个叫 c.txt 的东西，但似乎在暂存区域和当前目录不见了！</p><p>此时可以执行 git reset --soft HEAD~ 命令将快照回滚到上一个位置，然后重新提交，就好了：</p><p><strong>注意：rm 命令删除的只是工作目录和暂存区域的文件（即取消跟踪，在下次提交时不纳入版本管理）</strong></p><blockquote><p>缓冲区和工作树的内容不一致，怎么删除</p></blockquote><p>1、修改 b.txt 添加至缓冲区</p><p>2、再修改 b.txt</p><p>3、git rm c.txt</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">$ <span class="token builtin class-name">echo</span> <span class="token number">123</span> <span class="token operator">&gt;</span> b.txt</span>
<span class="line"></span>
<span class="line"><span class="token number">51018</span>@DESKTOP-6R8BLO2 MINGW64 ~/Desktop/git-study <span class="token punctuation">(</span>master<span class="token punctuation">)</span></span>
<span class="line">$ <span class="token function">git</span> <span class="token function">add</span> b.txt</span>
<span class="line"></span>
<span class="line"><span class="token number">51018</span>@DESKTOP-6R8BLO2 MINGW64 ~/Desktop/git-study <span class="token punctuation">(</span>master<span class="token punctuation">)</span></span>
<span class="line">$ <span class="token builtin class-name">echo</span> <span class="token number">123</span> <span class="token operator">&gt;</span> b.txt</span>
<span class="line"></span>
<span class="line"><span class="token number">51018</span>@DESKTOP-6R8BLO2 MINGW64 ~/Desktop/git-study <span class="token punctuation">(</span>master<span class="token punctuation">)</span></span>
<span class="line">$ <span class="token function">git</span> <span class="token function">rm</span> b.txt</span>
<span class="line">error: the following <span class="token function">file</span> has changes staged <span class="token keyword">in</span> the index:</span>
<span class="line">    b.txt</span>
<span class="line"><span class="token punctuation">(</span>use <span class="token parameter variable">--cached</span> to keep the file, or <span class="token parameter variable">-f</span> to force removal<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为两个不同内容的同名文件，谁知道你是不是搞清楚了都要删掉？还是提醒一下好，别等一下出错了又要赖机器…… 根据提示，执行 git rm -f b.txt 命令就可以把两个都删除。</p><blockquote><p>我只想删除暂存区域的文件，保留工作目录的，应该怎么操作？</p></blockquote><p>执行 <code>git rm --cached</code> 文件名 命令。</p><h3 id="_6、重命名文件" tabindex="-1"><a class="header-anchor" href="#_6、重命名文件"><span>6、重命名文件</span></a></h3><p>直接在工作目录重命名文件，执行 git status 出现错误：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">$ <span class="token function">git</span> status</span>
<span class="line">On branch master</span>
<span class="line">Changes to be committed:</span>
<span class="line">  <span class="token punctuation">(</span>use <span class="token string">&quot;git reset HEAD &lt;file&gt;...&quot;</span> to unstage<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        modified:   b.txt</span>
<span class="line"></span>
<span class="line">Changes not staged <span class="token keyword">for</span> commit:</span>
<span class="line">  <span class="token punctuation">(</span>use <span class="token string">&quot;git add/rm &lt;file&gt;...&quot;</span> to update what will be committed<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">(</span>use <span class="token string">&quot;git checkout -- &lt;file&gt;...&quot;</span> to discard changes <span class="token keyword">in</span> working directory<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        deleted:    b.txt</span>
<span class="line"></span>
<span class="line">Untracked files:</span>
<span class="line">  <span class="token punctuation">(</span>use <span class="token string">&quot;git add &lt;file&gt;...&quot;</span> to include <span class="token keyword">in</span> what will be committed<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        n.txt</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正确的姿势应该是：</p><p><code>git mv 旧文件名 新文件名</code></p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">$ <span class="token function">git</span> <span class="token function">mv</span> b.txt c.txt</span>
<span class="line"></span>
<span class="line"><span class="token number">51018</span>@DESKTOP-6R8BLO2 MINGW64 ~/Desktop/git-study <span class="token punctuation">(</span>master<span class="token punctuation">)</span></span>
<span class="line">$ <span class="token function">git</span> status</span>
<span class="line">On branch master</span>
<span class="line">Changes to be committed:</span>
<span class="line">  <span class="token punctuation">(</span>use <span class="token string">&quot;git reset HEAD &lt;file&gt;...&quot;</span> to unstage<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        renamed:    b.txt -<span class="token operator">&gt;</span> c.txt</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7、忽略文件" tabindex="-1"><a class="header-anchor" href="#_7、忽略文件"><span>7、忽略文件</span></a></h3><p><strong>如何让 Git 识别某些格式的文件，然后自主不跟踪它们？</strong></p><p>比如工作目录中有三个文件 1.temp、2.temp 和 3.temp，我们不希望后缀名为 temp 的文件被追踪，可是每次执行 git status 都会出现：</p><p>解决办法：在工作目录创建一个名为 .gitignore 的文件。</p><p>然后你发现 Windows 压根儿不允许你在文件管理器中创建以点（.）开头的文件。windows 需要在命令行窗口创建（.）开头的文件。执行 echo *.temp &gt; .gitignore 命令，创建一个 .gitignore 文件，并让 Git 忽略所有 .temp 后缀的文件：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token builtin class-name">echo</span> *.temp <span class="token operator">&gt;</span> .gitignore</span>
<span class="line"><span class="token builtin class-name">echo</span> *.temp <span class="token operator">&gt;</span> .gitignore</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>在工作目录创建 a.temp</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">$ <span class="token function">git</span> status</span>
<span class="line">On branch master</span>
<span class="line">Changes to be committed:</span>
<span class="line">  <span class="token punctuation">(</span>use <span class="token string">&quot;git reset HEAD &lt;file&gt;...&quot;</span> to unstage<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        renamed:    b.txt -<span class="token operator">&gt;</span> c.txt</span>
<span class="line"></span>
<span class="line">Untracked files:</span>
<span class="line">  <span class="token punctuation">(</span>use <span class="token string">&quot;git add &lt;file&gt;...&quot;</span> to include <span class="token keyword">in</span> what will be committed<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        .gitignore</span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token number">51018</span>@DESKTOP-6R8BLO2 MINGW64 ~/Desktop/git-study <span class="token punctuation">(</span>master<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>好了，Git 已经忽略了所有的 *.temp 文件（你还可以把 .gitignore 文件也一并忽略）。</p><h2 id="_8、创建和切换分支" tabindex="-1"><a class="header-anchor" href="#_8、创建和切换分支"><span>8、创建和切换分支</span></a></h2><h3 id="_1-分支是什么" tabindex="-1"><a class="header-anchor" href="#_1-分支是什么"><span>（1）分支是什么？</span></a></h3><p>假设你的大项目已经上线了（有上百万人在使用），过了一段时间</p><p>你突然觉得应该添加一些新的功能，但是为了保险起见，你肯定不能在当前项目上直接进行开发，这时候你就有创建分支的需要了。</p><figure><img src="`+r+`" alt="image-20210316221252036" tabindex="0" loading="lazy"><figcaption>image-20210316221252036</figcaption></figure><p>对于其它版本控制系统而言，创建分支常常需要完全创建一个源代码目录的副本，项目越大，耗费的时间就越多；而 Git 由于每一个结点都已经是一个完整的项目，所以只需要创建多一个“指针”（像 master）指向分支开始的位置即可。</p><h3 id="_2-创建分支" tabindex="-1"><a class="header-anchor" href="#_2-创建分支"><span>（2）创建分支</span></a></h3><p>执行 git status 查看状态：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">$ <span class="token function">git</span> status</span>
<span class="line">On branch master</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>创建分支，使用 git branch 分支名 命令：</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">git</span> branch feature-login</span>
<span class="line"></span></code></pre></div><p>没有任何提示说明分支创建成功（一般也不会失败啦，除非创建了同名的分支会提醒你一下），此时可以执行 git log --decorate 命令查看：</p><p><em>如果希望以“精简版”的方式显示，可以加上一个 --oneline 选项（即 git log --decorate --oneline），这样就只用一行来显示一个快照记录。</em></p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">$ <span class="token function">git</span> log</span>
<span class="line">commit 432621d36faf270eae133cfe2e976fc99df479a5 <span class="token punctuation">(</span>HEAD -<span class="token operator">&gt;</span> master, feature01<span class="token punctuation">)</span></span>
<span class="line">Author: zhangnan <span class="token operator">&lt;</span><span class="token number">510180298</span>@qq.com<span class="token operator">&gt;</span></span>
<span class="line">Date:   Sat Mar <span class="token number">13</span> <span class="token number">17</span>:43:53 <span class="token number">2021</span> +0800</span>
<span class="line"></span>
<span class="line">    <span class="token number">1</span></span>
<span class="line"></span>
<span class="line">commit 4c9e83b6d4ca3ca3d8b0b77bb5aca614dd755413</span>
<span class="line">Author: zhangnan <span class="token operator">&lt;</span><span class="token number">510180298</span>@qq.com<span class="token operator">&gt;</span></span>
<span class="line">Date:   Sat Mar <span class="token number">13</span> <span class="token number">17</span>:11:51 <span class="token number">2021</span> +0800</span>
<span class="line"></span>
<span class="line">    <span class="token number">123</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到最新的快照后边多了一个 (HEAD -&gt; master, feature01)</p><p>它的意思是：目前有两个分支，一个是主分支（master），一个是刚才我们创建的新分支（feature），然后 HEAD 指针仍然指向默认的 master 分支。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">$ <span class="token function">git</span> log <span class="token parameter variable">--decorate</span> <span class="token parameter variable">--oneline</span></span>
<span class="line">432621d <span class="token punctuation">(</span>HEAD -<span class="token operator">&gt;</span> master, feature01<span class="token punctuation">)</span> <span class="token number">1</span></span>
<span class="line">4c9e83b <span class="token number">123</span></span>
<span class="line">8af2e68 secong</span>
<span class="line">c7c0e3b first</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以目前仓库中的快照应该是这样：head --》 master feature01</p><h3 id="_3-切换分支" tabindex="-1"><a class="header-anchor" href="#_3-切换分支"><span>（3）切换分支</span></a></h3><p>现在我们需要将工作环境切换到新创建的分支（feature）上，使用的就是之前我们欲言又止的 checkout 命令。执行 git checkout feature 命令：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">$ <span class="token function">git</span> checkout feature01</span>
<span class="line">Switched to branch <span class="token string">&#39;feature01&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token number">51018</span>@DESKTOP-6R8BLO2 MINGW64 ~/Desktop/git-study <span class="token punctuation">(</span>feature01<span class="token punctuation">)</span></span>
<span class="line">$ <span class="token function">git</span> status</span>
<span class="line">On branch feature01</span>
<span class="line">nothing to commit, working tree clean</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在我们进行一次提交（暂存区域还有一个更改的文件没有提交呢）：</p><p>创建 d.txt 文件</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">$ <span class="token function">git</span> <span class="token function">add</span> d.txt</span>
<span class="line"></span>
<span class="line"><span class="token number">51018</span>@DESKTOP-6R8BLO2 MINGW64 ~/Desktop/git-study <span class="token punctuation">(</span>feature01<span class="token punctuation">)</span></span>
<span class="line">$ <span class="token function">git</span> commit <span class="token parameter variable">-am</span> <span class="token string">&#39;feature01&#39;</span></span>
<span class="line"><span class="token punctuation">[</span>feature01 f5e0b68<span class="token punctuation">]</span> feature01</span>
<span class="line"> <span class="token number">1</span> <span class="token function">file</span> changed, <span class="token number">1</span> insertion<span class="token punctuation">(</span>+<span class="token punctuation">)</span></span>
<span class="line"> create mode <span class="token number">100644</span> d.txt</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在仓库中的快照应该是酱紫（提交的快照由当前 HEAD 指针指向的分支来管理）：</p><figure><img src="`+d+`" alt="image-20210316221845292" tabindex="0" loading="lazy"><figcaption>image-20210316221845292</figcaption></figure><p>然后我们将 HEAD 指针切回 master 分支：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token number">51018</span>@DESKTOP-6R8BLO2 MINGW64 ~/Desktop/git-study <span class="token punctuation">(</span>feature01<span class="token punctuation">)</span></span>
<span class="line">$ <span class="token function">ls</span></span>
<span class="line">a.temp  a.txt  c.txt  d.txt  mintty.exe.stackdump</span>
<span class="line"></span>
<span class="line"><span class="token number">51018</span>@DESKTOP-6R8BLO2 MINGW64 ~/Desktop/git-study <span class="token punctuation">(</span>feature01<span class="token punctuation">)</span></span>
<span class="line">$ <span class="token function">git</span> checkout master</span>
<span class="line">Switched to branch <span class="token string">&#39;master&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token number">51018</span>@DESKTOP-6R8BLO2 MINGW64 ~/Desktop/git-study <span class="token punctuation">(</span>master<span class="token punctuation">)</span></span>
<span class="line">$ <span class="token function">ls</span></span>
<span class="line">a.temp  a.txt  c.txt  mintty.exe.stackdump</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>细心的朋友会发现上一次对 README.md 文件的修改已经荡然无存了，这是因为我们的工作目录已经回到 master 分支的状态中：</p><blockquote><p>在不同的分支分别提交</p></blockquote><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">$ <span class="token function">git</span> status</span>
<span class="line">On branch master</span>
<span class="line">nothing to commit, working tree clean</span>
<span class="line"></span>
<span class="line"><span class="token number">51018</span>@DESKTOP-6R8BLO2 MINGW64 ~/Desktop/git-study <span class="token punctuation">(</span>master<span class="token punctuation">)</span></span>
<span class="line">$ <span class="token builtin class-name">echo</span> <span class="token number">333</span> <span class="token operator">&gt;&gt;</span> c.txt</span>
<span class="line"></span>
<span class="line"><span class="token number">51018</span>@DESKTOP-6R8BLO2 MINGW64 ~/Desktop/git-study <span class="token punctuation">(</span>master<span class="token punctuation">)</span></span>
<span class="line">$ <span class="token function">git</span> <span class="token function">add</span> c.txt</span>
<span class="line">warning: LF will be replaced by CRLF <span class="token keyword">in</span> c.txt.</span>
<span class="line">The <span class="token function">file</span> will have its original line endings <span class="token keyword">in</span> your working directory</span>
<span class="line"></span>
<span class="line"><span class="token number">51018</span>@DESKTOP-6R8BLO2 MINGW64 ~/Desktop/git-study <span class="token punctuation">(</span>master<span class="token punctuation">)</span></span>
<span class="line">$ <span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&#39;master&#39;</span></span>
<span class="line"><span class="token punctuation">[</span>master baccb7f<span class="token punctuation">]</span> master</span>
<span class="line"> <span class="token number">1</span> <span class="token function">file</span> changed, <span class="token number">1</span> insertion<span class="token punctuation">(</span>+<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token number">51018</span>@DESKTOP-6R8BLO2 MINGW64 ~/Desktop/git-study <span class="token punctuation">(</span>master<span class="token punctuation">)</span></span>
<span class="line">$ <span class="token function">git</span> checkout feature01</span>
<span class="line">Switched to branch <span class="token string">&#39;feature01&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token number">51018</span>@DESKTOP-6R8BLO2 MINGW64 ~/Desktop/git-study <span class="token punctuation">(</span>feature01<span class="token punctuation">)</span></span>
<span class="line">$ <span class="token builtin class-name">echo</span> <span class="token number">333</span> <span class="token operator">&gt;&gt;</span> c.txt</span>
<span class="line"></span>
<span class="line"><span class="token number">51018</span>@DESKTOP-6R8BLO2 MINGW64 ~/Desktop/git-study <span class="token punctuation">(</span>feature01<span class="token punctuation">)</span></span>
<span class="line">$ <span class="token function">git</span> <span class="token function">add</span> c.txt</span>
<span class="line">warning: LF will be replaced by CRLF <span class="token keyword">in</span> c.txt.</span>
<span class="line">The <span class="token function">file</span> will have its original line endings <span class="token keyword">in</span> your working directory</span>
<span class="line"></span>
<span class="line"><span class="token number">51018</span>@DESKTOP-6R8BLO2 MINGW64 ~/Desktop/git-study <span class="token punctuation">(</span>feature01<span class="token punctuation">)</span></span>
<span class="line">$ <span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&#39;feature01&#39;</span></span>
<span class="line"><span class="token punctuation">[</span>feature01 b134862<span class="token punctuation">]</span> feature01</span>
<span class="line"> <span class="token number">1</span> <span class="token function">file</span> changed, <span class="token number">1</span> insertion<span class="token punctuation">(</span>+<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token number">51018</span>@DESKTOP-6R8BLO2 MINGW64 ~/Desktop/git-study <span class="token punctuation">(</span>feature01<span class="token punctuation">)</span></span>
<span class="line">$ got log <span class="token parameter variable">--graph</span></span>
<span class="line"></span>
<span class="line"><span class="token operator">|</span> Author: zhangnan <span class="token operator">&lt;</span><span class="token number">510180298</span>@qq.com<span class="token operator">&gt;</span></span>
<span class="line"><span class="token operator">|</span> Date:   Sat Mar <span class="token number">13</span> <span class="token number">18</span>:00:03 <span class="token number">2021</span> +0800</span>
<span class="line"><span class="token operator">|</span></span>
<span class="line"><span class="token operator">|</span>     feature01</span>
<span class="line"><span class="token operator">|</span></span>
<span class="line">* commit f5e0b68217b66d959bf9eeed7ad7631e4365f355</span>
<span class="line"><span class="token operator">|</span> Author: zhangnan <span class="token operator">&lt;</span><span class="token number">510180298</span>@qq.com<span class="token operator">&gt;</span></span>
<span class="line"><span class="token operator">|</span> Date:   Sat Mar <span class="token number">13</span> <span class="token number">17</span>:50:20 <span class="token number">2021</span> +0800</span>
<span class="line"><span class="token operator">|</span></span>
<span class="line"><span class="token operator">|</span>     feature01</span>
<span class="line"><span class="token operator">|</span></span>
<span class="line"><span class="token operator">|</span> * commit baccb7f29da8143adebc79ca4c10e15204e79411 <span class="token punctuation">(</span>master<span class="token punctuation">)</span></span>
<span class="line"><span class="token operator">|</span>/  Author: zhangnan <span class="token operator">&lt;</span><span class="token number">510180298</span>@qq.com<span class="token operator">&gt;</span></span>
<span class="line"><span class="token operator">|</span>   Date:   Sat Mar <span class="token number">13</span> <span class="token number">17</span>:59:20 <span class="token number">2021</span> +0800</span>
<span class="line"><span class="token operator">|</span></span>
<span class="line"><span class="token operator">|</span>       master</span>
<span class="line"><span class="token operator">|</span></span>
<span class="line">* commit 432621d36faf270eae133cfe2e976fc99df479a5</span>
<span class="line"><span class="token operator">|</span> Author: zhangnan <span class="token operator">&lt;</span><span class="token number">510180298</span>@qq.com<span class="token operator">&gt;</span></span>
<span class="line"><span class="token operator">|</span> Date:   Sat Mar <span class="token number">13</span> <span class="token number">17</span>:43:53 <span class="token number">2021</span> +0800</span>
<span class="line"><span class="token operator">|</span></span>
<span class="line"><span class="token operator">|</span>     <span class="token number">1</span></span>
<span class="line"><span class="token operator">|</span></span>
<span class="line">* commit 4c9e83b6d4ca3ca3d8b0b77bb5aca614dd755413</span>
<span class="line"><span class="token operator">|</span> Author: zhangnan <span class="token operator">&lt;</span><span class="token number">510180298</span>@qq.com<span class="token operator">&gt;</span></span>
<span class="line"><span class="token operator">|</span> Date:   Sat Mar <span class="token number">13</span> <span class="token number">17</span>:11:51 <span class="token number">2021</span> +0800</span>
<span class="line"><span class="token operator">|</span></span>
<span class="line"><span class="token operator">|</span>     <span class="token number">123</span></span>
<span class="line"><span class="token operator">|</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_9、合并分支" tabindex="-1"><a class="header-anchor" href="#_9、合并分支"><span>9、合并分支</span></a></h2><p>新建一个仓库</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">// 初始化一个仓库</span>
<span class="line">$ <span class="token function">git</span> init</span>
<span class="line">// 创建一个a.txt 文件，并且修改他的内容</span>
<span class="line">$ <span class="token function">touch</span> a.txt</span>
<span class="line"></span>
<span class="line">// 提交该分支</span>
<span class="line">$ <span class="token function">git</span> <span class="token function">add</span> a.txt</span>
<span class="line">$ <span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&#39;master&#39;</span></span>
<span class="line"></span>
<span class="line">// 切出一个分支</span>
<span class="line">$ <span class="token function">git</span> branch feature1</span>
<span class="line">// 切换到该分支</span>
<span class="line">$ <span class="token function">git</span> checkout feature1</span>
<span class="line">Switched to branch <span class="token string">&#39;feature1&#39;</span></span>
<span class="line">// 随意修改a.txt的内容</span>
<span class="line">。。。</span>
<span class="line">// 切换回主分支</span>
<span class="line">$ <span class="token function">git</span> checkout master</span>
<span class="line">Switched to branch <span class="token string">&#39;master&#39;</span></span>
<span class="line">// 合并分支</span>
<span class="line">$ <span class="token function">git</span> merge feature1</span>
<span class="line">Updating 540e027<span class="token punctuation">..</span>cae5dfc</span>
<span class="line">Fast-forward</span>
<span class="line"> a.txt <span class="token operator">|</span> <span class="token number">8</span> +++++++-</span>
<span class="line"> <span class="token number">1</span> <span class="token function">file</span> changed, <span class="token number">7</span> insertions<span class="token punctuation">(</span>+<span class="token punctuation">)</span>, <span class="token number">1</span> deletion<span class="token punctuation">(</span>-<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+u+`" alt="image-20210315100125472" tabindex="0" loading="lazy"><figcaption>image-20210315100125472</figcaption></figure><p>当一个子分支的使命完结之后，它就应该回归到主分支中去。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">$ <span class="token function">git</span> log <span class="token parameter variable">--decorate</span> <span class="token parameter variable">--all</span> <span class="token parameter variable">--graph</span> <span class="token parameter variable">--online</span></span>
<span class="line">fatal: unrecognized argument: <span class="token parameter variable">--online</span></span>
<span class="line"></span>
<span class="line"><span class="token number">51018</span>@DESKTOP-6R8BLO2 MINGW64 ~/Desktop/git-study <span class="token punctuation">(</span>feature01<span class="token punctuation">)</span></span>
<span class="line">$ <span class="token function">git</span> log <span class="token parameter variable">--decorate</span> <span class="token parameter variable">--all</span> <span class="token parameter variable">--graph</span> <span class="token parameter variable">--oneline</span></span>
<span class="line">* b134862 <span class="token punctuation">(</span>HEAD -<span class="token operator">&gt;</span> feature01<span class="token punctuation">)</span> feature01</span>
<span class="line">* f5e0b68 feature01</span>
<span class="line"><span class="token operator">|</span> * baccb7f <span class="token punctuation">(</span>master<span class="token punctuation">)</span> master</span>
<span class="line"><span class="token operator">|</span>/</span>
<span class="line">* 432621d <span class="token number">1</span></span>
<span class="line">* 4c9e83b <span class="token number">123</span></span>
<span class="line">* 8af2e68 secong</span>
<span class="line">* c7c0e3b first</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>合并分支我们使用 merge 命令，执行 git merge feature01 命令，将 feature 分支合并到 HEAD 所在的分支（master）上：</p><p>第一步 切出一个 feature2 分支，修改 master 分支中 a.txt 第一行数据，</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">// 先切出一个分支</span>
<span class="line">$ <span class="token function">git</span> branch feature2</span>
<span class="line"></span>
<span class="line">// 在master分支做修改，修改a.txt的第一行数据</span>
<span class="line">$ <span class="token function">git</span> <span class="token function">add</span> a.txt</span>
<span class="line"></span>
<span class="line">//提交master分支</span>
<span class="line">$ <span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&#39;master&#39;</span></span>
<span class="line"></span>
<span class="line">// 切换到feature2 分支</span>
<span class="line">$ <span class="token function">git</span> checkout feature2</span>
<span class="line">Switched to branch <span class="token string">&#39;feature2&#39;</span></span>
<span class="line"></span>
<span class="line">// 同样修改a.txt的第一行数据</span>
<span class="line">$ <span class="token function">git</span> <span class="token function">add</span> a.txt</span>
<span class="line">// 提交</span>
<span class="line">$ <span class="token function">git</span> commit <span class="token parameter variable">-m</span> feature2</span>
<span class="line"><span class="token punctuation">[</span>feature2 0ebb84a<span class="token punctuation">]</span> feature2</span>
<span class="line"> <span class="token number">1</span> <span class="token function">file</span> changed, <span class="token number">1</span> insertion<span class="token punctuation">(</span>+<span class="token punctuation">)</span>, <span class="token number">1</span> deletion<span class="token punctuation">(</span>-<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">// 切换到master分支</span>
<span class="line">$ <span class="token function">git</span> checkout master</span>
<span class="line">Switched to branch <span class="token string">&#39;master&#39;</span></span>
<span class="line"></span>
<span class="line">// 将feature2合并到master分支上</span>
<span class="line">$ <span class="token function">git</span> merge feature2</span>
<span class="line">// 发生了问题</span>
<span class="line">Auto-merging a.txt</span>
<span class="line">CONFLICT <span class="token punctuation">(</span>content<span class="token punctuation">)</span>: Merge conflict <span class="token keyword">in</span> a.txt</span>
<span class="line">Automatic merge failed<span class="token punctuation">;</span> fix conflicts and <span class="token keyword">then</span> commit the result.</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>a.txt 内容变成了如下：</p><div class="language-txt line-numbers-mode" data-highlighter="prismjs" data-ext="txt"><pre><code class="language-txt"><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span>
<span class="line">123123</span>
<span class="line">=======</span>
<span class="line">123345</span>
<span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; feature2</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>意思是说现在你需要先解决冲突的问题，Git 才能进行合并操作。所谓冲突，无非就是像两个分支中存在同名但内容却不同的文件，Git 不知道你要舍弃哪一个或保留哪一个，所以需要你自己来决定。 此时执行 git status 命令也会显示需要你解决的冲突：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">$ <span class="token function">git</span> status</span>
<span class="line">On branch master</span>
<span class="line">You have unmerged paths.</span>
<span class="line">  <span class="token punctuation">(</span>fix conflicts and run <span class="token string">&quot;git commit&quot;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">(</span>use <span class="token string">&quot;git merge --abort&quot;</span> to abort the merge<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">Unmerged paths:</span>
<span class="line">  <span class="token punctuation">(</span>use <span class="token string">&quot;git add &lt;file&gt;...&quot;</span> to mark resolution<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        both modified:   a.txt</span>
<span class="line"></span>
<span class="line">no changes added to commit <span class="token punctuation">(</span>use <span class="token string">&quot;git add&quot;</span> and/or <span class="token string">&quot;git commit -a&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以“=======”为界，上到“&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD”的内容表示当前分支，下到“&gt;&gt;&gt;&gt;&gt;&gt;&gt; feature”表示待合并的 feature 分支，之间的内容就是冲突的地方。</p><figure><img src="`+m+`" alt="image-20210315100412732" tabindex="0" loading="lazy"><figcaption>image-20210315100412732</figcaption></figure><p>我们就需要手动修改：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token number">123123</span></span>
<span class="line"><span class="token number">51018</span>@DESKTOP-6R8BLO2 MINGW64 ~/Desktop/git-study <span class="token punctuation">(</span>master<span class="token operator">|</span>MERGING<span class="token punctuation">)</span></span>
<span class="line">$ <span class="token function">git</span> <span class="token function">add</span> a.txt</span>
<span class="line"></span>
<span class="line"><span class="token number">51018</span>@DESKTOP-6R8BLO2 MINGW64 ~/Desktop/git-study <span class="token punctuation">(</span>master<span class="token operator">|</span>MERGING<span class="token punctuation">)</span></span>
<span class="line">$ <span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&#39;解决冲突&#39;</span></span>
<span class="line"><span class="token punctuation">[</span>master 569943e<span class="token punctuation">]</span> 解决冲突</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_10、删除分支" tabindex="-1"><a class="header-anchor" href="#_10、删除分支"><span>10、删除分支</span></a></h2><p>当一个功能开发完成，并且成功合并到主分支，我们应该删除分支</p><p>使用 <code>git branch -d 分支名</code> 命令：</p><p>执行 <code>git log --decorate --all --graph --oneline</code> 命令：</p><p>由于 Git 的分支原理实际上只是通过一个指针记载，所以创建和删除分支都几乎是瞬间完成。</p><p><em>注意：如果试图删除未合并的分支，Git 会提示你“该分支未完全合并，如果你确定要删除，请使用 git branch -D 分支名 命令。</em></p><h2 id="_11-变基-rebase" tabindex="-1"><a class="header-anchor" href="#_11-变基-rebase"><span>11. 变基（Rebase）</span></a></h2><p>在开发功能时，我们可能会在本地进行多次提交。然而，在 <code>master</code> 分支上，我们通常只希望保留每个功能测试完成后的一次完整提交记录，而不想保留所有中间的提交。这时，使用 <code>rebase</code> 就是一个很好的选择。它可以将本地的多次提交合并成一个提交，并允许你修改提交描述等信息。</p><h3 id="基本用法" tabindex="-1"><a class="header-anchor" href="#基本用法"><span>基本用法</span></a></h3><ul><li><p><strong>合并前两次提交</strong>：</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">git</span> rebase <span class="token parameter variable">-i</span> HEAD~~</span>
<span class="line"></span></code></pre></div></li><li><p><strong>合并特定提交到最新提交</strong>：</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">git</span> rebase <span class="token parameter variable">-i</span> <span class="token operator">&lt;</span>hash值<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre></div></li></ul><h3 id="对最近的-5-次提交进行操作" tabindex="-1"><a class="header-anchor" href="#对最近的-5-次提交进行操作"><span>对最近的 5 次提交进行操作</span></a></h3><p>要对最近的 5 次提交进行交互式变基，可以使用以下命令：</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">git</span> rebase <span class="token parameter variable">-i</span> HEAD~5</span>
<span class="line"></span></code></pre></div><p>执行此命令后，Git 会打开一个文本编辑器，显示最近 5 次提交的列表，每个提交前面都有一个命令（如 <code>pick</code>），示例如下：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">pick abcdef1 Commit message <span class="token number">1</span></span>
<span class="line">pick abcdef2 Commit message <span class="token number">2</span></span>
<span class="line">pick abcdef3 Commit message <span class="token number">3</span></span>
<span class="line">pick abcdef4 Commit message <span class="token number">4</span></span>
<span class="line">pick abcdef5 Commit message <span class="token number">5</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="编辑提交选项" tabindex="-1"><a class="header-anchor" href="#编辑提交选项"><span>编辑提交选项</span></a></h3><p>在编辑器中，你可以更改每个提交前的命令，常用的命令包括：</p><ul><li><code>pick</code>：保留该提交。</li><li><code>reword</code>：修改提交信息。</li><li><code>edit</code>：暂停变基，以便你修改该提交的内容。</li><li><code>squash</code>：将该提交与上一个提交合并。</li><li><code>fixup</code>：类似于 squash，但不保留该提交的提交信息。</li><li><code>drop</code>：删除该提交。</li></ul><h4 id="示例修改" tabindex="-1"><a class="header-anchor" href="#示例修改"><span>示例修改</span></a></h4><p>你可以只写首字母来简化命令：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">r abcdef1 Commit message <span class="token number">1</span></span>
<span class="line">s abcdef2 Commit message <span class="token number">2</span></span>
<span class="line">d abcdef3 Commit message <span class="token number">3</span></span>
<span class="line">p abcdef4 Commit message <span class="token number">4</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="保存并退出编辑器" tabindex="-1"><a class="header-anchor" href="#保存并退出编辑器"><span>保存并退出编辑器</span></a></h3><p>编辑完成后，保存文件并退出编辑器。Git 会根据你的指令执行相应操作。</p><h3 id="处理后续操作" tabindex="-1"><a class="header-anchor" href="#处理后续操作"><span>处理后续操作</span></a></h3><ul><li><p>如果选择了 <code>reword</code>，Git 会提示你输入新的提交信息。</p></li><li><p>如果选择了 <code>edit</code>，Git 会暂停变基，让你可以修改文件。完成后，使用以下命令继续：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">git</span> <span class="token function">add</span> <span class="token operator">&lt;</span>file<span class="token operator">&gt;</span></span>
<span class="line"><span class="token function">git</span> rebase <span class="token parameter variable">--continue</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="完成-rebase" tabindex="-1"><a class="header-anchor" href="#完成-rebase"><span>完成 Rebase</span></a></h3><p>一旦所有操作完成，Git 会将更改应用到你的分支上。</p><h3 id="推送更改-如有需要" tabindex="-1"><a class="header-anchor" href="#推送更改-如有需要"><span>推送更改（如有需要）</span></a></h3><p>如果你的分支已经推送到远程仓库，可能需要使用 <code>--force</code> 或 <code>--force-with-lease</code> 来更新远程分支：</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">git</span> push origin <span class="token operator">&lt;</span>branch-name<span class="token operator">&gt;</span> <span class="token parameter variable">--force</span></span>
<span class="line"></span></code></pre></div><div class="hint-container note"><p class="hint-container-title">注</p><ul><li><strong>备份</strong>：在执行交互式变基之前，请确保备份你的分支。</li><li><strong>避免在公共分支上执行</strong>：与普通变基一样，避免在其他人可能依赖的公共分支上进行交互式变基。</li></ul></div><h2 id="第四章-码云的使用" tabindex="-1"><a class="header-anchor" href="#第四章-码云的使用"><span>第四章 码云的使用</span></a></h2><p>既然 git 是一个团队合作开发的工具，那本地的仓库肯定不能满足团队开发的需求！就必须要有一个远程仓库统一管理我们的代码。</p><p>这类的工具有很多，公网上的有 github，国内的有码云 gitee</p><p>公司内部直接使用 gitlab （等学习了 docker 后我们部署一个 gitlab）</p><figure><img src="`+g+'" alt="image-20210316223001173" tabindex="0" loading="lazy"><figcaption>image-20210316223001173</figcaption></figure><h3 id="一、基本了解" tabindex="-1"><a class="header-anchor" href="#一、基本了解"><span>一、基本了解</span></a></h3><h4 id="_1-github" tabindex="-1"><a class="header-anchor" href="#_1-github"><span>（1）github</span></a></h4><figure><img src="'+b+'" alt="image-20210316141240499" tabindex="0" loading="lazy"><figcaption>image-20210316141240499</figcaption></figure><h4 id="_2-码云" tabindex="-1"><a class="header-anchor" href="#_2-码云"><span>（2）码云</span></a></h4><figure><img src="'+v+'" alt="image-20210316141308572" tabindex="0" loading="lazy"><figcaption>image-20210316141308572</figcaption></figure><h4 id="_3-gitlab-独立部署" tabindex="-1"><a class="header-anchor" href="#_3-gitlab-独立部署"><span>（3）gitlab 独立部署</span></a></h4><figure><img src="'+k+'" alt="image-20210316141401006" tabindex="0" loading="lazy"><figcaption>image-20210316141401006</figcaption></figure><p>但是基于网路的原因和学习成本，咱们使用码云。会一个就都会了。</p><h3 id="二、基本使用" tabindex="-1"><a class="header-anchor" href="#二、基本使用"><span>二、基本使用</span></a></h3><h4 id="_1、注册个账号" tabindex="-1"><a class="header-anchor" href="#_1、注册个账号"><span>1、注册个账号</span></a></h4><h4 id="_2、认识界面" tabindex="-1"><a class="header-anchor" href="#_2、认识界面"><span>2、认识界面</span></a></h4><p>开源软件--》里边有很多的优秀的开源软件学习</p><figure><img src="'+h+'" alt="image-20210316142109047" tabindex="0" loading="lazy"><figcaption>image-20210316142109047</figcaption></figure><blockquote><p>我的控制台</p></blockquote><figure><img src="'+f+'" alt="image-20210316142040365" tabindex="0" loading="lazy"><figcaption>image-20210316142040365</figcaption></figure><figure><img src="'+y+'" alt="image-20210316142303377" tabindex="0" loading="lazy"><figcaption>image-20210316142303377</figcaption></figure><blockquote><p>贡献度和动态</p></blockquote><figure><img src="'+x+'" alt="image-20210316142318619" tabindex="0" loading="lazy"><figcaption>image-20210316142318619</figcaption></figure><blockquote><p>认识仓库</p></blockquote><figure><img src="'+_+'" alt="image-20210316142705234" tabindex="0" loading="lazy"><figcaption>image-20210316142705234</figcaption></figure><p>1、pull Request 开发者在本地对源代码进行修改之后，想仓库提交请求合并的功能</p><p>2、Wiki 该功能通常用作文档手册的编写当中</p><p>3、Issues：是将一个任务或问题分配给一个 issue 进行跟踪和管理，可以当做 bug 管理系统使用，每一个功能的更正或修改都应该对应一个 issue，只要看 issues 就能看到关于这个更改的所有信息</p><p>4、统计就是仓库各项数据的数据统计，devOPs 是持续继承、持续交付的服务，服务：其他码云提供的一些服务。</p><p>5、管理：对仓库的一些修改删除等操作：</p><h4 id="_3、新建仓库" tabindex="-1"><a class="header-anchor" href="#_3、新建仓库"><span>3、新建仓库</span></a></h4><figure><img src="'+q+'" alt="image-20210316143811271" tabindex="0" loading="lazy"><figcaption>image-20210316143811271</figcaption></figure><figure><img src="'+D+'" alt="image-20210316143923380" tabindex="0" loading="lazy"><figcaption>image-20210316143923380</figcaption></figure><figure><img src="'+G+'" alt="image-20210316144205201" tabindex="0" loading="lazy"><figcaption>image-20210316144205201</figcaption></figure><blockquote><p>第一次进入</p></blockquote><figure><img src="'+S+'" alt="image-20210316144308897" tabindex="0" loading="lazy"><figcaption>image-20210316144308897</figcaption></figure><blockquote><p>会让你输入密码</p></blockquote><figure><img src="'+w+`" alt="image-20210316144512234" tabindex="0" loading="lazy"><figcaption>image-20210316144512234</figcaption></figure><h4 id="_4、建立本地仓库" tabindex="-1"><a class="header-anchor" href="#_4、建立本地仓库"><span>4、建立本地仓库</span></a></h4><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token number">51018</span>@DESKTOP-6R8BLO2 MINGW64 ~/Desktop/git-study</span>
<span class="line">$ <span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">&quot;Alm张楠&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token number">51018</span>@DESKTOP-6R8BLO2 MINGW64 ~/Desktop/git-study</span>
<span class="line">$ <span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">&quot;510180298@qq.com&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token number">51018</span>@DESKTOP-6R8BLO2 MINGW64 ~/Desktop/git-study</span>
<span class="line">$ <span class="token builtin class-name">cd</span> git-study</span>
<span class="line">bash: cd: git-study: No such <span class="token function">file</span> or directory</span>
<span class="line"><span class="token function">touch</span> README.md</span>
<span class="line"><span class="token function">git</span> <span class="token function">add</span> README.md</span>
<span class="line"><span class="token number">51018</span>@DESKTOP-6R8BLO2 MINGW64 ~/Desktop/git-study</span>
<span class="line">$ <span class="token function">git</span> init</span>
<span class="line">Initialized empty Git repository <span class="token keyword">in</span> C:/Users/51018/Desktop/git-study/.git/</span>
<span class="line"></span>
<span class="line"><span class="token number">51018</span>@DESKTOP-6R8BLO2 MINGW64 ~/Desktop/git-study <span class="token punctuation">(</span>master<span class="token punctuation">)</span></span>
<span class="line">$ <span class="token function">touch</span> README.md</span>
<span class="line"></span>
<span class="line"><span class="token number">51018</span>@DESKTOP-6R8BLO2 MINGW64 ~/Desktop/git-study <span class="token punctuation">(</span>master<span class="token punctuation">)</span></span>
<span class="line">$ <span class="token function">git</span> <span class="token function">add</span> README.md</span>
<span class="line"></span>
<span class="line"><span class="token number">51018</span>@DESKTOP-6R8BLO2 MINGW64 ~/Desktop/git-study <span class="token punctuation">(</span>master<span class="token punctuation">)</span></span>
<span class="line">$ <span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&quot;first commit&quot;</span></span>
<span class="line"><span class="token punctuation">[</span>master <span class="token punctuation">(</span>root-commit<span class="token punctuation">)</span> d885e2e<span class="token punctuation">]</span> first commit</span>
<span class="line"> <span class="token number">1</span> <span class="token function">file</span> changed, <span class="token number">0</span> insertions<span class="token punctuation">(</span>+<span class="token punctuation">)</span>, <span class="token number">0</span> deletions<span class="token punctuation">(</span>-<span class="token punctuation">)</span></span>
<span class="line"> create mode <span class="token number">100644</span> README.md</span>
<span class="line"></span>
<span class="line"><span class="token number">51018</span>@DESKTOP-6R8BLO2 MINGW64 ~/Desktop/git-study <span class="token punctuation">(</span>master<span class="token punctuation">)</span></span>
<span class="line">$ <span class="token function">git</span> remote <span class="token function">add</span> origin https://gitee.com/zhangnan716/git-study.git</span>
<span class="line"></span>
<span class="line"><span class="token number">51018</span>@DESKTOP-6R8BLO2 MINGW64 ~/Desktop/git-study <span class="token punctuation">(</span>master<span class="token punctuation">)</span></span>
<span class="line">$ <span class="token function">git</span> push <span class="token parameter variable">-u</span> origin master</span>
<span class="line">Enumerating objects: <span class="token number">3</span>, done.</span>
<span class="line">Counting objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">3</span>/3<span class="token punctuation">)</span>, done.</span>
<span class="line">Writing objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">3</span>/3<span class="token punctuation">)</span>, <span class="token number">215</span> bytes <span class="token operator">|</span> <span class="token number">215.00</span> KiB/s, done.</span>
<span class="line">Total <span class="token number">3</span> <span class="token punctuation">(</span>delta <span class="token number">0</span><span class="token punctuation">)</span>, reused <span class="token number">0</span> <span class="token punctuation">(</span>delta <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">remote: Powered by GITEE.COM <span class="token punctuation">[</span>GNK-5.0<span class="token punctuation">]</span></span>
<span class="line">To https://gitee.com/zhangnan716/git-study.git</span>
<span class="line"> * <span class="token punctuation">[</span>new branch<span class="token punctuation">]</span>      master -<span class="token operator">&gt;</span> master</span>
<span class="line">Branch <span class="token string">&#39;master&#39;</span> <span class="token builtin class-name">set</span> up to track remote branch <span class="token string">&#39;master&#39;</span> from <span class="token string">&#39;origin&#39;</span><span class="token builtin class-name">.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>第一个关键：添加一个远程仓库</p></blockquote><div class="language-bash" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">git</span> remote <span class="token function">add</span> origin https://gitee.com/zhangnan716/git-study.git</span>
<span class="line"></span></code></pre></div><blockquote><p>把代码推送到远程仓库</p></blockquote><div class="language-bash" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">git</span> push <span class="token parameter variable">-u</span> origin master</span>
<span class="line"></span></code></pre></div><blockquote><p>列出所有的远程仓库</p></blockquote><div class="language-bash" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">git</span> remote <span class="token parameter variable">-v</span></span>
<span class="line"></span></code></pre></div><blockquote><p>显示某个远程仓库信息</p></blockquote><div class="language-bash" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">git</span> remote show <span class="token punctuation">[</span>remote<span class="token punctuation">]</span></span>
<span class="line"></span></code></pre></div><blockquote><p>git push 的其他命令</p></blockquote><p>这几个常见的用法已足以满足我们日常开发的使用了，还有几个扩展的用法，如下：</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"> <span class="token function">git</span> push <span class="token parameter variable">-u</span> origin master</span>
<span class="line"></span></code></pre></div><p>如果当前分支与多个主机存在追踪关系，则可以使用 -u 参数指定一个默认主机，这样后面就可以不加任何参数使用 git push，</p><p>不带任何参数的 git push，默认只推送当前分支，这叫做 simple 方式，还有一种 matching 方式，会推送所有有对应的远程分支的本地分支， Git 2.0 之前默认使用 matching，现在改为 simple 方式</p><p>如果想更改设置，可以使用 git config 命令。git config --global push.default matching OR git config --global push.default simple；可以使用 git config -l 查看配置</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"> <span class="token function">git</span> push <span class="token parameter variable">--all</span> origin</span>
<span class="line"></span></code></pre></div><p>当遇到这种情况就是不管是否存在对应的远程分支，将本地的所有分支都推送到远程主机，这时需要 -all 选项</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"> <span class="token function">git</span> push <span class="token parameter variable">--force</span> origin</span>
<span class="line"></span></code></pre></div><p>git push 的时候需要本地先 git pull 更新到跟服务器版本一致，如果本地版本库比远程服务器上的低，那么一般会提示你 git pull 更新，如果一定要提交，那么可以使用这个命令。</p><figure><img src="`+O+'" alt="image-20210316144809258" tabindex="0" loading="lazy"><figcaption>image-20210316144809258</figcaption></figure><h4 id="_5、其他功能" tabindex="-1"><a class="header-anchor" href="#_5、其他功能"><span>5、其他功能</span></a></h4><blockquote><p>打标签</p></blockquote><figure><img src="'+E+'" alt="image-20210316144902740" tabindex="0" loading="lazy"><figcaption>image-20210316144902740</figcaption></figure><blockquote><p>分支选择</p></blockquote><figure><img src="'+j+'" alt="image-20210316144940684" tabindex="0" loading="lazy"><figcaption>image-20210316144940684</figcaption></figure><blockquote><p>创建分支</p></blockquote><figure><img src="'+H+'" alt="image-20210316145026969" tabindex="0" loading="lazy"><figcaption>image-20210316145026969</figcaption></figure><figure><img src="'+$+'" alt="image-20210316145048834" tabindex="0" loading="lazy"><figcaption>image-20210316145048834</figcaption></figure><blockquote><p>在统计模块，你还可以发布发型版，提供下载</p></blockquote><figure><img src="'+T+'" alt="image-20210316145150233" tabindex="0" loading="lazy"><figcaption>image-20210316145150233</figcaption></figure><figure><img src="'+L+'" alt="image-20210316145202029" tabindex="0" loading="lazy"><figcaption>image-20210316145202029</figcaption></figure><h3 id="三、一般的协同开发流程" tabindex="-1"><a class="header-anchor" href="#三、一般的协同开发流程"><span>三、一般的协同开发流程</span></a></h3><h4 id="_1、仓库" tabindex="-1"><a class="header-anchor" href="#_1、仓库"><span>1、仓库</span></a></h4><h5 id="_1-源仓库-线上版本库" tabindex="-1"><a class="header-anchor" href="#_1-源仓库-线上版本库"><span>（1）源仓库(线上版本库)</span></a></h5><p>在项目的开始,项目的发起者构建起一个项目的最原始的仓库,称为<code>origin。</code></p><p>源仓库的有两个作用：</p><ul><li>汇总参与该项目的各个开发者的代码</li><li>存放趋于稳定和可发布的代码</li></ul><p>源仓库应该是受保护的，开发者不应该直接对其进行开发工作。只有项目管理者能对其进行较高权限的操作。</p><h5 id="_2-开发者仓库-本地仓库" tabindex="-1"><a class="header-anchor" href="#_2-开发者仓库-本地仓库"><span>（2）开发者仓库(本地仓库)</span></a></h5><p>任何开发者都不会对源仓库进行直接的操作，源仓库建立以后，每个开发者需要做的事情就是把源仓库的“复制”一份，作为自己日常开发的仓库。这个复制是 gitlab 上面的<code>fork</code>。</p><p>每个开发者所 fork 的仓库是完全独立的，互不干扰，甚至与源仓库都无关。每个开发者仓库相当于一个源仓库实体的影像，开发者在这个影像中进行编码，提交到自己的仓库中，这样就可以轻易地实现团队成员之间的并行开发工作。而开发工作完成以后，开发者可以向源仓库发送 pull request，请求管理员把自己的代码合并到源仓库中，这样就实现了<strong>分布式开发工作</strong>和<strong>集中式的管理</strong>。</p><h4 id="_2、分支划分-branch" tabindex="-1"><a class="header-anchor" href="#_2、分支划分-branch"><span>2、分支划分（Branch）</span></a></h4><h5 id="_1-master-branch-主分支" tabindex="-1"><a class="header-anchor" href="#_1-master-branch-主分支"><span>（1）master branch：主分支</span></a></h5><p><strong>master</strong>：主分支从项目一开始便存在，它用于存放经过测试，已经完全稳定代码；在项目开发以后的任何时刻当中，<code>master</code>存放的代码应该是可作为产品供用户使用的代码。所以，应该随时保持<code>master</code>仓库代码的清洁和稳定，确保入库之前是通过完全测试和代码 reivew 的。master 分支是所有分支中最不活跃的，大概每个月或每两个月更新一次，每一次 master 更新的时候都应该用<code>git</code>打上<code>tag</code>，来说明产品有新版本发布。</p><h5 id="_2-develop-branch-开发分支" tabindex="-1"><a class="header-anchor" href="#_2-develop-branch-开发分支"><span>（2）develop branch：开发分支</span></a></h5><p><strong>develop</strong>：开发分支，一开始从<code>master</code>分支中分离出来，用于开发者存放基本稳定代码。每个开发者的仓库相当于源仓库的一个镜像，每个开发者自己的仓库上也有 master 和 develop。开发者把功能做好以后，是存放到自己的 develop 中，当测试完以后，可以向管理者发起一个 pull request，请求把自己仓库的 develop 分支合并到源仓库的 develop 中。所有开发者开发好的功能会在源仓库的 develop 分支中进行汇总，当 develop 中的代码经过不断的测试，已经逐渐趋于稳定了，接近产品目标了。这时候，就可以把<code>develop</code>分支合并到<code>master</code>分支中，发布一个新版本。</p><p>注:任何人不应该向<code>master</code>直接进行无意义的合并、提交操作。正常情况下，<code>master</code>只应该接受<code>develop</code>的合并，也就是说，<code>master</code>所有代码更新应该源于合并<code>develop</code>的代码。</p><h5 id="_3-feature-branch-功能分支" tabindex="-1"><a class="header-anchor" href="#_3-feature-branch-功能分支"><span>（3）feature branch：功能分支</span></a></h5><p><strong>feature</strong>：功能性分支，是用于开发项目的功能的分支，是开发者主要战斗阵地。开发者在本地仓库从<code>develop</code>分支分出功能分支，在该分支上进行功能的开发，开发完成以后再合并到<code>develop</code>分支上，这时候功能性分支已经完成任务，可以删除。功能性分支的命名一般为<code>feature-*</code>，|*为需要开发的功能的名称。</p><h5 id="_4-协议选择" tabindex="-1"><a class="header-anchor" href="#_4-协议选择"><span>（4）协议选择</span></a></h5><figure><img src="'+B+`" alt="image-20210316154759831" tabindex="0" loading="lazy"><figcaption>image-20210316154759831</figcaption></figure><blockquote><p>http 好还是 ssh 好</p></blockquote><ul><li>git 可以使用四种主要的协议来传输资料: 本地协议（Local），HTTP 协议，SSH（Secure Shell）协议及 git 协议。其中，本地协议由于目前大都是进行远程开发和共享代码所以一般不常用，而 git 协议由于缺乏授权机制且较难架设所以也不常用。</li><li>最常用的便是 SSH 和 HTTP(S)协议。git 关联远程仓库可以使用 http 协议或者 ssh 协议。</li></ul><blockquote><p>HTTPS 优缺点</p></blockquote><ul><li>优点 1: 相比 SSH 协议，可以使用用户名／密码授权是一个很大的优势，这样用户就不必须在使用 Git 之前先在本地生成 SSH 密钥对再把公钥上传到服务器。 对非资深的使用者，或者系统上缺少 SSH 相关程序的使用者，HTTP 协议的可用性是主要的优势。 与 SSH 协议类似，HTTP 协议也非常快和高效</li><li>优点 2: 企业防火墙一般会打开 80 和 443 这两个常见的 http 和 https 协议的端口，使用 http 和 https 的协议在架设了防火墙的企业里面就可以绕过安全限制正常使用 git，非常方便</li><li>缺点: 使用 http/https 除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令. 但是现在操作系统或者其他 git 工具都提供了 <code>keychain</code> 的功能，可以把你的账户密码记录在系统里，例如 OSX 的 Keychain 或者 Windows 的凭证管理器。所以也只需要输一次密码就搞定了。</li></ul><blockquote><p>SSH 的优缺点</p></blockquote><ul><li>优点 1: 架设 Git 服务器时常用 SSH 协议作为传输协议。 因为大多数环境下已经支持通过 SSH 访问 —— 即时没有也比较很容易架设。 SSH 协议也是一个验证授权的网络协议；并且，因为其普遍性，架设和使用都很容易。</li><li>缺点 1: SSH 服务端一般使用 22 端口，企业防火墙可能没有打开这个端口。</li><li>缺点 2: SSH 协议的缺点在于你不能通过他实现匿名访问。 即便只要读取数据，使用者也要有通过 SSH 访问你的主机的权限，这使得 SSH 协议不利于开源的项目。 如果你只在公司网络使用，SSH 协议可能是你唯一要用到的协议。 如果你要同时提供匿名只读访问和 SSH 协议，那么你除了为自己推送架设 SSH 服务以外，还得架设一个可以让其他人访问的服务。</li></ul><blockquote><p>总结</p></blockquote><p>HTTPS 利于匿名访问，适合开源项目可以方便被别人克隆和读取(但他没有 push 权限)；毕竟为了克隆别人一个仓库学习一下你就要生成个 ssh-key 折腾一番还是比较麻烦，所以 github 除了支持 ssh 协议必然提供了 https 协议的支持。</p><p>而 SSH 协议使用公钥认证比较适合内部项目。 当然了现在的代码管理平台例如 github、gitliab，两种协议都是支持的，基本上看自己喜好和需求来选择就可以了。</p><blockquote><p>生成/添加 SSH 公钥</p></blockquote><p><a href="https://gitee.com/help/labels/19" target="_blank" rel="noopener noreferrer">SSH Key</a> &amp; <a href="https://gitee.com/help/labels/29" target="_blank" rel="noopener noreferrer">SSH 公钥</a></p><p>Gitee 提供了基于 SSH 协议的 Git 服务，在使用 SSH 协议访问仓库仓库之前，需要先配置好账户/仓库的 SSH 公钥。</p><p>你可以按如下命令来生成 sshkey:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-C</span> <span class="token string">&quot;510180298@qq.com&quot;</span></span>
<span class="line"><span class="token comment"># Generating public/private rsa key pair...</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意：这里的 <code>xxxxx@xxxxx.com</code> 只是生成的 sshkey 的名称，并不约束或要求具体命名为某个邮箱。 现网的大部分教程均讲解的使用邮箱生成，其一开始的初衷仅仅是为了便于辨识所以使用了邮箱。</p></blockquote><p>按照提示完成三次回车，即可生成 ssh key。通过查看 <code>~/.ssh/id_rsa.pub</code> 文件内容，获取到你的 public key</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">cat</span> ~/.ssh/id_rsa.pub</span>
<span class="line"><span class="token comment"># ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC6eNtGpNGwstc....</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+z+'" alt="SSH生成" loading="lazy">SSH 生成</p><p>复制生成后的 ssh key，通过仓库主页 <strong>「管理」-&gt;「部署公钥管理」-&gt;「添加部署公钥」</strong> ，添加生成的 public key 添加到仓库中。</p><p><img src="'+R+`" alt="添加部署公钥" loading="lazy">添加部署公钥</p><p>添加后，在终端（Terminal）中输入</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">ssh</span> <span class="token parameter variable">-T</span> git@gitee.com</span>
<span class="line"></span></code></pre></div><p>首次使用需要确认并添加主机到本机 SSH 可信列表。若返回 <code>Hi XXX! You&#39;ve successfully authenticated, but Gitee.com does not provide shell access.</code> 内容，则证明添加成功。</p><p><img src="`+A+`" alt="SSH添加提示" loading="lazy">SSH 添加提示</p><p>添加成功后，就可以使用 SSH 协议对仓库进行操作了。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">$ <span class="token function">ssh</span> <span class="token parameter variable">-T</span> git@gitee.com</span>
<span class="line">Hi Alm张楠 <span class="token punctuation">(</span>DeployKey<span class="token punctuation">)</span><span class="token operator">!</span> You&#39;ve successfully authenticated, but GITEE.COM does not provide shell access.</span>
<span class="line">Note: Perhaps the current use is DeployKey.</span>
<span class="line">Note: DeployKey only supports pull/fetch operations</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>仓库公钥和可部署公钥</p></blockquote><p>为了便于用户在多个项目仓库下使用一套公钥，免于重复部署和管理的繁琐，Gitee 推出了「可部署公钥」功能，支持在一个仓库空间下使用当前账户名下/参与的另一个仓库空间的部署公钥，实现公钥共用。</p><p>部署公钥允许以只读的方式访问仓库，主要用于仓库在生产服务器的部署上，免去 HTTP 方式每次操作都要输入密码和普通 SSH 方式担心不小心修改仓库代码的麻烦。</p><p>部署公钥配置后的机器，只支持 clone 与 pull 等只读操作。如果您想要对仓库进行写操作，请 <a href="https://gitee.com/profile/sshkeys" target="_blank" rel="noopener noreferrer">添加个人公钥</a></p><p>个人公钥的添加地址：<a href="https://gitee.com/profile/sshkeys" target="_blank" rel="noopener noreferrer">https://gitee.com/profile/sshkeys</a></p><figure><img src="`+M+'" alt="image-20210316173317900" tabindex="0" loading="lazy"><figcaption>image-20210316173317900</figcaption></figure><h4 id="_3、实战" tabindex="-1"><a class="header-anchor" href="#_3、实战"><span>3、实战</span></a></h4><h5 id="_1-多人合作开发流程" tabindex="-1"><a class="header-anchor" href="#_1-多人合作开发流程"><span>（1）多人合作开发流程</span></a></h5><figure><img src="'+P+'" alt="image-20210318143710841" tabindex="0" loading="lazy"><figcaption>image-20210318143710841</figcaption></figure><p>1、首先项目经理初始化仓库建立好分支。一般会建立两个，一个 master 分支，一个 develop 分支。当然，也可能建立一个预发布版本的分支用于测试不如 realse 分支。</p><p>2、对个分支设置保护行为。</p><p>3、添加项目成员。</p><blockquote><p>小张的开发</p></blockquote><p>1、将项目克隆到本地。</p><p>2、切换至开发分支</p><p>3、在开发分支上新建一个单独的功能分支，进行开发。</p><p>4、开发完成，合并到开发分支，如果功能分支没用了，可以删除。</p><p>5、先拉取新代码（git pull）,其实就是合并，发生冲突，解决冲突。</p><p>6、解决完冲突，将代码推送至代码托管平台。</p><blockquote><p>1、新建仓库</p></blockquote><figure><img src="'+n+'" alt="image-20210316161344242" tabindex="0" loading="lazy"><figcaption>image-20210316161344242</figcaption></figure><blockquote><p>选择项目分支保护</p></blockquote><figure><img src="'+a+'" alt="image-20210316161514694" tabindex="0" loading="lazy"><figcaption>image-20210316161514694</figcaption></figure><blockquote><p>添加开发者（如果你的仓库是公共的，直接搜也行）</p></blockquote><figure><img src="'+N+`" alt="image-20210316162346682" tabindex="0" loading="lazy"><figcaption>image-20210316162346682</figcaption></figure><blockquote><p>此时开发者的账户汇出现该仓库 将项目克隆到本地，进行开发 开发完成推送至远程仓库</p></blockquote><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token function">git</span> clone 仓库地址</span>
<span class="line"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token function">git</span> checkout develop</span>
<span class="line"><span class="token comment"># 切换到\`develop\`分支</span></span>
<span class="line"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token function">git</span> checkout <span class="token parameter variable">-b</span> feature-discuss</span>
<span class="line"><span class="token comment"># 分出一个功能性分支</span></span>
<span class="line"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token function">touch</span> discuss.java</span>
<span class="line"><span class="token comment"># 假装discuss.java就是我们要开发的功能</span></span>
<span class="line"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span></span>
<span class="line"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&#39;finish discuss feature&#39;</span></span>
<span class="line"><span class="token comment"># 提交更改,多次测试以后</span></span>
<span class="line"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token function">git</span> checkout develop</span>
<span class="line"><span class="token comment"># 回到develop分支</span></span>
<span class="line"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token function">git</span> merge feature-discuss</span>
<span class="line"><span class="token comment"># 把做好的功能合并到develop中</span></span>
<span class="line"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token function">git</span> branch <span class="token parameter variable">-d</span> feature-discuss</span>
<span class="line"><span class="token comment"># 删除功能性分支</span></span>
<span class="line"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token function">git</span> push origin develop</span>
<span class="line"><span class="token comment"># 把develop提交到远程仓库中</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-跨团队合作开发" tabindex="-1"><a class="header-anchor" href="#_2-跨团队合作开发"><span>（2）跨团队合作开发</span></a></h5><figure><img src="`+I+'" alt="image-20210318145518474" tabindex="0" loading="lazy"><figcaption>image-20210318145518474</figcaption></figure><p>项目组成员的开发保持不变。</p><blockquote><p>跨团队成员的合作方式</p></blockquote><p>1、将代码 fork 到自己的仓库，同样可以进行相关的配置。</p><p>2、项目克隆到本地。</p><p>3、可以担任开发也可以多人开发。</p><p>4、开发完成后合并到自己的仓库</p><p>5、发起 pull request 请求给源仓库管理员</p><p>6、源仓库管理员进行 code review（重新检查代码，审核代码），测试审核，通过则进行合并。</p><blockquote><p>源仓库的构建</p></blockquote><p>这一步通常由项目发起人(项目管理员)来操作，源仓库为 op/Chanjet_Asset_Management,并初始化两个分支 master 和 develop.</p><blockquote><p>1、新建仓库</p></blockquote><figure><img src="'+n+'" alt="image-20210316161344242" tabindex="0" loading="lazy"><figcaption>image-20210316161344242</figcaption></figure><blockquote><p>选择项目分支保护</p></blockquote><figure><img src="'+a+'" alt="image-20210316161514694" tabindex="0" loading="lazy"><figcaption>image-20210316161514694</figcaption></figure><blockquote><p>开发者 fork 仓库到自己的账户下，作为自己开发所用的仓库。</p></blockquote><figure><img src="'+C+`" alt="image-20210316162529369" tabindex="0" loading="lazy"><figcaption>image-20210316162529369</figcaption></figure><blockquote><p>把自己开发者仓库 clone 到本地</p></blockquote><div class="language-bash" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token function">git</span> clone https://gitee.com/zhao-dengkai/git-study.git</span>
<span class="line"></span></code></pre></div><blockquote><p>修改内容，并提交，这里直接在码云上修改</p></blockquote><figure><img src="`+K+`" alt="image-20210316162711300" tabindex="0" loading="lazy"><figcaption>image-20210316162711300</figcaption></figure><blockquote><p>构建功能分支进行开发</p></blockquote><p>假设现在要开发一个“讨论”功能：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token function">git</span> checkout develop</span>
<span class="line"><span class="token comment"># 切换到\`develop\`分支</span></span>
<span class="line"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token function">git</span> checkout <span class="token parameter variable">-b</span> feature-discuss</span>
<span class="line"><span class="token comment"># 分出一个功能性分支</span></span>
<span class="line"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token function">touch</span> discuss.java</span>
<span class="line"><span class="token comment"># 假装discuss.java就是我们要开发的功能</span></span>
<span class="line"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span></span>
<span class="line"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&#39;finish discuss feature&#39;</span></span>
<span class="line"><span class="token comment"># 提交更改,多次测试以后</span></span>
<span class="line"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token function">git</span> checkout develop</span>
<span class="line"><span class="token comment"># 回到develop分支</span></span>
<span class="line"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token function">git</span> merge feature-discuss</span>
<span class="line"><span class="token comment"># 把做好的功能合并到develop中</span></span>
<span class="line"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token function">git</span> branch <span class="token parameter variable">-d</span> feature-discuss</span>
<span class="line"><span class="token comment"># 删除功能性分支</span></span>
<span class="line"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token function">git</span> push origin develop</span>
<span class="line"><span class="token comment"># 把develop提交到自己的远程仓库中</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时，上自己 gitlab 的项目主页中<code>develop</code>分支中查看，已经有<code>discuss.java</code>这个文件了：</p><blockquote><p>向项目经理提交 pull request</p></blockquote><blockquote><p>提交 pullrequest 请求页面</p></blockquote><figure><img src="`+W+'" alt="image-20210316162936698" tabindex="0" loading="lazy"><figcaption>image-20210316162936698</figcaption></figure><figure><img src="'+F+`" alt="image-20210316162907857" tabindex="0" loading="lazy"><figcaption>image-20210316162907857</figcaption></figure><p>在完成了“讨论”功能（当然，也可能对自己的<code>develop</code>进行了多次合并，完成了多个功能）,经过测试以后，觉得没问题，就可以请求管理员把<strong>自己仓库的</strong><code>develop</code><strong>分支</strong>合并到<strong>源仓库的</strong><code>develop</code>分支中。</p><blockquote><p>管理员测试、合并</p></blockquote><p>管理员登陆<code>gitlab</code>，看到了开发者对源仓库发起的<code>pull request</code>。</p><p>管理员需要做的事情就是：对开发者的代码进行<code>review</code>。</p><p>在他的本地测试新建一个测试分支，测试开发者的代码：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token function">git</span> checkout develop</span>
<span class="line"><span class="token comment"># 进入管理员本地的develop分支</span></span>
<span class="line"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token function">git</span> checkout <span class="token parameter variable">-b</span> manager-develop</span>
<span class="line"><span class="token comment"># 从develop分支中分出一个叫manager-develop的测试分支测试开发者的代码</span></span>
<span class="line"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token function">git</span> pull</span>
<span class="line">http://gitlab.rd.chanjet.com/op/Chanjet_Asset_Management.git develop</span>
<span class="line"><span class="token comment"># 把开发者的代码pull到测试分支中，进行测试</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>判断是否同意合并到源仓库的</strong><code>develop</code><strong>中</strong>，如果经过测试没问题，可以把开发者的代码合并到源仓库的<code>develop</code>中：</p><blockquote><p>审核通过</p></blockquote><figure><img src="`+U+'" alt="image-20210316163025733" tabindex="0" loading="lazy"><figcaption>image-20210316163025733</figcaption></figure><blockquote><p>接受请求</p></blockquote><figure><img src="'+X+'" alt="image-20210316163045014" tabindex="0" loading="lazy"><figcaption>image-20210316163045014</figcaption></figure><figure><img src="'+Y+'" alt="image-20210316163136823" tabindex="0" loading="lazy"><figcaption>image-20210316163136823</figcaption></figure><blockquote><p>总结：</p></blockquote><p>1、自己先 fork 代码到自己账户</p><p>2、拉倒本地，写代码</p><p>3、推到远程仓库</p><p>4、提交 issue</p><p>5、管理员测试，review 后统一，就合并了</p><p>6、如发生冲突，解决冲突即可</p><h4 id="_4、重点" tabindex="-1"><a class="header-anchor" href="#_4、重点"><span>4、重点</span></a></h4><ul><li>不要随便动别人的代码，即使要动也要商量！</li><li>不要随便动别人的代码，即使要动也要商量！</li><li>不要随便动别人的代码，即使要动也要商量！</li><li>记住一点，写代码和提交之前先拉去最新的代码！必须记住！</li><li>记住一点，写代和提交之码前先拉去最新的代码！必须记住！</li><li>记住一点，写代和提交之码前先拉去最新的代码！必须记住！</li></ul><p>能够很大程度的避免冲突！</p>',464)]))}const ns=e(Q,[["render",Z]]),as=JSON.parse('{"path":"/codenotes/devtool/git/git.html","title":"Git入门","lang":"zh-CN","frontmatter":{"title":"Git入门","icon":"git","category":["devtool","Git"],"tag":["Git","devtool","版本控制"],"sticky":false,"star":false,"article":false,"order":1,"timeline":false,"description":"第一章 Git 安装 提示 相关网站和文章： 《Pro Git 中文版(第二版)》 - 书栈网 · BookStack https://git-scm.com/book/zh/v2 Git 教程 - 廖雪峰的官方网站 图解 Git windows 安装：进入网站 https://git-scm.com/ 下载安装，然后在 cmd 命令行配置 还可以去清...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"Git入门\\",\\"description\\":\\"第一章 Git 安装 提示 相关网站和文章： 《Pro Git 中文版(第二版)》 - 书栈网 · BookStack https://git-scm.com/book/zh/v2 Git 教程 - 廖雪峰的官方网站 图解 Git windows 安装：进入网站 https://git-scm.com/ 下载安装，然后在 cmd 命令行配置 还可以去清...\\"}"],["meta",{"property":"og:url","content":"https://www.stazxr.cn/my-notes/my-notes/codenotes/devtool/git/git.html"}],["meta",{"property":"og:site_name","content":"終わり群星の知识宝库"}],["meta",{"property":"og:title","content":"Git入门"}],["meta",{"property":"og:description","content":"第一章 Git 安装 提示 相关网站和文章： 《Pro Git 中文版(第二版)》 - 书栈网 · BookStack https://git-scm.com/book/zh/v2 Git 教程 - 廖雪峰的官方网站 图解 Git windows 安装：进入网站 https://git-scm.com/ 下载安装，然后在 cmd 命令行配置 还可以去清..."}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-26T05:21:52.000Z"}],["meta",{"property":"article:tag","content":"版本控制"}],["meta",{"property":"article:tag","content":"devtool"}],["meta",{"property":"article:tag","content":"Git"}],["meta",{"property":"article:modified_time","content":"2025-05-26T05:21:52.000Z"}]]},"git":{"createdTime":1732064778000,"updatedTime":1748236912000,"contributors":[{"name":"talentestors","username":"talentestors","email":"talentestors@gmail.com","commits":5,"url":"https://github.com/talentestors"}]},"readingTime":{"minutes":41.43,"words":12430},"filePathRelative":"codenotes/devtool/git/git.md","autoDesc":true}');export{ns as comp,as as data};
