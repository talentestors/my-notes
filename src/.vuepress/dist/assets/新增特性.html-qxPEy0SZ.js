import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{ah as p,aj as n,ap as l,ao as a,al as c,am as i,an as o,ai as d}from"./app-CAqLFJSb.js";const r="/my-notes/assets/CSS3-XTcR5QKg.png",u={};function h(k,s){const e=o("RouteLink");return d(),p("div",null,[s[2]||(s[2]=n("h2",{id:"_1-css3-新特性",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-css3-新特性"},[n("span",null,"1. CSS3 新特性")])],-1)),n("blockquote",null,[n("p",null,[s[1]||(s[1]=a("相关：")),c(e,{to:"/codenotes/web/html/html5.html"},{default:i(()=>s[0]||(s[0]=[a("HTML5 新增特性")])),_:1,__:[0]})])]),s[3]||(s[3]=l(`<h3 id="_1-1-css3-新增选择器" tabindex="-1"><a class="header-anchor" href="#_1-1-css3-新增选择器"><span>1.1 CSS3 新增选择器</span></a></h3><p>CSS3 给我们新增了选择器，可以更加便捷，更加自由的选择元素。</p><ol><li>属性选择器</li><li>结构伪类选择器</li><li>伪元素选择器</li></ol><h3 id="_1-2-属性选择器" tabindex="-1"><a class="header-anchor" href="#_1-2-属性选择器"><span>1.2 属性选择器</span></a></h3><p>属性选择器可以根据元素特定属性的来选择元素。这样就可以不用借助于类或者 id 选择器。(权重是 0,0,1,0)</p><table><thead><tr><th>简介</th><th>选择</th></tr></thead><tbody><tr><td><code>E[att]</code></td><td>选择具有 att 属性的 E 元素</td></tr><tr><td><code>E[att:val</code></td><td>选择具有 att 属性且属性值等于 val 的 E 元素</td></tr><tr><td><code>E[att^=val]</code></td><td>匹配具有 att 属性且值以 val 开头的 E 元素</td></tr><tr><td><code>E[att$=val]</code></td><td>匹配具有 att 属性且值以 val 结尾的 E 元素</td></tr><tr><td><code>E[att*=val]</code></td><td>匹配具有 att 属性且值中含有 val 的 E 元素</td></tr></tbody></table><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">input[type=&quot;text&quot;]</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-HTML line-numbers-mode" data-highlighter="prismjs" data-ext="HTML"><pre><code class="language-HTML"><span class="line">&lt;input type=&quot;password&quot;&gt;</span>
<span class="line">&lt;input type=&quot;text&quot;&gt;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>类选择器、属性选择器、伪类选择器的权重都为 10</p><h3 id="_2-3-结构伪类选择器" tabindex="-1"><a class="header-anchor" href="#_2-3-结构伪类选择器"><span>2.3 结构伪类选择器</span></a></h3><p>结构伪类选择器主要根据文档结构来选择器元素，常用于根据父级选择器里面的子元素。</p><table><thead><tr><th>选择符</th><th>简介</th></tr></thead><tbody><tr><td><code>E:first-child</code></td><td>匹配父元素中的第一个子元素 E</td></tr><tr><td><code>E:last-child</code></td><td>匹配父元素中最后一个 E 元素</td></tr><tr><td><code>E:nth-child(n)</code></td><td>匹配父元素中的第 n 个子元素 E</td></tr><tr><td><code>E:first-of-type</code></td><td>指定类型 E 的第一个</td></tr><tr><td><code>E:last-of-type</code></td><td>指定类型 E 的最后一个</td></tr><tr><td><code>E:nth-of-type(n)</code></td><td>指定类型 E 的第 n 个</td></tr></tbody></table><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">ul li:first-child</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token selector">ul li:last-child</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token selector">ul li:nth-child(5)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">background-color</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重点：<code>E:nth-child(key)</code></p><ul><li><code>key</code> 可以是整数、关键字（<code>even/odd</code>）、公式（<code>n/2n/2n+1</code>）</li></ul><table><thead><tr><th>公式</th><th>取值</th></tr></thead><tbody><tr><td>2n</td><td>偶数</td></tr><tr><td>2n-1</td><td>奇数</td></tr><tr><td>5n</td><td>5 10 15 ...</td></tr><tr><td>n+</td><td>5 6 7 8 ...</td></tr><tr><td>-n+5</td><td>前五个</td></tr></tbody></table><p>关于 <code>nth-of-type</code> 与 <code>nth-of-child</code></p><ol><li><code>div:nth-child</code> 会把所有的盒子都排列序号 执行的时候首先看 <code>:nth-child(1)</code> 之后回去看 前面 <code>div</code></li><li><code>div:nth-of-type</code> 会把指定元素的盒子排列序号 执行的时候首先看 div 指定的元素 之后回去看 <code>:nth-of-type(1)</code> 第几个孩子</li></ol><p>区别：</p><ol><li><code>nth-child</code>对父元素里面所有孩子排序选择（序号是固定的）先找到第 n 个孩子，然后看看是否和 E 匹配</li><li><code>nth-of-type</code>对父元素里面指定子元素进行排序选择。先去匹配 E ，然后再根据 E 找第 n 个孩子</li></ol><h3 id="_2-4-伪元素选择器" tabindex="-1"><a class="header-anchor" href="#_2-4-伪元素选择器"><span>2.4 伪元素选择器</span></a></h3><p>伪元素选择器可以帮助我们利用 CSS 创建新标签元素，而不需要 HTML 标签，从而简化 HTML 结构。</p><table><thead><tr><th>选择符</th><th>简介</th></tr></thead><tbody><tr><td><code>::before</code></td><td>在元素内部的前面插入内容</td></tr><tr><td><code>::after</code></td><td>在元素内部的后面插入内容</td></tr></tbody></table><p>注意：</p><ul><li><strong>before</strong> 和 <strong>after</strong> 创建一个元素，但是属于行内元素</li><li>新创建的这个元素在文档树中是找不到的，所以我们称为伪元素</li><li>语法：<code>element:before{}</code></li><li>before 和 after 必须有 <strong>content 属性</strong></li><li>before 在父元素内容的前面创建元素， after 在父元素内容的后面插入元素</li><li><strong>伪元素选择器</strong>和<strong>标签选择器</strong>一样，权重为 1</li></ul><h4 id="_1-4-1-案例一-伪元素字体图标" tabindex="-1"><a class="header-anchor" href="#_1-4-1-案例一-伪元素字体图标"><span>1.4.1 案例一：伪元素字体图标</span></a></h4><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">div::after</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">top</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">right</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">&quot;icomoon&quot;</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">&quot;\\e91b&quot;</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">font-size</span><span class="token punctuation">:</span> 18px<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-4-2-案例二-伪元素遮罩层" tabindex="-1"><a class="header-anchor" href="#_1-4-2-案例二-伪元素遮罩层"><span>1.4.2 案例二：伪元素遮罩层</span></a></h4><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.tudou::before</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.3<span class="token punctuation">)</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>images/arr.png<span class="token punctuation">)</span></span> no-repeat center<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token selector">.tudou:hover::before</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-4-3-案例三-伪元素清除浮动" tabindex="-1"><a class="header-anchor" href="#_2-4-3-案例三-伪元素清除浮动"><span>2.4.3 案例三：伪元素清除浮动</span></a></h4><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.clearfix::after</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>双伪元素清除浮动</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.clearfix::before,</span>
<span class="line">.clearfix::after</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token selector">.clearfix::after</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-5-css3-盒子模型" tabindex="-1"><a class="header-anchor" href="#_1-5-css3-盒子模型"><span>1.5 CSS3 盒子模型</span></a></h3><p>CSS3 中可以通过 <code>box-sizing</code> 来指定盒模型，有 2 个值：即可指定为 <code>content-box</code>，<code>border-box</code> ，这样我们计算盒子大小的方式就发生了改变。</p><p>可以分成两种情况：</p><ol><li><code>box-sizing: content-box</code> 盒子大小为 width + padding + border （以前默认的）</li><li><code>box-sizing: border-box</code> 盒子大小为 width 如果盒子模型我们改为了 <code>box-sizing: border-box;</code> ，那<code>padding</code> 和 <code>border</code>就不会撑大盒子了（前提 <code>padding</code> 和 <code>border</code> 不会超过 width 宽度）</li></ol><h3 id="_1-6-css3-渐变" tabindex="-1"><a class="header-anchor" href="#_1-6-css3-渐变"><span>1.6 CSS3 渐变</span></a></h3><p>CSS 渐变是 CSS3 图像模块中添加的新类型的图像。CSS 渐变允许您在 <strong>两个或多个指定颜色之间显示平滑过渡</strong>。 浏览器支持两种类型的渐变：</p><ul><li>线性渐变（Linear Gradients）：向下/向上/向左/向右/对角方向，用 <code>linear-gradient()</code> 函数定义</li><li>径向渐变（Radial Gradients）：由它们的中心定义，用 <code>radial-gradient()</code> 函数定义</li></ul><h4 id="_1-6-1-线性渐变" tabindex="-1"><a class="header-anchor" href="#_1-6-1-线性渐变"><span>1.6.1 线性渐变</span></a></h4><p>语法</p><div class="language-css" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>direction<span class="token punctuation">,</span> color1<span class="token punctuation">,</span> color2<span class="token punctuation">,</span> ...<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p>参数</p><ul><li><code>direction</code>：指定了颜色过度的方向，不写默认为从上到下，值可以为 <code>to bottom</code>、<code>to top</code>、<code>to right</code>、<code>to left</code>、<code>to bottom right</code> 等。</li><li><code>color1</code>：可以有多个 <code>color</code> 值，指定了颜色变化的范围。</li></ul><h3 id="_1-7-css3-过渡-重点" tabindex="-1"><a class="header-anchor" href="#_1-7-css3-过渡-重点"><span>1.7 CSS3 过渡（重点）</span></a></h3><p>过渡（transition）是 CSS3 中具有颠覆性的特征之一，我们可以在不使用 Flash 动画或 JavaScript 的情况下，当元素从一种样式变换为另一种样式时为元素添加效果。</p><p>过渡动画：是从一个状态渐渐的过渡到另外一个状态 可以让我们页面更好看，更动感十足，虽然低版本浏览器不支持（ie9 以下版本）但是不会影响页面布局。</p><p>我们现在经常和 :hover 一起搭配使用。</p><h4 id="_1-7-1-transition-的使用" tabindex="-1"><a class="header-anchor" href="#_1-7-1-transition-的使用"><span>1.7.1 transition 的使用</span></a></h4><div class="language-css" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token property">transition</span><span class="token punctuation">:</span> 要过渡的属性 花费时间 运动曲线 何时开始<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><ol><li><strong>属性</strong>：想要变化的 css 属性，宽度高度背景颜色内外边距都可以。如果想要所有的属性都变化过渡，写一个 all 就可以。</li><li><strong>花费时间</strong>：单位是秒（必须写单位）比如 0.5s</li><li><strong>运动曲线</strong>：默认是 ease （可以省略） <ul><li><code>ease</code>：默认值，缓慢加速，然后缓慢减速的过渡效果。</li><li><code>linear</code>：匀速过渡效果。</li><li><code>ease-in</code>：缓慢加速的过渡效果。</li><li><code>ease-out</code>：缓慢减速的过渡效果。</li><li><code>ease-in-out</code>：先缓慢加速，再缓慢减速的过渡效果。</li><li><code>cubic-bezier(n,n,n,n)</code>：自定义的贝塞尔曲线函数，通过四个值来定义曲线的控制点，分别对应 <code>x1</code>、<code>y1</code>、<code>x2</code>、<code>y2</code>。</li></ul></li><li><strong>何时开始</strong>：单位是秒（必须写单位）可以设置延迟触发时间默认是 Os （可以省略）</li></ol><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">div</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">/* transition: width .5s, height .5s; */</span></span>
<span class="line">  <span class="token property">transition</span><span class="token punctuation">:</span> all 0.5s<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token selector">div:hover</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">width</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">background-color</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-8-css3-的其他特性" tabindex="-1"><a class="header-anchor" href="#_1-8-css3-的其他特性"><span>1.8 CSS3 的其他特性</span></a></h3><h4 id="_1-8-1-css3-滤镜-filter" tabindex="-1"><a class="header-anchor" href="#_1-8-1-css3-滤镜-filter"><span>1.8.1 CSS3 滤镜 filter</span></a></h4><p>filter CSS 属性将模糊或颜色偏移等图形效果应用于元素。</p><div class="language-css" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token property">filter</span><span class="token punctuation">:</span> 函数<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p>例如： <code>filter： blur(5px);</code> blur 模糊处理数值越大越模糊</p><h4 id="_1-8-2-css3-calc-函数" tabindex="-1"><a class="header-anchor" href="#_1-8-2-css3-calc-函数"><span>1.8.2 CSS3 calc 函数</span></a></h4><p>此 CSS 函数让你在声明 CSS 属性值时执行一些计算。</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token property">width</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>100%-30px<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">/* 子盒子永远比父盒子小30px */</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>括号里面可以使用 <code>+ - * /</code> 来进行计算。</p><h2 id="_2-2d-转换" tabindex="-1"><a class="header-anchor" href="#_2-2d-转换"><span>2. 2D 转换</span></a></h2><p>转换（<code>transform</code>）是 CSS3 中具有颠覆性的特征之一，可以实现元素的位移、旋转、缩放等效果。</p><p>转换可以理解为变形。</p><ul><li>移动：<code>translate</code></li><li>旋转：<code>rotate</code></li><li>缩放：<code>scale</code></li></ul><h3 id="_3-1-二维坐标系" tabindex="-1"><a class="header-anchor" href="#_3-1-二维坐标系"><span>3.1 二维坐标系</span></a></h3><h3 id="_3-2-移动-translate" tabindex="-1"><a class="header-anchor" href="#_3-2-移动-translate"><span>3.2 移动 translate</span></a></h3><p>语法</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>参数 <code>x, y</code> 可以是百分数，为盒子自身的宽度或高度。</li></ul><p>重点</p><ul><li>定义 2D 转换中的移动，沿着 X 和 Y 轴移动元素</li><li>translate 最大的优点：不会影响到其他元素的位置</li><li>translate 中的百分比单位是相对于 自身元素 的 <code>trainslate:(50%, 50%)</code></li><li>对行内标签没有效果</li></ul><h3 id="_2-3-让盒子实现水平和垂直居中" tabindex="-1"><a class="header-anchor" href="#_2-3-让盒子实现水平和垂直居中"><span>2.3 让盒子实现水平和垂直居中</span></a></h3><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token comment">/*子绝父相*/</span></span>
<span class="line"><span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span></span>
<span class="line"><span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span></span>
<span class="line"><span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span></span>
<span class="line"><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-50%<span class="token punctuation">,</span> -50%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-旋转-rotate" tabindex="-1"><a class="header-anchor" href="#_2-4-旋转-rotate"><span>2.4 旋转 rotate</span></a></h3><p>值为正数则顺时针旋转，为负数则逆时针旋转。</p><div class="language-css" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>45deg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><h3 id="_2-5-2d-转换中心点-transform-origin" tabindex="-1"><a class="header-anchor" href="#_2-5-2d-转换中心点-transform-origin"><span>2.5 2D 转换中心点 transform-origin</span></a></h3><p>我们可以通过设置 <code>transform-origin</code> 设置元素转换的中心点。</p><h4 id="_2-5-1-语法" tabindex="-1"><a class="header-anchor" href="#_2-5-1-语法"><span>2.5.1 语法</span></a></h4><div class="language-css" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token property">transform-origin</span><span class="token punctuation">:</span> x y<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><h4 id="_2-5-2-重点" tabindex="-1"><a class="header-anchor" href="#_2-5-2-重点"><span>2.5.2 重点</span></a></h4><ul><li>注意后面的参数 x 和 y 用空格隔开</li><li>x y 默认转换的中心点是元素的中心点（50% 50%）</li><li>还可以给 x y 设置像素或者方位名词（top bottom left right center）</li></ul><h3 id="_2-6-2d-转换之缩放-scale" tabindex="-1"><a class="header-anchor" href="#_2-6-2d-转换之缩放-scale"><span>2.6 2D 转换之缩放 scale</span></a></h3><div class="language-css" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p><code>x, y</code> 不跟单位的话，是指缩放的倍数。</p><div class="language-css" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span>2<span class="token punctuation">,</span> 1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><ul><li>参数大于 <code>1</code> 则放大，小于 <code>1</code> 则缩小。</li><li>可以配合 <code>transform-origin</code> 使用，改变缩放中心。</li><li><code>scale</code> 的优势：不占空间</li></ul><h3 id="_2-7-2d-转换综合写法" tabindex="-1"><a class="header-anchor" href="#_2-7-2d-转换综合写法"><span>2.7 2D 转换综合写法</span></a></h3><p>注意：</p><ol><li>同时使用多个转换，其格式为： <code>transform: translate(), rotate() scale()</code></li><li>其顺序会影转换的效果。（先旋转会改变坐标轴方向）</li><li>当我们同时有位移和其他属性的时候，记得要将位移放到最前.</li></ol><h2 id="_3-动画" tabindex="-1"><a class="header-anchor" href="#_3-动画"><span>3. 动画</span></a></h2><p>动画( animation ) 是 CSS3 中具有颠覆性的特征之一，可通过设置多个节点来精确控制一个或一组动画，常用来实现复杂的动画效果。 相比较过渡，动画可以实现更多变化，更多控制，连续自动播放等效果。</p><h3 id="_3-1-动画的基本使用" tabindex="-1"><a class="header-anchor" href="#_3-1-动画的基本使用"><span>3.1 动画的基本使用</span></a></h3><p>分为两步：</p><ol><li>定义动画 (动画序列 <code>@</code>)</li><li>使用动画</li></ol><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token comment">/* 1. 定义动画 */</span></span>
<span class="line"><span class="token atrule"><span class="token rule">@keyframes</span> move</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">/*开始状态*/</span></span>
<span class="line">  <span class="token selector">0%</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>0px<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token comment">/*结束状态*/</span></span>
<span class="line">  <span class="token selector">100%</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>1000px<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token selector">div</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">/* 2. 调用动画 */</span></span>
<span class="line">  <span class="token comment">/* 动画名称 */</span></span>
<span class="line">  <span class="token property">animation-name</span><span class="token punctuation">:</span> move<span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">/* 持续时间 */</span></span>
<span class="line">  <span class="token property">animation-duration</span><span class="token punctuation">:</span> 5s<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>动画序列</strong></p><ul><li>0% 是动画的开始，100% 是动画的完成。这样的规则就是动画序列。</li><li>在 <code>@keyframes</code> 中规定某项 CSS 样式，就能创建由当前样式逐渐改为新样式的动画效果。</li><li>动画是使元素从一种样式逐渐变化为另一种样式的效果。您可以改变任意多的样式任意多的次数。</li><li>请用百分比来规定变化发生的时间，或用关键词&quot;<code>from</code>&quot;和“<code>to</code>”，等同于 0%和 100%。</li></ul><p>注意:</p><ol><li>可以做多个状态的变化 <code>keyframes</code> 关键帧</li><li>百分比必须是整数</li><li>百分比是总时间 <code>animation-duration</code> 的划分</li></ol><h3 id="_3-2-动画常用属性" tabindex="-1"><a class="header-anchor" href="#_3-2-动画常用属性"><span>3.2 动画常用属性</span></a></h3><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><code>keyframes</code></td><td>规定动画。</td></tr><tr><td><code>animation</code></td><td>所有动画属性的简写属性,除了 animation-play-state 属性。</td></tr><tr><td><code>animation-name</code></td><td>规定@keyframes 动画的名称。(必须的)</td></tr><tr><td><code>animation-duration</code></td><td>规定动画完成一个周期所花费的秒或毫秒，默认是 0。（必须的)</td></tr><tr><td><code>animation-timing-function</code></td><td>规定动画的速度曲线，默认是“ease” .</td></tr><tr><td><code>animation-delay</code></td><td>规定动画何时开始，默认是 0.</td></tr><tr><td><code>animation-iteration-count</code></td><td>规定动画被播放的次数，默认是 1，还有 infinite</td></tr><tr><td><code>animation-direction</code></td><td>规定动画是否在下一周期逆向播放，默认是 &quot;normal&quot;,alternate 逆播放</td></tr><tr><td><code>animation-play-state</code></td><td>规定动画是否正在运行或暂停。默认是&quot;running&quot;,还有&quot;paused&quot;.</td></tr><tr><td><code>animation-fill-mode</code></td><td>规定动画结束后状态,保持 forwards 回到起始 backwards</td></tr></tbody></table><h3 id="_3-3-动画简写属性" tabindex="-1"><a class="header-anchor" href="#_3-3-动画简写属性"><span>3.3 动画简写属性</span></a></h3><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token property">animation</span><span class="token punctuation">:</span> 动画名称 持续时间 运动曲线 何时开始 播放次数 是否反方向</span>
<span class="line">  动画起始或者结束的状态<span class="token punctuation">;</span></span>
<span class="line"><span class="token property">animation</span><span class="token punctuation">:</span> name duration timing-function delay iteration-count direction</span>
<span class="line">  fill-mode<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-css" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token property">animation</span><span class="token punctuation">:</span> myfirst 5s linear 2s infinite alternate forwards<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><ul><li>简写属性里面不包含 <code>animation-play-state</code></li><li>暂停动画: <code>animation-play-state: puased;</code></li><li>经常和鼠标经过等其他配合使用想要动画走回来，而不是直接跳回来: <code>animation-direction: alternate</code></li><li>盒子动画结束后，停在结束位置: <code>animation-fill-mode: forwards</code></li><li>我们元素可以添加多个动画，用逗号分隔</li></ul><h3 id="_3-4-速度曲线" tabindex="-1"><a class="header-anchor" href="#_3-4-速度曲线"><span>3.4 速度曲线</span></a></h3><p><code>animation-timing-function</code> 规定动画的速度曲线，默认是“ease”</p><table><thead><tr><th style="text-align:center;">值</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">linear</td><td style="text-align:center;">动画从头到尾的速度是相同的。匀速</td></tr><tr><td style="text-align:center;">ease</td><td style="text-align:center;">默认。动画以低速开始，然后加快，在结束前变慢。</td></tr><tr><td style="text-align:center;">ease-in</td><td style="text-align:center;">动画以低速开始。</td></tr><tr><td style="text-align:center;">ease-out</td><td style="text-align:center;">动画以低速结束。</td></tr><tr><td style="text-align:center;">ease-in-out</td><td style="text-align:center;">动画以低速开始和结束。</td></tr><tr><td style="text-align:center;">steps()</td><td style="text-align:center;">指定了时间函数中的间隔数量（步长）</td></tr></tbody></table><h2 id="_4-3d-转换" tabindex="-1"><a class="header-anchor" href="#_4-3d-转换"><span>4. 3D 转换</span></a></h2><h3 id="_4-1-3d-移动" tabindex="-1"><a class="header-anchor" href="#_4-1-3d-移动"><span>4.1 3D 移动</span></a></h3><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateZ</span><span class="token punctuation">(</span>100px<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>100px<span class="token punctuation">)</span> <span class="token function">translateY</span><span class="token punctuation">(</span>100px<span class="token punctuation">)</span> <span class="token function">translateZ</span><span class="token punctuation">(</span>100px<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate3d</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>translateZ 沿着 Z 轴移动</li><li>translateZ 后面的单位我们一般跟 px</li><li>translateZ(100px) 向外移动 100px（向我们的眼睛来移动的）</li><li><code>translate3d(x,y,z)</code>xyz 是不能省略的，如果没有就写 0</li></ol><h3 id="_4-2-透视-perspective" tabindex="-1"><a class="header-anchor" href="#_4-2-透视-perspective"><span>4.2 透视 perspective</span></a></h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/perspective" target="_blank" rel="noopener noreferrer">https://developer.mozilla.org/zh-CN/docs/Web/CSS/perspective</a></p><p>在 2D 平面产生近大远小视觉立体，但是只是效果二维的</p><ul><li>如果想要在网页产生 3D 效果需要透视（理解成 3D 物体投影在 2D 平面内）。</li><li>模拟人类的视觉位置，可认为安排一只眼睛去看</li><li>透视我们也称为视距：视距就提人的眼睛到屏幕的距离</li><li>距离视觉点越近的在电脑平面成像越大，越远成像越小</li><li>透视的单位是像素</li></ul><p><strong>透视写在被观察元素的父盒子上面的</strong></p><div class="language-css" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token property">perspective</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><h3 id="_4-3-3d-旋转" tabindex="-1"><a class="header-anchor" href="#_4-3-3d-旋转"><span>4.3 3D 旋转</span></a></h3><h4 id="_4-4-1-retatex" tabindex="-1"><a class="header-anchor" href="#_4-4-1-retatex"><span>4.4.1 retateX</span></a></h4><p>沿着 x 轴正方向旋转 45 度</p><div class="language-css" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateX</span><span class="token punctuation">(</span>45deg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><figure><img src="https://pic.imgdb.cn/item/667c340ed9c307b7e9182138.gif" alt="x" tabindex="0" loading="lazy"><figcaption>x</figcaption></figure><h4 id="_4-4-2-retatey" tabindex="-1"><a class="header-anchor" href="#_4-4-2-retatey"><span>4.4.2 retateY</span></a></h4><p>沿着 y 轴正方向旋转 45deg</p><div class="language-css" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateY</span><span class="token punctuation">(</span>45deg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><figure><img src="https://pic.imgdb.cn/item/667c33f2d9c307b7e917e595.gif" alt="y" tabindex="0" loading="lazy"><figcaption>y</figcaption></figure><h4 id="_4-4-3-retatez" tabindex="-1"><a class="header-anchor" href="#_4-4-3-retatez"><span>4.4.3 retateZ</span></a></h4><p>沿着 Z 轴正方向旋转 45deg</p><div class="language-css" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateZ</span><span class="token punctuation">(</span>45deg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><figure><img src="https://pic.imgdb.cn/item/667c33c2d9c307b7e91781e9.gif" alt="Z" tabindex="0" loading="lazy"><figcaption>Z</figcaption></figure><h4 id="_4-4-4-自定义轴" tabindex="-1"><a class="header-anchor" href="#_4-4-4-自定义轴"><span>4.4.4 自定义轴</span></a></h4><p>沿着自定义轴旋转 deg 为角度（了解即可）</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate3d</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">,</span> deg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate3d</span><span class="token punctuation">(</span>1<span class="token punctuation">,</span> 1<span class="token punctuation">,</span> 1<span class="token punctuation">,</span> 45deg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>xyz</code>是表示旋转轴的矢量，是标示你是否希望沿着该轴旋转，最后一个标示旋转的角度。</p><ul><li><code>transform: rotate3d(1,0,0,45deg)</code> 就是沿看着 x 轴旋转 45deg</li><li><code>transform: rotate3d(1,1,0,45deg)</code> 就是沿看对角线旋转 45deg</li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p>左手大拇指指向旋转轴的正方向，其余四指指向的就是旋转的方向。</p></div><h3 id="_4-5-3d-呈现-transfrom-style" tabindex="-1"><a class="header-anchor" href="#_4-5-3d-呈现-transfrom-style"><span>4.5 3D 呈现 transfrom-style</span></a></h3><p><a href="https://developer.mozilla.org/docs/Web/CSS/transform-style" target="_blank" rel="noopener noreferrer">https://developer.mozilla.org/docs/Web/CSS/transform-style</a></p><div class="language-css" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token property">transform-style</span><span class="token punctuation">:</span> preserve-3d<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><ul><li><p>控制子元素是否开启三维立体环境。</p></li><li><p><code>transform-style: flat;</code>子元素不开启 3d 立体空间默认的</p></li><li><p><code>transform-style: preserve-3d;</code>子元素开启立体空间</p></li><li><p>代码写给父级，但是影响的是子盒子</p></li><li><p>这个属性很重要，后面必用</p><p>4.6 backface-visibility</p></li></ul><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/backface-visibility" target="_blank" rel="noopener noreferrer">https://developer.mozilla.org/zh-CN/docs/Web/CSS/backface-visibility</a></p><p>属性 <strong><code>backface-visibility</code></strong> 指定当元素背面朝向观察者时是否可见。</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token property">backface-visibility</span><span class="token punctuation">:</span> visible<span class="token punctuation">;</span> <span class="token comment">/*可见*/</span></span>
<span class="line"><span class="token property">backface-visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span> <span class="token comment">/*不可见*/</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>元素的背面是其正面的镜像。虽然在 2D 中不可见，但是当变换导致元素在 3D 空间中旋转时，背面可以变得可见。 （此属性对 2D 变换没有影响，它没有透视。）</p><h2 id="_5-浏览器私有属性" tabindex="-1"><a class="header-anchor" href="#_5-浏览器私有属性"><span>5. 浏览器私有属性</span></a></h2><p>浏览器私有前缀是为了兼容老版本的写法，比较新版本的浏览器无须添加。</p><ol><li><p>私有前缀</p><ul><li><code>-moz-</code>: 代表 firefox 浏览器私有属性</li><li><code>-ms-</code>: 代表 ie 浏览器私有属性</li><li><code>-webkit-</code>: 代表 safari、chrome 私有属性-o-∶ 代表 Opera 私有属性</li></ul></li><li><p>提倡的写法</p></li></ol><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token property">-moz-border-radius</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span></span>
<span class="line"><span class="token property">-webkit-border-radius</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span></span>
<span class="line"><span class="token property">-o-border-radius</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span></span>
<span class="line"><span class="token property">border-radius</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-css3-新特性" tabindex="-1"><a class="header-anchor" href="#_6-css3-新特性"><span>6. CSS3 新特性</span></a></h2><figure><img src="`+r+'" alt="CSS3" tabindex="0" loading="lazy"><figcaption>CSS3</figcaption></figure>',154))])}const g=t(u,[["render",h]]),b=JSON.parse('{"path":"/codenotes/web/css/%E6%96%B0%E5%A2%9E%E7%89%B9%E6%80%A7.html","title":"5. CSS3 新增特性","lang":"zh-CN","frontmatter":{"title":"5. CSS3 新增特性","icon":"css","category":["前端","CSS"],"tag":["CSS","web","CSS三大特性"],"sticky":false,"star":false,"article":false,"order":5,"timeline":false,"description":"1. CSS3 新特性 相关： 1.1 CSS3 新增选择器 CSS3 给我们新增了选择器，可以更加便捷，更加自由的选择元素。 属性选择器 结构伪类选择器 伪元素选择器 1.2 属性选择器 属性选择器可以根据元素特定属性的来选择元素。这样就可以不用借助于类或者 id 选择器。(权重是 0,0,1,0) 类选择器、属性选择器、伪类选择器的权重都为 10 ...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"5. CSS3 新增特性\\",\\"description\\":\\"1. CSS3 新特性 相关： 1.1 CSS3 新增选择器 CSS3 给我们新增了选择器，可以更加便捷，更加自由的选择元素。 属性选择器 结构伪类选择器 伪元素选择器 1.2 属性选择器 属性选择器可以根据元素特定属性的来选择元素。这样就可以不用借助于类或者 id 选择器。(权重是 0,0,1,0) 类选择器、属性选择器、伪类选择器的权重都为 10 ...\\"}"],["meta",{"property":"og:url","content":"https://www.stazxr.cn/my-notes/my-notes/codenotes/web/css/%E6%96%B0%E5%A2%9E%E7%89%B9%E6%80%A7.html"}],["meta",{"property":"og:site_name","content":"終わり群星の知识宝库"}],["meta",{"property":"og:title","content":"5. CSS3 新增特性"}],["meta",{"property":"og:description","content":"1. CSS3 新特性 相关： 1.1 CSS3 新增选择器 CSS3 给我们新增了选择器，可以更加便捷，更加自由的选择元素。 属性选择器 结构伪类选择器 伪元素选择器 1.2 属性选择器 属性选择器可以根据元素特定属性的来选择元素。这样就可以不用借助于类或者 id 选择器。(权重是 0,0,1,0) 类选择器、属性选择器、伪类选择器的权重都为 10 ..."}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:image","content":"https://pic.imgdb.cn/item/667c340ed9c307b7e9182138.gif"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-26T05:21:52.000Z"}],["meta",{"property":"article:tag","content":"CSS三大特性"}],["meta",{"property":"article:tag","content":"web"}],["meta",{"property":"article:tag","content":"CSS"}],["meta",{"property":"article:modified_time","content":"2025-05-26T05:21:52.000Z"}]]},"git":{"createdTime":1718465692000,"updatedTime":1748236912000,"contributors":[{"name":"talentestors","username":"talentestors","email":"talentestors@gmail.com","commits":6,"url":"https://github.com/talentestors"}]},"readingTime":{"minutes":12.81,"words":3842},"filePathRelative":"codenotes/web/css/新增特性.md","autoDesc":true}');export{g as comp,b as data};
