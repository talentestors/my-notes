import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{ah as a,ap as p,ai as e}from"./app-CAqLFJSb.js";const t="/my-notes/assets/image-20210916114632687-3a0f7563-CMDl5958.png",c="/my-notes/assets/image-20210916114642170-50d1f10e-C_WHM3lB.png",l="/my-notes/assets/image-20210916113109617-bf4c6e3c-K94W4vyU.png",o="/my-notes/assets/image-20210916103731515-22af91cf-CubcNa7t.png",i="/my-notes/assets/image-20210916130932678-2028fdb9-DxxwTxSi.png",u="/my-notes/assets/image-20210916143032566-51fb5761-054ONUkV.png",k="/my-notes/assets/image-20210916143428054-c2fee3a5-DiHius5k.png",r={};function d(m,n){return e(),a("div",null,n[0]||(n[0]=[p('<h2 id="一、nio-简介" tabindex="-1"><a class="header-anchor" href="#一、nio-简介"><span>一、NIO 简介</span></a></h2><p>1）Java BIO ： 同步并阻塞(传统阻塞型)，服务器实现模式为一个连接一个线程，即客户端有连接请求时服务器端就需要启动一个线程进行处理，如果这个连接不做任何事情会造成不必要的线程开销。</p><figure><img src="'+t+'" alt="image-20210916114632687" tabindex="0" loading="lazy"><figcaption>image-20210916114632687</figcaption></figure><p>2）Java NIO ： 同步非阻塞，服务器实现模式为一个线程处理多个请求(连接)，即客户端发送的连接请求都会注册到多路复用器上，多路复用器轮询到连接有 I/O 请求就进行处理。</p><figure><img src="'+c+`" alt="image-20210916114642170" tabindex="0" loading="lazy"><figcaption>image-20210916114642170</figcaption></figure><h2 id="二、操作系统的几个概念" tabindex="-1"><a class="header-anchor" href="#二、操作系统的几个概念"><span>二、操作系统的几个概念</span></a></h2><h3 id="_1、内核态和用户态" tabindex="-1"><a class="header-anchor" href="#_1、内核态和用户态"><span>1、内核态和用户态</span></a></h3><p>内核态：cpu 可以访问内存的所有数据，包括外围设备，例如硬盘，网卡，CUP 也可以将自己从一个程序切换到另一个程序。</p><p>用户态：只能受限的访问内存，且不允许访问外围设备，占用 CPU 的能力被剥夺。</p><blockquote><p>为什么要有用户态和内核态？</p></blockquote><p>由于需要限制不同的程序之间的访问能力, 防止他们获取别的程序的内存数据, 或者获取外围设备的数据, 并发送到网络, CPU 划分出两个权限等级 -- 用户态和内核态。</p><blockquote><p>什么时候会发生内核态和用户态的切换？</p></blockquote><p>【用户态在需要申请外部资源的时候会切换至内核态】。比如执行系统调用、发生中断、异常等，内核态执行完成会回退至用户态。</p><h3 id="_2、系统调用" tabindex="-1"><a class="header-anchor" href="#_2、系统调用"><span>2、系统调用</span></a></h3><p>由操作系统实现提供的所有系统调用所构成的集合即程序接口或应用编程接口(Application Programming Interface，API)。【应用程序】同系统之间的接口。</p><p>系统调用是操作系统开发的接口，开发者可以使用【系统调用】获取系统资源。就是操作系统的代码开放了一些接口让你使用，比如创建个文件，读取个文件。</p><blockquote><p>常见的系统调用如下：</p></blockquote><p>1、和进程、线程相关 fork 创建一个子进程</p><p>2、文件相关的 creat chmod chown read 从一个文件描述符中读取内容 write——向一个文件描述符中写入内容 close——关闭文件描述符</p><p>3、设备相关的 read write</p><p>4、信息相关的 get...</p><p>5、通信相关的 pipe</p><blockquote><p>文件描述符</p></blockquote><p>比如我们执行系统调用，常见文件，打开文件等。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token keyword">int</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>pathname<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>pathname<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span> <span class="token class-name">mode_t</span> mode<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">creat</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>pathname<span class="token punctuation">,</span> <span class="token class-name">mode_t</span> mode<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>flags：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">O_RDONLY          以只读方式打开文件</span>
<span class="line">O_WRONLY         以只写方式打开文件</span>
<span class="line">O_RDWR              以读和写的方式打开文件</span>
<span class="line">上面三个只能选择一个，下面的可以合理的任意组合：</span>
<span class="line">O_CREAT             打开文件，如果文件不存在则建立文件</span>
<span class="line">O_APPEND           强制write()从文件尾开始</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>mode：参数可选：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">S_IRWXU</span> <span class="token expression"><span class="token number">00700</span>     文件所有者可读可写可执行</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">S_IRUSR</span> <span class="token expression"><span class="token number">00400</span>     文件所有者可读</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">S_IWUSR</span> <span class="token expression"><span class="token number">00200</span>     文件所有者可写</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">S_IXUSR</span> <span class="token expression"><span class="token number">00100</span>     文件所有者可执行</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">S_IRWXG</span> <span class="token expression"><span class="token number">00070</span>     文件用户组可写可读可执行</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">S_IRGRP</span> <span class="token expression"><span class="token number">00040</span>     文件用户组可读</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">S_IWGRP</span> <span class="token expression"><span class="token number">00020</span>     文件用户组可写</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">S_IXGRP</span> <span class="token expression"><span class="token number">00010</span>     文件用户组可执行</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">S_IRWXO</span> <span class="token expression"><span class="token number">00007</span>     其他用户可写可读可执行</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">S_IROTH</span> <span class="token expression"><span class="token number">00004</span>     其他用户可读</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">S_IWOTH</span> <span class="token expression"><span class="token number">00002</span>     其他用户可写</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们发现这两个系统调用（函数）有一个 int 类型的返回值，这个返回值就是文件描述符。</p><p>如同：</p><div class="language-java" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;D://a.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p>中的 file。</p><h3 id="_3、系统中断" tabindex="-1"><a class="header-anchor" href="#_3、系统中断"><span>3、系统中断</span></a></h3><figure><img src="`+l+'" alt="image-20210916113109617" tabindex="0" loading="lazy"><figcaption>image-20210916113109617</figcaption></figure><blockquote><p>中断的分类：</p></blockquote><p>【中断源】是指能够引起中断的原因。一台【处理器】可能有很多中断源,但按其性质和处理方法,大致可分为如下五类：</p><ol><li>机器故障中断，比如掉电。</li><li>程序性中断。现行程序本身的异常事件引起的，可分为以下三种：一是程序性错误，非法操作和除数为零等；二是产生特殊的运算结果，例如定点溢出；三是程序出现某些预先确定要跟踪的事件，跟踪操作主要用于<strong>程序调试</strong>。有些机器把程序性中断称为“异常”，不称为中断。</li><li>IO－【输出设备】中断，IO 中断。</li><li>外中断。来自控制台【中断开关】、计时器、时钟或其他设备，这类中断的处理较简单，实时性强。</li><li>调用管理程序。用户程序利用专用指令“调用管理程序”发【中断请求】，是用户程序和操作系统之间的联系桥梁。</li></ol><blockquote><p>系统中断有什么好处：</p></blockquote><p>1、分时操作，解决 CPU 的快速处理和慢速 IO 设备的问题。</p><p>2、实时处理，word 中可以一边打字一边做拼写检查。</p><p>3、故障处理，会优先处理故障。</p><h3 id="_4、dma" tabindex="-1"><a class="header-anchor" href="#_4、dma"><span>4、DMA</span></a></h3><p>DMA(Direct Memory Access，直接存储器访问) ，它允许不同速度的硬件装置来沟通，而不需要依赖于[ CPU ](<a href="https://baike.baidu.com/item/" target="_blank" rel="noopener noreferrer">https://baike.baidu.com/item/</a> CPU /120556)的大量中断负载。否则，CPU 需要从来源把每一片段的资料复制到暂存器，然后把它们再次写回到新的地方。在这个时间中，CPU 对于其他的工作来说就无法使用。</p><p>当 CPU 需要访问外设（磁盘、网卡、usb）的数据时，将任务丢给 DMA，有 DMA 负责利用总线将数据先拷贝到内存，DMA 传输前，CPU 要把总线控制权交给 DMA 控制器，而在结束 DMA 传输后，DMA 控制器应立即把总线控制权再交回给 CPU。传输结束后，发出中断信号，通知 CPU。</p><figure><img src="'+o+`" alt="image-20210916103731515" tabindex="0" loading="lazy"><figcaption>image-20210916103731515</figcaption></figure><h3 id="_5、数据结构位图-bitmap" tabindex="-1"><a class="header-anchor" href="#_5、数据结构位图-bitmap"><span>5、数据结构位图 bitmap</span></a></h3><p>有一个场景：需要你统计你的同事的一个月的打卡记录。</p><p>你要怎么做，创建三十几个变量，0 代表没打卡，1 代表已打卡？</p><p>事实上我们使用一个 int 能表示：</p><div class="language-text" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">11111111 10101111 11111111 11111110</span>
<span class="line"></span></code></pre></div><p>一个 int 四个字节，就是三十二位，从第 0 位开始算第一天的打卡记录，那么有三十二位足够了，因为一个月最多也就 31 天。</p><p>我们能很简单的看出他第 10 天和 12 天没有打卡。</p><h2 id="三、nio-相关的系统调用" tabindex="-1"><a class="header-anchor" href="#三、nio-相关的系统调用"><span>三、NIO 相关的系统调用</span></a></h2><p>首先，每个客户端连接在 Linux 系统下，都有一个文件描述符 fd 与之对应，文件描述符有一个编号，不同的编号表示不同的连接。</p><h3 id="_1、select-系统调用" tabindex="-1"><a class="header-anchor" href="#_1、select-系统调用"><span>1、select 系统调用</span></a></h3><p>select 系统调用有一个重要参数，为 fd 文件描述符集合，即你要监听哪些文件描述符（哪些连接），这个文件描述符集合 rset 用一个 bitmap 位图表示，位图大小为 1024，即最多只能监听 1024 个客户端连接。</p><p>当发起系统调用时，会将 rset 拷贝到内核态，然后内核态监听有没有数据可以处理，监听的所有文件描述符都没有数据的话会一直阻塞，直到有数据时，将有数据的 fd 索引置一，然后返回给用户态</p><p>Select 缺点：</p><ul><li>位图大小默认 1024，有上限。</li><li>每次都需要创建一个文件描述符位图并拷贝到内核态。</li></ul><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token keyword">int</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token keyword">int</span> nfds<span class="token punctuation">,</span> fd_set <span class="token operator">*</span>readfds<span class="token punctuation">,</span> fd_set <span class="token operator">*</span>writefds<span class="token punctuation">,</span></span>
<span class="line">                  fd_set <span class="token operator">*</span>exceptfds<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">timeval</span> <span class="token operator">*</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>nfds：要检测的文件描述符数量，最大文件描述符加 1。</li><li>readfds：指定了被读监控的文件描述符集；</li><li>writefds：指定了被写监控的文件描述符集；</li><li>exceptfds：指定了被例外条件监控的文件描述符集；</li><li>timeout：超时时间。</li></ol><p>readfds 是个长度为 1024 的 bitmap。我们都知道 fd 文件描述符有一个序号，</p><p>如果现在我监听 3，6，8 号的 fd，那么位图就是：</p><div class="language-text" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">...10100100</span>
<span class="line"></span></code></pre></div><p>那么 select 的具体流程是什么呢？</p><p>1、应用程序创建 socket，生成文件描述符，并生成 bitmap，使用 hash 的方式将 bitmap 的对应位置置一。</p><p>2、执行系统调用，将 bitmap 拷贝至内核空间，根据 bitmap 遍历对应的文件描述符，一旦有事件产生就返回。</p><p>3、用户程序遍历文件描述符，处理请求。</p><p>4、应用程序不停的调用 select 即可。</p><figure><img src="`+i+'" alt="image-20210916130932678" tabindex="0" loading="lazy"><figcaption>image-20210916130932678</figcaption></figure><p>select 模型已经很不错了，但是依然有不足的地方：</p><ol><li>bitmap 位图上限是 1024，所以能监控的 fd 最多也就这么多。</li><li>fset 位图不可重用，每次赋值全部清零，状态全部丢失。</li><li>fset 位图需要不断的进行用户空间到内核空间的拷贝。</li><li>每次查找时间复杂度都是 O(n)。</li></ol><p>说句实话，如果没有更好的选择方案，这都不是问题。</p><h3 id="_2、poll-系统调用" tabindex="-1"><a class="header-anchor" href="#_2、poll-系统调用"><span>2、Poll 系统调用</span></a></h3><p>Poll 工作原理与 Select 基本相同，不同的只是将位图数组改成数组，也有资料说是链表，没有了最大连接数 1024 的限制，依然有 fd 集合的拷贝和 O(n)的遍历过程。</p><figure><img src="'+u+`" alt="image-20210916143032566" tabindex="0" loading="lazy"><figcaption>image-20210916143032566</figcaption></figure><div class="language-c" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"> <span class="token keyword">int</span> <span class="token function">poll</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">pollfd</span> <span class="token operator">*</span>fds<span class="token punctuation">,</span> <span class="token class-name">nfds_t</span> nfds<span class="token punctuation">,</span> <span class="token keyword">int</span> timeout<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p>这个系统调用的</p><ol><li>fds：存放需要被检测状态的套接字描述符，与 select 不同（select 在调用之后会清空这个数组），每当调用这个数组，系统不会清空这个数组，而是存放 revents 状态变化描述符变量，这样才做起来很方便。</li><li>nfds：用于标记数组 fd 中 struct pollfd 结构元素的总数量。</li><li>timeout：是超时时间。</li><li>返回值大于零表示成功，返回满足条件的文件描述符的个数</li></ol><p>返回值等于零，表示超时。</p><p>返回值等于 -1 发生错误，比如描述符不合法，接受到中断信号，内存不足</p><p>被检测的套接字使用结构体封装，如下：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token keyword">struct</span> <span class="token class-name">pollfd</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span>   fd<span class="token punctuation">;</span>         <span class="token comment">/* file descriptor */</span></span>
<span class="line">    <span class="token keyword">short</span> events<span class="token punctuation">;</span>     <span class="token comment">/* requested events */</span></span>
<span class="line">    <span class="token keyword">short</span> revents<span class="token punctuation">;</span>    <span class="token comment">/* returned events */</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>pollfd</p></blockquote><ol><li>fd 文件描述符</li><li>events 请求的事件</li><li>revents 返回的事件</li></ol><blockquote><p>事件的类型比如：</p></blockquote><ol><li>pollin 表示文件有数据来、文件描述符可读</li><li>pollout 表示文件可写</li><li>pollerr 表示错误发生</li></ol><p>poll 的优势：</p><p>1、大量的 fd 的数组被整体复制于用户态和内核地址空间之间，而不管这样的复制是不是有意义。</p><p>2、 可重用</p><h3 id="_3、epoll-系统调用" tabindex="-1"><a class="header-anchor" href="#_3、epoll-系统调用"><span>3、Epoll 系统调用</span></a></h3><p>为解决 fd 集合拷贝的问题，epoll 采用用户态和内核态共享 epoll_fds 集合。当调用 epoll_wait 系统调用时，内核态会去检查有哪些 fd 有事件，检查完毕后会将共享的 epoll_fds 集合重排序，将有事件的 fd 放在前面，并返回有事件的 fd 个数。</p><p>客户端收到返回的个数，就不需要全部遍历，而是直接处理 fd。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token number">1</span>、<span class="token keyword">int</span> <span class="token function">epoll_create</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">#注意：size参数只是告诉内核这个 epoll对象会处理的事件大致数目，而不是能够处理的事件的最大个数。在 Linux最新的一些内核版本的实现中，#这个 size参数没有任何意义。</span>
<span class="line"></span>
<span class="line"><span class="token number">2</span>、<span class="token keyword">int</span> <span class="token function">epoll_ctl</span><span class="token punctuation">(</span><span class="token keyword">int</span> epfd<span class="token punctuation">,</span> <span class="token keyword">int</span> op<span class="token punctuation">,</span> <span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">epoll_event</span> <span class="token operator">*</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">epoll</span><span class="token expression">的事件注册函数，epoll_ctl向 epoll对象中添加、修改或者删除感兴趣的事件，返回<span class="token number">0</span>表示成功，否则返回–<span class="token number">1</span>，此时需要根据errno错误码</span><span class="token punctuation">##</span><span class="token expression">判断错误类型。</span></span></span>
<span class="line"></span>
<span class="line">#它不同与<span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>是在监听事件时告诉内核要监听什么类型的事件，而是在这里先注册要监听的事件类型。</span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token number">3</span>、<span class="token keyword">int</span> <span class="token function">epoll_wait</span><span class="token punctuation">(</span><span class="token keyword">int</span> epfd<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">epoll_event</span> <span class="token operator">*</span> events<span class="token punctuation">,</span> <span class="token keyword">int</span> maxevents<span class="token punctuation">,</span> <span class="token keyword">int</span> timeout<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">epoll_wait方法返回的事件必然是通过 epoll_ctl添加到 epoll中的。</span>
<span class="line">#第一个参数是<span class="token function">epoll_create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>的返回值，</span>
<span class="line">#第二个参数表示动作，用三个宏来表示：</span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token expression">EPOLL_CTL_ADD：注册新的fd到epfd中；</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token expression">EPOLL_CTL_MOD：修改已经注册的fd的监听事件；</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token expression">EPOLL_CTL_DEL：从epfd中删除一个fd；</span></span></span>
<span class="line">#第三个参数是需要监听的fd，第四个参数是告诉内核需要监听什么事</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>处理流程大致如下：</p><figure><img src="`+k+`" alt="image-20210916143428054" tabindex="0" loading="lazy"><figcaption>image-20210916143428054</figcaption></figure><p>小案例：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"> <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX_EVENTS</span> <span class="token expression"><span class="token number">10</span></span></span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">epoll_event</span> ev<span class="token punctuation">,</span> events<span class="token punctuation">[</span>MAX_EVENTS<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> listen_sock<span class="token punctuation">,</span> conn_sock<span class="token punctuation">,</span> nfds<span class="token punctuation">,</span> epollfd<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/* Code to set up listening socket, &#39;listen_sock&#39;,</span>
<span class="line">              (socket(), bind(), listen()) omitted */</span></span>
<span class="line"><span class="token comment">// 招一个小弟</span></span>
<span class="line">epollfd <span class="token operator">=</span> <span class="token function">epoll_create1</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>epollfd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;epoll_create1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">ev<span class="token punctuation">.</span>events <span class="token operator">=</span> EPOLLIN<span class="token punctuation">;</span></span>
<span class="line">ev<span class="token punctuation">.</span>data<span class="token punctuation">.</span>fd <span class="token operator">=</span> listen_sock<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 谁有什么事先和小弟说</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">epoll_ctl</span><span class="token punctuation">(</span>epollfd<span class="token punctuation">,</span> EPOLL_CTL_ADD<span class="token punctuation">,</span> listen_sock<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ev<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;epoll_ctl: listen_sock&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 老板在那里等小弟的回应，有回应就去处理</span></span>
<span class="line">    nfds <span class="token operator">=</span> <span class="token function">epoll_wait</span><span class="token punctuation">(</span>epollfd<span class="token punctuation">,</span> events<span class="token punctuation">,</span> MAX_EVENTS<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>nfds <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;epoll_wait&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> n <span class="token operator">&lt;</span> nfds<span class="token punctuation">;</span> <span class="token operator">++</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>events<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>fd <span class="token operator">==</span> listen_sock<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            conn_sock <span class="token operator">=</span> <span class="token function">accept</span><span class="token punctuation">(</span>listen_sock<span class="token punctuation">,</span></span>
<span class="line">                               <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>addr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>addrlen<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>conn_sock <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;accept&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token function">setnonblocking</span><span class="token punctuation">(</span>conn_sock<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            ev<span class="token punctuation">.</span>events <span class="token operator">=</span> EPOLLIN <span class="token operator">|</span> EPOLLET<span class="token punctuation">;</span></span>
<span class="line">            ev<span class="token punctuation">.</span>data<span class="token punctuation">.</span>fd <span class="token operator">=</span> conn_sock<span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">epoll_ctl</span><span class="token punctuation">(</span>epollfd<span class="token punctuation">,</span> EPOLL_CTL_ADD<span class="token punctuation">,</span> conn_sock<span class="token punctuation">,</span></span>
<span class="line">                          <span class="token operator">&amp;</span>ev<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;epoll_ctl: conn_sock&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">do_use_fd</span><span class="token punctuation">(</span>events<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>重排相当于置位，每次会把有事件发生的 fd 排在前边</li><li>没有靠背开销，共享内存。</li><li>o(1)复杂度。</li></ol><h2 id="四、java-的-nio-编程" tabindex="-1"><a class="header-anchor" href="#四、java-的-nio-编程"><span>四、Java 的 NIO 编程</span></a></h2><p>Java NIO 三大核心部分：</p><ol><li>Buffer（缓冲区）：每个客户端连接都会对应一个 Buffer，读写数据通过缓冲区读写。</li><li>Channel（通道）：每个 Channel 用于连接 Buffer 和 Selector，通道可以进行双向读写。</li><li>Selector（选择器）：一个选择器可以对应多个通道，用于监听多个通道的事件。Selector 可以监听所有的 Channel 是否有数据需要读取，当某个 Channel 有数据时，就去处理，所有 Channel 都没有数据时，线程可以去执行其他任务。</li></ol><h3 id="_1、buffer" tabindex="-1"><a class="header-anchor" href="#_1、buffer"><span>1、Buffer</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">//创建一个Int型的buffer，大小为5。相当于创建了一个大小为5的int数组</span></span>
<span class="line">    <span class="token class-name">IntBuffer</span> buffer <span class="token operator">=</span> <span class="token class-name">IntBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">//往buffer中添加数据</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> buffer<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        buffer<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>i<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">//buffer读写切换，之前为写数据，调用flip后切换为读</span></span>
<span class="line">    buffer<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">//读取数据</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">hasRemaining</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Buffer 使用最多的是 ByteBuffer，因为在网路传输中一般使用字节传输。</p><h3 id="_2、channel" tabindex="-1"><a class="header-anchor" href="#_2、channel"><span>2、Channel</span></a></h3><p>NIO 的 Channel 通道类似于流，但是通道可以同时读写，而流只能读或写。</p><p>Channel 只是一个接口，里面有各种实现类。</p><p>通过 FileChannel 和 ByteBuffer 将数据写入文件。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">//创建一个文件输出流</span></span>
<span class="line">    <span class="token class-name">FileOutputStream</span> fileOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">&quot;a.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">//通过文件输出流得到一个FileChannel</span></span>
<span class="line">    <span class="token class-name">FileChannel</span> fileChannel <span class="token operator">=</span> fileOutputStream<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">//创建一个buffer并写入数据</span></span>
<span class="line">    <span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    buffer<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    buffer<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//反转，让指针指向数组开头</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">//将Buffer中数据写入FileChannel中</span></span>
<span class="line">    fileChannel<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    fileOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3、selector" tabindex="-1"><a class="header-anchor" href="#_3、selector"><span>3、Selector</span></a></h3><p>Selector 能够检测多个注册的通道上是否有事件发生(注意:多个 Channel 以事件的方式可以注册到同一个 Selector)，如果有事件发生，便获取事件，然后针对每个事件进行相应的处理。这样就可以只用一个单线程去管理多个通道，也就是管理多个连接和请求。</p><p>只有在 连接/通道 真正有读写事件发生时，才会进行读写，就大大地减少了系统开销，并且不必为每个连接都创建一个线程，不用去维护多个线程。</p><p>步骤：</p><ol><li>当客户端连接时，会通过 ServerSocketChannel 得到 SocketChannel。</li><li>将 SocketChannel 注册到 Selector 上，一个 Selector 可以注册多个 SocketChannel。</li><li>注册后会返回一个 SelectionKey，会和该 Selector 关联（加入到集合中）。</li><li>Selector 进行监听 select 方法，返回有事件发生的通道的个数。</li><li>进一步得到各个有事件发生的 SelectionKey。</li><li>通过 SelectionKey 反向获取 SocketChannel，然后获取 Channel 的事件类型，并处理 Selector 通过管理 SelectionKey 的集合从而去监听各个 Channel。</li></ol><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NioServer</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 建立一个serversocketchannel</span></span>
<span class="line">        <span class="token class-name">ServerSocketChannel</span> sever <span class="token operator">=</span> <span class="token class-name">ServerSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 非阻塞的通道的配置</span></span>
<span class="line">        sever<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 绑定端口</span></span>
<span class="line">        sever<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token number">6666</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 创建一个selector</span></span>
<span class="line">        <span class="token class-name">Selector</span> selector <span class="token operator">=</span> <span class="token class-name">Selector</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 感兴趣的事情</span></span>
<span class="line">        sever<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span><span class="token constant">OP_ACCEPT</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 如果返回零，没有消息,阻塞的方法</span></span>
<span class="line">            <span class="token keyword">int</span> select <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>select <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">continue</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token comment">// 拿到所有的事件</span></span>
<span class="line">            <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectionKey</span><span class="token punctuation">&gt;</span></span> selectionKeys <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">selectedKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectionKey</span><span class="token punctuation">&gt;</span></span> iterator <span class="token operator">=</span> selectionKeys<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">                <span class="token comment">// 拿到这个事件</span></span>
<span class="line">                <span class="token class-name">SelectionKey</span> key <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">if</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">isAcceptable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;有人连我了！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                    <span class="token comment">// 三次握手简历tcp连接</span></span>
<span class="line">                    <span class="token class-name">SocketChannel</span> accept <span class="token operator">=</span> sever<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                    accept<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                    <span class="token comment">// 建立好连接以后，注册到selector</span></span>
<span class="line">                    accept<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span><span class="token class-name">SelectionKey</span><span class="token punctuation">.</span><span class="token constant">OP_READ</span><span class="token punctuation">,</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">isReadable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">                    <span class="token class-name">SocketChannel</span> channel <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">SocketChannel</span><span class="token punctuation">)</span>key<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                    <span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ByteBuffer</span><span class="token punctuation">)</span>key<span class="token punctuation">.</span><span class="token function">attachment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                    channel<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>buffer<span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                    buffer<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">                iterator<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NioClient</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">SocketChannel</span> socketChannel <span class="token operator">=</span> <span class="token class-name">SocketChannel</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 连接一个服务器</span></span>
<span class="line">        socketChannel<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token number">6666</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span><span class="token punctuation">(</span>socketChannel<span class="token punctuation">.</span><span class="token function">finishConnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">                <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token class-name">String</span> next <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token class-name">ByteBuffer</span> wrap <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>next<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                socketChannel<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>wrap<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>MappedByteBuffer：可以让文件直接在内存（堆外内存）中修改，不需要操作系统拷贝一次。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">//读取文件，能进行读写</span></span>
<span class="line">    <span class="token class-name">RandomAccessFile</span> randomAccessFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RandomAccessFile</span><span class="token punctuation">(</span><span class="token string">&quot;a.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;rw&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">FileChannel</span> channel <span class="token operator">=</span> randomAccessFile<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line"> * 参数一：使用的模式（读写模式）</span>
<span class="line"> * 参数二：可以直接修改的起始位置</span>
<span class="line"> * 参数三：能修改的大小，最多能修改多少字节</span>
<span class="line"> */</span></span>
<span class="line">    <span class="token comment">//获取MappedByteBuffer对象</span></span>
<span class="line">    <span class="token class-name">MappedByteBuffer</span> mBuffer <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">FileChannel<span class="token punctuation">.</span>MapMode</span><span class="token punctuation">.</span><span class="token constant">READ_WRITE</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">//修改buffer中内容，修改后直接修改了文件内容</span></span>
<span class="line">    mBuffer<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span><span class="token char">&#39;H&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    randomAccessFile<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,119)]))}const f=s(r,[["render",d]]),h=JSON.parse('{"path":"/codenotes/java/javase/nio.html","title":"Nio","lang":"zh-CN","frontmatter":{"title":"Nio","icon":"IO","category":["javase","nio"],"tag":["javase"],"sticky":false,"star":false,"article":false,"order":14,"timeline":false,"description":"一、NIO 简介 1）Java BIO ： 同步并阻塞(传统阻塞型)，服务器实现模式为一个连接一个线程，即客户端有连接请求时服务器端就需要启动一个线程进行处理，如果这个连接不做任何事情会造成不必要的线程开销。 image-20210916114632687image-20210916114632687 2）Java NIO ： 同步非阻塞，服务器实现模...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"Nio\\",\\"description\\":\\"一、NIO 简介 1）Java BIO ： 同步并阻塞(传统阻塞型)，服务器实现模式为一个连接一个线程，即客户端有连接请求时服务器端就需要启动一个线程进行处理，如果这个连接不做任何事情会造成不必要的线程开销。 image-20210916114632687image-20210916114632687 2）Java NIO ： 同步非阻塞，服务器实现模...\\"}"],["meta",{"property":"og:url","content":"https://www.stazxr.cn/my-notes/my-notes/codenotes/java/javase/nio.html"}],["meta",{"property":"og:site_name","content":"終わり群星の知识宝库"}],["meta",{"property":"og:title","content":"Nio"}],["meta",{"property":"og:description","content":"一、NIO 简介 1）Java BIO ： 同步并阻塞(传统阻塞型)，服务器实现模式为一个连接一个线程，即客户端有连接请求时服务器端就需要启动一个线程进行处理，如果这个连接不做任何事情会造成不必要的线程开销。 image-20210916114632687image-20210916114632687 2）Java NIO ： 同步非阻塞，服务器实现模..."}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-26T05:21:52.000Z"}],["meta",{"property":"article:tag","content":"javase"}],["meta",{"property":"article:modified_time","content":"2025-05-26T05:21:52.000Z"}]]},"git":{"createdTime":1714921446000,"updatedTime":1748236912000,"contributors":[{"name":"talentestors","username":"talentestors","email":"talentestors@gmail.com","commits":7,"url":"https://github.com/talentestors"}]},"readingTime":{"minutes":14.75,"words":4425},"filePathRelative":"codenotes/java/javase/nio.md","autoDesc":true}');export{f as comp,h as data};
