import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{ah as e,ap as t,al as p,an as o,ai as i}from"./app-CAqLFJSb.js";const l={};function c(r,a){const s=o("Waiting");return i(),e("div",null,[a[0]||(a[0]=t(`<h2 id="第一节-git-worktree-管理多个工作区的利器" tabindex="-1"><a class="header-anchor" href="#第一节-git-worktree-管理多个工作区的利器"><span>第一节 git worktree：管理多个工作区的利器</span></a></h2><blockquote><p><a href="https://git-scm.com/docs/git-worktree/zh_HANS-CN" target="_blank" rel="noopener noreferrer">Reference: git-scm.com</a></p></blockquote><p>在现代开发中，例如使用 Node.js 的项目中，我们常常需要同时处理多个分支或版本。这时，git worktree 就成为了一个非常有用的工具。它允许你在同一仓库中创建多个工作区，从而方便地进行多任务开发。</p><p>假设你正在开发一个 Node.js 应用，并且需要同时处理多个功能分支。在这种情况下，你可能会有如下需求：</p><ul><li>在一个分支上修复 bug。</li><li>在另一个分支上开发新特性。</li><li>确保 node_modules 不会因为频繁切换分支而被污染。</li></ul><p>这时，git worktree 就能帮助你轻松实现这些需求。</p><h3 id="什么是-git-worktree" tabindex="-1"><a class="header-anchor" href="#什么是-git-worktree"><span>什么是 <code>git worktree</code>？</span></a></h3><p><code>git worktree</code> 是 Git 的一个命令，允许你在同一个 Git 仓库中创建多个工作目录。这意味着你可以在不同的目录中检出不同的分支，而不必频繁地切换分支。这对于需要同时开发多个功能或修复多个问题的开发者来说，极为便利。</p><h4 id="基本命令" tabindex="-1"><a class="header-anchor" href="#基本命令"><span>基本命令</span></a></h4><p>以下是一些常用的 <code>git worktree</code> 命令：</p><ol><li><p><strong>添加工作区</strong>：</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">git</span> worktree <span class="token function">add</span> <span class="token operator">&lt;</span>路径<span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>提交号<span class="token operator">&gt;</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre></div><p>这个命令会在指定路径下创建一个新的工作区，并检出相应的分支或提交。例如，如果你要在 <code>node_modules</code> 文件夹外创建一个新工作区，可以这样做：</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">git</span> worktree <span class="token function">add</span> <span class="token punctuation">..</span>/new-feature-branch new-feature</span>
<span class="line"></span></code></pre></div></li><li><p><strong>列出工作区</strong>：</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">git</span> worktree list</span>
<span class="line"></span></code></pre></div><p>这个命令会列出当前所有的工作区及其状态。</p></li><li><p><strong>锁定工作区</strong>：</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">git</span> worktree lock <span class="token operator">&lt;</span>工作区<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre></div><p>如果你想防止某个工作区被意外删除或移动，可以使用此命令进行锁定。</p></li><li><p><strong>移动工作区</strong>：</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">git</span> worktree move <span class="token operator">&lt;</span>工作区<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>新路径<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre></div><p>可以用此命令将已有的工作区移动到新的位置。</p></li><li><p><strong>删除工作区</strong>：</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">git</span> worktree remove <span class="token operator">&lt;</span>工作区<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre></div><p>当某个工作区不再需要时，可以使用此命令将其删除。</p></li></ol><h3 id="实际应用-node-js-项目中的-node-modules" tabindex="-1"><a class="header-anchor" href="#实际应用-node-js-项目中的-node-modules"><span>实际应用：Node.js 项目中的 <code>node_modules</code></span></a></h3><p>通过使用 <code>git worktree</code>，你可以为每个分支创建独立的工作区。例如：</p><ol><li><p><strong>为 bug 修复创建工作区</strong>：</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">git</span> worktree <span class="token function">add</span> <span class="token punctuation">..</span>/bug-fix-branch bug-fix</span>
<span class="line"></span></code></pre></div></li><li><p><strong>为新特性创建工作区</strong>：</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">git</span> worktree <span class="token function">add</span> <span class="token punctuation">..</span>/feature-branch feature</span>
<span class="line"></span></code></pre></div></li></ol><p>现在，你可以在不同的工作区中独立安装依赖，这样就不会出现 <code>node_modules</code> 之间的冲突。每个工作区都可以有自己的依赖环境，确保你的开发过程更加顺畅。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><ul><li>使用 <code>--detach</code> 选项，可以在没有创建新分支的情况下检出特定提交。</li><li>通过 <code>prune</code> 命令清理已删除的工作区，以保持环境整洁。</li><li>定期使用 <code>list</code> 命令检查当前的工作区状态，避免混淆。</li></ul></div><h2 id="第二节-git-补丁" tabindex="-1"><a class="header-anchor" href="#第二节-git-补丁"><span>第二节 git 补丁</span></a></h2><h3 id="什么是-git-am" tabindex="-1"><a class="header-anchor" href="#什么是-git-am"><span>什么是 <code>git am</code></span></a></h3><p><code>git am</code> 用于应用邮件格式的补丁，通常用于将来自邮件的补丁文件应用到 Git 仓库中。这在开源项目中非常常见，因为开发者经常通过邮件发送补丁。</p><h3 id="基本语法" tabindex="-1"><a class="header-anchor" href="#基本语法"><span>基本语法</span></a></h3><div class="language-bash" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">git</span> am <span class="token punctuation">[</span>options<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>patch<span class="token operator">&gt;</span><span class="token punctuation">..</span>.<span class="token punctuation">]</span></span>
<span class="line"></span></code></pre></div><h3 id="常用选项" tabindex="-1"><a class="header-anchor" href="#常用选项"><span>常用选项</span></a></h3><ul><li><strong><code>--signoff</code></strong>：在提交消息中添加 <code>Signed-off-by</code> 行。</li><li><strong><code>--3way</code></strong>：如果补丁无法直接应用，尝试进行三方合并。</li><li><strong><code>--abort</code></strong>：取消当前操作并恢复到之前的状态。</li><li><strong><code>--continue</code></strong>：在解决完冲突后，继续应用补丁。</li><li><strong><code>--skip</code></strong>：跳过当前补丁，继续应用下一个补丁。</li></ul><h3 id="应用补丁的步骤" tabindex="-1"><a class="header-anchor" href="#应用补丁的步骤"><span>应用补丁的步骤</span></a></h3><h4 id="_1-准备补丁文件" tabindex="-1"><a class="header-anchor" href="#_1-准备补丁文件"><span>1. 准备补丁文件</span></a></h4><p>确保您有一个有效的补丁文件。补丁文件通常由 <code>git format-patch</code> 命令生成，格式如下：</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">git</span> format-patch <span class="token parameter variable">-1</span> <span class="token operator">&lt;</span>commit-hash<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre></div><p>这将创建一个以提交消息命名的 <code>.patch</code> 文件。</p><h4 id="_2-应用补丁" tabindex="-1"><a class="header-anchor" href="#_2-应用补丁"><span>2. 应用补丁</span></a></h4><p>使用 <code>git am</code> 命令应用补丁：</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">git</span> am <span class="token operator">&lt;</span>path-to-patch-file<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre></div><p>例如：</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">git</span> am fix.patch</span>
<span class="line"></span></code></pre></div><h4 id="_3-处理冲突" tabindex="-1"><a class="header-anchor" href="#_3-处理冲突"><span>3. 处理冲突</span></a></h4><p>如果在应用补丁时遇到冲突，您会看到类似于以下的错误消息：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">Applying: Your commit message here</span>
<span class="line">error: could not apply &lt;commit-hash&gt;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="解决冲突的步骤" tabindex="-1"><a class="header-anchor" href="#解决冲突的步骤"><span>解决冲突的步骤</span></a></h5><ol><li><p><strong>查看冲突文件</strong>： 使用 <code>git status</code> 查看哪些文件存在冲突。</p></li><li><p><strong>手动解决冲突</strong>： 打开有冲突的文件，按照您的需求修改冲突部分。</p></li><li><p><strong>标记冲突已解决</strong>： 使用以下命令标记冲突已解决：</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">git</span> <span class="token function">add</span> <span class="token operator">&lt;</span>resolved-file<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre></div></li><li><p><strong>继续应用补丁</strong>： 运行以下命令继续应用剩余的补丁：</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">git</span> am <span class="token parameter variable">--continue</span></span>
<span class="line"></span></code></pre></div></li><li><p><strong>如果需要放弃补丁</strong>： 如果决定不继续应用补丁，可以使用：</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">git</span> am <span class="token parameter variable">--abort</span></span>
<span class="line"></span></code></pre></div></li></ol><h4 id="_4-查看提交历史" tabindex="-1"><a class="header-anchor" href="#_4-查看提交历史"><span>4. 查看提交历史</span></a></h4><p>成功应用补丁后，使用以下命令查看提交历史，以确认补丁已被正确添加：</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">git</span> log <span class="token parameter variable">--oneline</span></span>
<span class="line"></span></code></pre></div><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h3><ol><li><p><strong>从文件应用补丁</strong>：</p><p>假设您有一个补丁文件 <code>fix.patch</code>，可以使用以下命令：</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">git</span> am fix.patch</span>
<span class="line"></span></code></pre></div></li><li><p><strong>从标准输入应用补丁</strong>：</p><p>如果想直接从邮件中应用补丁，可以使用：</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">git</span> am <span class="token operator">&lt;</span> email.txt</span>
<span class="line"></span></code></pre></div></li><li><p><strong>使用选项</strong>：</p><p>应用一个补丁并添加签名：</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">git</span> am <span class="token parameter variable">--signoff</span> fix.patch</span>
<span class="line"></span></code></pre></div></li></ol><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><p><code>git am</code> 是一个强大的工具，可以方便地将邮件格式的补丁应用到您的 Git 项目中。确保在应用补丁之前，工作目录是干净的，并准备好处理可能出现的冲突。通过上述步骤和示例，您应该能够有效地使用 <code>git am</code>。</p><h2 id="第三节-git-stash" tabindex="-1"><a class="header-anchor" href="#第三节-git-stash"><span>第三节 git stash</span></a></h2><h3 id="什么是-git-stash" tabindex="-1"><a class="header-anchor" href="#什么是-git-stash"><span>什么是 <code>git stash</code></span></a></h3><p><code>git stash</code> 是一个非常有用的命令，用于暂存当前工作目录的更改。这在需要切换分支或处理其他任务时非常有用，因为它允许在不提交更改的情况下切换分支。</p><p>它处于 <code>git reset --hard</code>（完全放弃还修改了一半的代码）与 <code>git commit</code>（提交代码）命令之间，很类似于“暂停”按钮。</p><h3 id="基本语法-1" tabindex="-1"><a class="header-anchor" href="#基本语法-1"><span>基本语法</span></a></h3><div class="language-bash" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">git</span> stash <span class="token punctuation">[</span>save <span class="token operator">&lt;</span>message<span class="token operator">&gt;</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre></div><h3 id="常用选项-1" tabindex="-1"><a class="header-anchor" href="#常用选项-1"><span>常用选项</span></a></h3><ul><li><strong><code>save</code></strong>：保存当前工作目录的更改，并可选地添加一条消息。</li><li><strong><code>list</code></strong>：列出所有的 stash 记录。</li><li><strong><code>pop</code></strong>：应用最新的 stash 记录，并从 stash 列表中删除。</li><li><strong><code>apply</code></strong>：应用最新的 stash 记录，但不删除。</li><li><strong><code>drop</code></strong>：删除最新的 stash 记录。</li><li><strong><code>clear</code></strong>：删除所有的 stash 记录。</li><li><strong><code>show</code></strong>：显示 stash 记录的详细信息。</li><li><strong><code>branch</code></strong>：创建一个新分支，并将 stash 记录应用到该分支上。</li><li><strong><code>create</code></strong>：创建一个 stash 记录，但不应用。</li></ul><h3 id="示例-1" tabindex="-1"><a class="header-anchor" href="#示例-1"><span>示例</span></a></h3><ol><li><p><strong>保存更改</strong>：</p><p>保存当前工作目录的更改：</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">git</span> stash</span>
<span class="line"></span></code></pre></div><p>或者，添加一条消息：</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">git</span> stash save <span class="token string">&quot;My changes&quot;</span></span>
<span class="line"></span></code></pre></div></li><li><p><strong>列出 stash 记录</strong>：</p><p>列出所有的 stash 记录：</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">git</span> stash list</span>
<span class="line"></span></code></pre></div></li><li><p><strong>应用 stash 记录</strong>：</p><p>应用最新的 stash 记录：</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">git</span> stash pop</span>
<span class="line"></span></code></pre></div><p>或者，应用指定的 stash 记录：</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">git</span> stash apply stash@<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div></li><li><p><strong>删除 stash 记录</strong>：</p><p>删除最新的 stash 记录：</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">git</span> stash drop</span>
<span class="line"></span></code></pre></div><p>或者，删除指定的 stash 记录：</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">git</span> stash drop stash@<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div></li><li><p><strong>创建分支</strong>：</p><p>创建一个新分支，并将 stash 记录应用到该分支上：</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">git</span> stash branch new-branch</span>
<span class="line"></span></code></pre></div></li><li><p><strong>清除 stash 记录</strong>：</p><p>删除所有的 stash 记录：</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">git</span> stash <span class="token function">clear</span></span>
<span class="line"></span></code></pre></div></li></ol>`,55)),p(s)])}const h=n(l,[["render",c]]),u=JSON.parse('{"path":"/codenotes/devtool/git/git-plus.html","title":"Git进阶","lang":"zh-CN","frontmatter":{"title":"Git进阶","icon":"git","category":["devtool","Git"],"tag":["Git","devtool","版本控制"],"sticky":false,"star":false,"article":false,"order":2,"timeline":false,"description":"第一节 git worktree：管理多个工作区的利器 Reference: git-scm.com 在现代开发中，例如使用 Node.js 的项目中，我们常常需要同时处理多个分支或版本。这时，git worktree 就成为了一个非常有用的工具。它允许你在同一仓库中创建多个工作区，从而方便地进行多任务开发。 假设你正在开发一个 Node.js 应用，...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"Git进阶\\",\\"description\\":\\"第一节 git worktree：管理多个工作区的利器 Reference: git-scm.com 在现代开发中，例如使用 Node.js 的项目中，我们常常需要同时处理多个分支或版本。这时，git worktree 就成为了一个非常有用的工具。它允许你在同一仓库中创建多个工作区，从而方便地进行多任务开发。 假设你正在开发一个 Node.js 应用，...\\"}"],["meta",{"property":"og:url","content":"https://www.stazxr.cn/my-notes/my-notes/codenotes/devtool/git/git-plus.html"}],["meta",{"property":"og:site_name","content":"終わり群星の知识宝库"}],["meta",{"property":"og:title","content":"Git进阶"}],["meta",{"property":"og:description","content":"第一节 git worktree：管理多个工作区的利器 Reference: git-scm.com 在现代开发中，例如使用 Node.js 的项目中，我们常常需要同时处理多个分支或版本。这时，git worktree 就成为了一个非常有用的工具。它允许你在同一仓库中创建多个工作区，从而方便地进行多任务开发。 假设你正在开发一个 Node.js 应用，..."}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-26T05:21:52.000Z"}],["meta",{"property":"article:tag","content":"版本控制"}],["meta",{"property":"article:tag","content":"devtool"}],["meta",{"property":"article:tag","content":"Git"}],["meta",{"property":"article:modified_time","content":"2025-05-26T05:21:52.000Z"}]]},"git":{"createdTime":1732178028000,"updatedTime":1748236912000,"contributors":[{"name":"talentestors","username":"talentestors","email":"talentestors@gmail.com","commits":3,"url":"https://github.com/talentestors"}]},"readingTime":{"minutes":6.33,"words":1899},"filePathRelative":"codenotes/devtool/git/git-plus.md","autoDesc":true}');export{h as comp,u as data};
