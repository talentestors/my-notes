import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{ah as a,ap as e,ai as t}from"./app-CAqLFJSb.js";const p="/my-notes/assets/image-20210809115833865-928d11af-BkCXdn1y.png",l="/my-notes/assets/image-20210809115929014-fe8e6e90-CTmr4-HJ.png",c="/my-notes/assets/image-20210809115855823-96944f63-TlmlOfIV.png",i="/my-notes/assets/image-20210809135349094-a6f87c87-ChXzgnlF.png",o="/my-notes/assets/image-20210809135408841-6f258058-aOkCYnyU.png",d="/my-notes/assets/image-20210809135427632-73b8993d-Cfge_rlL.png",r={};function u(m,n){return t(),a("div",null,n[0]||(n[0]=[e(`<div class="hint-container tip"><p class="hint-container-title">提示</p><p>课程视频教程链接：<a href="https://www.bilibili.com/video/BV1h64y1i78N" target="_blank" rel="noopener noreferrer">https://www.bilibili.com/video/BV1h64y1i78N</a></p></div><h2 id="_1-命令提示符" tabindex="-1"><a class="header-anchor" href="#_1-命令提示符"><span>1.命令提示符</span></a></h2><p>Windows 键+R 输入 cmd 回车</p><p>输入盘符名+“：”切换盘符</p><p>上下键切换最近输入</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">cd+文件夹名/路径 进入文件夹ps：路径有空格加双引号</span>
<span class="line"></span>
<span class="line">copy nul+文件名   创建文件 <span class="token comment"># such as，a.txt</span></span>
<span class="line"></span>
<span class="line"><span class="token builtin class-name">echo</span> 文本信息<span class="token operator">&gt;</span>a.txt <span class="token comment"># 写入信息</span></span>
<span class="line"></span>
<span class="line">del+文件名 <span class="token comment"># 删除文件</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>CMD 命令：开始－&gt;运行－&gt;键入 cmd 或 command(在命令行里可以看到系统版本、文件系统版本)</p><blockquote><p><strong>进入某一个盘符</strong></p></blockquote><p>输入盘符 如 <code>C:</code> 然后回车，相当于进了 C 盘(c 盘一般进的是桌面目录)</p><blockquote><p><strong>切换目录</strong></p></blockquote><p>输入 <code>cd</code> 目录名 然后回车</p><blockquote><p><strong>返回上层目录</strong></p></blockquote><p>如果你想返回到上层目录，那么直接输入\`cd..就行了，可以返回到上层目录。开发过程中最常用的命令也就这些。</p><blockquote><p><strong>查看文件</strong></p></blockquote><p><code>dir</code>命令查看目录下的文件列表,查看该目录下的所有文件:</p><div class="language-cmd" data-highlighter="prismjs" data-ext="cmd"><pre><code class="language-cmd"><span class="line">dir</span>
<span class="line"></span></code></pre></div><blockquote><p><strong>创建一个空文件</strong></p></blockquote><div class="language-cmd" data-highlighter="prismjs" data-ext="cmd"><pre><code class="language-cmd"><span class="line">copy nul a.txt</span>
<span class="line"></span></code></pre></div><blockquote><p><strong>文件里输入字符</strong></p></blockquote><div class="language-cmd" data-highlighter="prismjs" data-ext="cmd"><pre><code class="language-cmd"><span class="line">echo 2323&gt;a.txt</span>
<span class="line"></span></code></pre></div><blockquote><p><strong>拷贝文件</strong></p></blockquote><p>copy 拷贝文件命令,拷贝该目录下所有文件到 D 盘: <code>copy * &quot;d:\\&quot;</code></p><blockquote><p><strong>删除文件</strong></p></blockquote><p><code>del a.js</code> 删除 a.js 文件</p><h2 id="_2-快捷键" tabindex="-1"><a class="header-anchor" href="#_2-快捷键"><span>2.快捷键</span></a></h2><h3 id="windows" tabindex="-1"><a class="header-anchor" href="#windows"><span>Windows</span></a></h3><p><code>Windows</code>+<code>E</code> 资源管理器</p><p><code>F2</code> 重命名</p><h3 id="cmd" tabindex="-1"><a class="header-anchor" href="#cmd"><span>cmd</span></a></h3><p>上下键切换最近指令</p><h2 id="_3-原码、反码、补码" tabindex="-1"><a class="header-anchor" href="#_3-原码、反码、补码"><span>3.原码、反码、补码</span></a></h2><p>八个数一位</p><p>最前面的数（符号位）表正负</p><p>10000001（2） == -1</p><p>00000001（2） == 1</p><h3 id="_1-正数" tabindex="-1"><a class="header-anchor" href="#_1-正数"><span>（1）正数</span></a></h3><p>原码、反码、补码都是自身</p><h3 id="_2-负数" tabindex="-1"><a class="header-anchor" href="#_2-负数"><span>（2）负数</span></a></h3><h4 id="反码" tabindex="-1"><a class="header-anchor" href="#反码"><span>反码</span></a></h4><p>除了最前面的数（符号位）以外，后面的数反向；0 变 1；1 变 0</p><p>1000 0001→1111 1110</p><h4 id="补码" tabindex="-1"><a class="header-anchor" href="#补码"><span>补码</span></a></h4><p>反码加 1</p><h3 id="_3-溢出" tabindex="-1"><a class="header-anchor" href="#_3-溢出"><span>（3）溢出</span></a></h3><p>1 0000 0000</p><p>最前面的数字溢出消失</p><h2 id="二、java" tabindex="-1"><a class="header-anchor" href="#二、java"><span>二、Java</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Helloworld</span><span class="token punctuation">{</span></span>
<span class="line"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Helloworld&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ps: 注意大小写</p><h3 id="_1-jave-编译" tabindex="-1"><a class="header-anchor" href="#_1-jave-编译"><span>1.jave 编译</span></a></h3><h5 id="jdk-基本介绍" tabindex="-1"><a class="header-anchor" href="#jdk-基本介绍"><span>JDK 基本介绍</span></a></h5><p>JDK 的全称(Java Development Kit Java 开发工具包) JDK = JRE + java 的开发工具 [java, javac,javadoc,javap 等]</p><p>JDK 是提供给 Java 开发人员使用的，其中包含了 java 的开发工具，也包括了 JRE。所以安装了 JDK，就不用在单独 安装 JRE 了。</p><h5 id="jre-基本介绍" tabindex="-1"><a class="header-anchor" href="#jre-基本介绍"><span>JRE 基本介绍</span></a></h5><ul><li>JRE(Java Runtime Environment Java 运行环境) JRE = JVM + Java 的核心类库[类]</li><li>包括 Java 虚拟机(JVM Java Virtual Machine)和 Java 程序所需的核心类库等，如果想要运行一个开发好的 Java 程序， 计算机中只需要安装 JRE 即可。</li></ul><h5 id="jdk、jre-和-jvm-的包含关系" tabindex="-1"><a class="header-anchor" href="#jdk、jre-和-jvm-的包含关系"><span>JDK、JRE 和 JVM 的包含关系</span></a></h5><ul><li>JDK = JRE + 开发工具集（例如 Javac,java 编译工具等）</li><li>JRE = JVM + Java SE 标准类库（java 核心类库）</li><li>如果只想运行开发好的 .class 文件 只需要 JRE</li></ul><h4 id="_1-helloworld" tabindex="-1"><a class="header-anchor" href="#_1-helloworld"><span>（1）HelloWorld</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">{</span></span>
<span class="line"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">//println和print的区别</span></span>
<span class="line"><span class="token comment">//println是输出之后换行</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="javac" tabindex="-1"><a class="header-anchor" href="#javac"><span>javac</span></a></h4><p>将 java 文件编译成 class 文件</p><p>先进入 java 文件路径</p><p>cmd：“javac 路径”+java 文件名.java</p><div class="language-cmd" data-highlighter="prismjs" data-ext="cmd"><pre><code class="language-cmd"><span class="line">&quot;C:\\Progrom Files\\Java\\jdk.1.80_333\\bin\\javac&quot; Helloworld.java</span>
<span class="line"></span></code></pre></div><p>ps：注意空格</p><h4 id="java" tabindex="-1"><a class="header-anchor" href="#java"><span>java</span></a></h4><p>运行程序</p><p>cmd：java 路径+运行类名称</p><div class="language-cmd" data-highlighter="prismjs" data-ext="cmd"><pre><code class="language-cmd"><span class="line">&quot;C:\\Program Files\\Java\\jdk1.8.0_333\\bin\\java&quot; Helloworld</span>
<span class="line"></span></code></pre></div><h3 id="_2-环境变量" tabindex="-1"><a class="header-anchor" href="#_2-环境变量"><span>2.环境变量</span></a></h3><p>环境变量（environment variables）一般是指在操作系统中用来指定操<code>作系统运行环境</code>的一些参数，如：临时文件夹位置和系统文件夹位置等。</p><p>环境变量相当于给系统或用户应用程序设置的一些参数，具体起什么作用这当然和具体的环境变量相关。比如<code>path</code>，是告诉系统，当要求系统运行一个程序而没有告诉它程序所在的完整路径时，系统除了在<code>当前目录</code>下面寻找此程序外，还应到哪些目录下去寻找。</p><p>环境变量在哪里配置</p><p>我的电脑——&gt;右键属性</p><figure><img src="`+p+'" alt="image-20210809115833865" tabindex="0" loading="lazy"><figcaption>image-20210809115833865</figcaption></figure><p>选择环境变量：</p><figure><img src="'+l+'" alt="image-20210809115929014" tabindex="0" loading="lazy"><figcaption>image-20210809115929014</figcaption></figure><p>在系统环境变量中有一个 Path，这里边配置了很多路径。</p><figure><img src="'+c+`" alt="image-20210809115855823" tabindex="0" loading="lazy"><figcaption>image-20210809115855823</figcaption></figure><h4 id="path" tabindex="-1"><a class="header-anchor" href="#path"><span>path</span></a></h4><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">javac HelloWorld.java</span>
<span class="line"><span class="token function">java</span> HelloWorld</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三、变量和运算符" tabindex="-1"><a class="header-anchor" href="#三、变量和运算符"><span>三、变量和运算符</span></a></h2><h3 id="_1、数据类型" tabindex="-1"><a class="header-anchor" href="#_1、数据类型"><span>1、数据类型</span></a></h3><blockquote><p>四类八种</p></blockquote><table><thead><tr><th>数据类型</th><th>占用内存</th><th>取值范围</th></tr></thead><tbody><tr><td>byte</td><td>1 个字节</td><td>-2^7 ~ 2^7-1</td></tr><tr><td>short</td><td>2 个字节</td><td>-2^15 ~ 2^15-1</td></tr><tr><td>int</td><td>4 个字节</td><td>-2^31 ~ 2^31-1</td></tr><tr><td>long</td><td>8 个字节</td><td>-2^63 ~ 2^63-1</td></tr><tr><td>float</td><td>4 个字节</td><td>（正数）1.4E-45 - 3.4028235E38 （整体） -3.4028235E38 ~ 3.4028235E38</td></tr><tr><td>double</td><td>8 个字节</td><td>1.7976931348623157E308 ~ 4.9E-324</td></tr><tr><td>char</td><td>2 个字节</td><td>65536（看字符编码）</td></tr><tr><td>boolean</td><td>1 个字节</td><td>两个值 true 和 false</td></tr></tbody></table><h4 id="_1-整形的取值范围" tabindex="-1"><a class="header-anchor" href="#_1-整形的取值范围"><span>（1）整形的取值范围</span></a></h4><p>byte 是一个字节，一共八位，第一个是符号位，所以用于表示数值的只有 7 位。</p><p>所以他的取值范围是：-2^7 ~ 2^7</p><p>但是有几个特殊的值我们需要讨论讨论。</p><p>在我们写代码的时候一定要考虑边界问题。</p><blockquote><p>0</p></blockquote><p>源码：00000000</p><p>反码：00000000</p><p>补码：00000000</p><blockquote><p>-0</p></blockquote><p>源码：10000000</p><p>反码：11111111</p><p>补码：00000000 进位 1 溢出</p><blockquote><p>128</p></blockquote><p>无法表示</p><blockquote><p>-128</p></blockquote><p>源码：（1）10000000</p><p>反码：（1）01111111</p><p>补码：（1）11111111 首位溢出 11111111 -128</p><p>结论：所以 byte 的取值范围是 -128 ~ 127</p><p>其他整形以此类推。</p><h4 id="_2-浮点数的取值范围" tabindex="-1"><a class="header-anchor" href="#_2-浮点数的取值范围"><span>（2）浮点数的取值范围</span></a></h4><p>浮点数的表示</p><figure><img src="`+i+`" alt="image-20210809135349094" tabindex="0" loading="lazy"><figcaption>image-20210809135349094</figcaption></figure><p>根据国际标准 IEEE 754，任意一个二进制浮点数 V 可以表示成下面的形式： <code>V = (-1)^s×M×2^E</code></p><ol><li>(-1)^s 表示符号位，当 s=0，V 为正数；当 s=1，V 为负数。</li><li>M 表示有效数字，大于等于 1，小于 2，但整数部分的 1 可以省略，也叫尾数。</li><li>2^E 表示指数位。</li></ol><p><strong>符号位</strong></p><p>只有两个取值 0 或者 1，0 代表正数，1 代表负数。</p><p><strong>阶码</strong></p><p>E 为一个无符号整数（unsigned int）,这意味着，如果 E 为 8 位，它的取值范围为 0~255；如果 E 为 11 位，它的取值范围为 0~2047。然而科学计数法中的 E 是可以出现负数的，所以 IEEE 754 规定，E 的真实值必须再减去一个中间数，对于 8 位的 E，这个中间数是 127；对于 11 位的 E，这个中间数是 1023。 比如，2^2 的 E 是 2，所以保存成 float 32 位浮点数时，必须保存成 2+127=129，即 10000001。</p><p><strong>尾数</strong></p><p>M 可以写成 1.xxxxxx 的形式，其中 xxxxxx 表示小数部分。IEEE 754 规定，在计算机内部保存 M 时，默认这个数的第一位总是 1，因此可以被舍去，只保存后面的 xxxxxx 部分。比如保存 1.0101 的时候，只保存 0101，等到读取的时候，再把第一位的 1 加上去。这样做的目的，是节省 1 位有效数字。以 32 位浮点数为例，留给 M 只有 23 位，将第一位的 1 舍去以后，等于可以保存 24 位有效数字。</p><p>小例子：-58.2 在内存是怎么表示的</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span><span class="token class-name">Float</span><span class="token punctuation">.</span><span class="token function">floatToIntBits</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">58.2F</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">//结果：1 10000100 11010001100110011001101</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>其实可以写成 $-1 * 1.11010001100110011001101 * 2^{(132-127)} = -1.11010001100110011001101 * 2^5 = 111010.001100110011001101$</p><p>是不是相当与小数点向后移动 5 位啊</p><div class="language-text" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">-1 * 111010.001100110011001101 大约等于 -58.2</span>
<span class="line"></span></code></pre></div><p>E 还需要考虑下面 2 种情况：</p><p>1、E 全为 0。这时，浮点数的指数 E 等于 1-127（或者 1-1023），有效数字 M 不再加上第一位的 1，而是还原为 0.xxxxxx 的小数。这样做是为了表示 ±0，以及接近于 0 的很小的数字。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span><span class="token class-name">Float</span><span class="token punctuation">.</span><span class="token function">floatToIntBits</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0F</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 结果：1 00000000  00000000000000000000000</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span><span class="token class-name">Float</span><span class="token punctuation">.</span><span class="token function">floatToIntBits</span><span class="token punctuation">(</span><span class="token number">0F</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 结果：00000000000000000000000000000000</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、E 全为 1。这时，如果有效数字 M 全为 0，表示 ± 无穷大（正负取决于符号位 s）；如果有效数字 M 不全为 0，表示这个数不是一个数（NaN）。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token doc-comment comment">/**无穷大*/</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span><span class="token class-name">Float</span><span class="token punctuation">.</span><span class="token function">floatToIntBits</span><span class="token punctuation">(</span><span class="token class-name">Float</span><span class="token punctuation">.</span><span class="token constant">POSITIVE_INFINITY</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token doc-comment comment">/**无穷小*/</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span><span class="token class-name">Float</span><span class="token punctuation">.</span><span class="token function">floatToIntBits</span><span class="token punctuation">(</span><span class="token class-name">Float</span><span class="token punctuation">.</span><span class="token constant">NEGATIVE_INFINITY</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Float</span><span class="token punctuation">.</span><span class="token constant">POSITIVE_INFINITY</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Float</span><span class="token punctuation">.</span><span class="token constant">NEGATIVE_INFINITY</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 1111111100000000000000000000000</span></span>
<span class="line"><span class="token comment">// 11111111100000000000000000000000</span></span>
<span class="line"><span class="token comment">// Infinity 正无穷</span></span>
<span class="line"><span class="token comment">// -Infinity 负无穷</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3、取值范围计算</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span><span class="token class-name">Float</span><span class="token punctuation">.</span><span class="token function">floatToIntBits</span><span class="token punctuation">(</span><span class="token class-name">Float</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span><span class="token class-name">Float</span><span class="token punctuation">.</span><span class="token function">floatToIntBits</span><span class="token punctuation">(</span><span class="token class-name">Float</span><span class="token punctuation">.</span><span class="token constant">MIN_VALUE</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Float</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Float</span><span class="token punctuation">.</span><span class="token constant">MIN_VALUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 0 11111110 11111111111111111111111    254-127=127</span></span>
<span class="line"><span class="token comment">// 1.11111111111111111111111 * 2^127，</span></span>
<span class="line"><span class="token comment">// 相当于小数点向右移动127位   111111111111111111111111...加102个0  2^127+2^126+...</span></span>
<span class="line"><span class="token comment">// 其实大致相当于  2^128 = 3.4028236692093846346337460743177e+38</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 0 00000000 00000000000000000000001</span></span>
<span class="line"><span class="token comment">// - 0.00000000000000000000001 * 2^(-126) = -1 * 2^(-126-23) = 1.4012984643248170709237295832899e-45</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 3.4028235E38</span></span>
<span class="line"><span class="token comment">// 1.4E-45</span></span>
<span class="line"><span class="token comment">// -3.4028235E38 ~ 3.4028235E38</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-char-的取值范围" tabindex="-1"><a class="header-anchor" href="#_3-char-的取值范围"><span>（3）char 的取值范围</span></a></h4><p>简单的聊聊字符编码：</p><p>思考：如果用</p><p><strong>ASCII</strong></p><p>（American Standard Code for Information Interchange，美国信息互换标准代码）</p><p>ASCII 第一次以规范标准的类型发表是在 1967 年，最后一次更新则是在 1986 年，到目前为止共定义了 128 个字符。ASCII 码，用一个字节表示，8 位能够表示 256 个字符，可以用来表示所有的大写和小写字母，数字 0 到 9、标点符号，以及在美式英语中使用的特殊控制字符，足够美国人用的了，事实上他们只用到了 128 个字符，还有位就空着了。</p><figure><img src="`+o+`" alt="image-20210809135408841" tabindex="0" loading="lazy"><figcaption>image-20210809135408841</figcaption></figure><p><strong>Unicode</strong></p><p>Unicode（统一码、万国码、单一码）是一种在计算机上使用的字符编码。Unicode 是为了解决传统的字符编码方案的局限而产生的，它为每种语言中的每个字符设定了统一并且唯一的二进制编码，规定虽有的字符和符号最少由 16 位来表示（2 个字节），即：2 ^16 = 65536（注：此处说的的是最少 2 个字节，可能更多）。</p><p><strong>GB2312</strong></p><p>把中国单独拉出来看，MBCS 时期，中国于 1980 年发布了 GB2312，就是国标的拼音，这个编码用区位码（94 个区，每区 94 个字符）的方式可以支持 7000 多个汉字，它所收录的汉字已经覆盖中国大陆 99.75%的使用频率，基本可以满足汉字计算机的需要了。</p><ul><li>gb2312 是简体中文的码</li><li>gbk 支持简体中文及繁体中文</li></ul><p><strong>UTF-8</strong></p><p>UTF-8，是对 Unicode 编码的压缩和优化，所以 UTF-8 包含于 Unicode，只是他不再使用最少使用 2 个字节，而是将所有的字符和符号进行分类：ascii 码中的内容用 1 个字节保存、欧洲的字符用 2 个字节保存，东亚的字符用 3 个字节保存</p><p>查看咱们的字符集</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span></span><span class="token class-name">Charset</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Charset</span><span class="token punctuation">.</span><span class="token function">defaultCharset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+d+`" alt="image-20210809135427632" tabindex="0" loading="lazy"><figcaption>image-20210809135427632</figcaption></figure><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">byte</span> num1 <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">byte</span> num2 <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">byte</span> num3 <span class="token operator">=</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、定义变量" tabindex="-1"><a class="header-anchor" href="#_2、定义变量"><span>2、定义变量</span></a></h3><p>变量就是一切通过内存分配并赋值的量，分为不可变变量和可变变量</p><p>变：能保存一些可变的量，比如年龄，收入等</p><p>便： 方便，一次定义，“到处”（作用域内）使用</p><h4 id="_1-过程" tabindex="-1"><a class="header-anchor" href="#_1-过程"><span>（1）过程</span></a></h4><ul><li>定义 <code>int i</code>;</li><li>赋值 <code>i = 5</code>; 定义和赋值可以一起 <code>int i = 5</code>;</li><li>使用；</li></ul><h4 id="_2-定义变量的规则-知名识意" tabindex="-1"><a class="header-anchor" href="#_2-定义变量的规则-知名识意"><span>（2）定义变量的规则（知名识意）</span></a></h4><ol><li>变量名字里不能有空格。</li><li>避免使用关键字，class public int static</li><li>避免使用汉字，不要使用英文和拼音混着写（只有字符集没问题才可以用中文）</li><li>整体是驼峰命名，首字母小写 lowerCamelCase</li><li>$和_可以到处使用，但是不建议当做开头</li><li>数字不能开头</li></ol><h3 id="_3、基础数据类型的运算" tabindex="-1"><a class="header-anchor" href="#_3、基础数据类型的运算"><span>3、基础数据类型的运算</span></a></h3><h4 id="_1-算术运算符" tabindex="-1"><a class="header-anchor" href="#_1-算术运算符"><span>（1）算术运算符</span></a></h4><div class="language-java" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line">  <span class="token operator">+</span>  <span class="token operator">-</span>  <span class="token operator">*</span>  <span class="token operator">/</span>   <span class="token operator">%</span>    <span class="token operator">++</span>   <span class="token operator">--</span></span>
<span class="line"></span></code></pre></div><p>%是除以一个数后取余数</p><p><code>i++</code>，<code>++i</code> 其实相当于 <code>i = i+1</code>;</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token operator">++</span>num1<span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">结果是<span class="token number">13</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">int num1 = 12;</span>
<span class="line">num1++;</span>
<span class="line">System.out.println(num1);</span>
<span class="line"></span>
<span class="line">结果是13</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> num2 <span class="token operator">=</span> num1<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">结果是：<span class="token number">12</span></span>
<span class="line">    先赋值后计算</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token operator">++</span>num1<span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">结果是：<span class="token number">13</span></span>
<span class="line">    先计算后赋值</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看看以下的代码：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">byte num1 = 12;</span>
<span class="line">long num2 = 13;</span>
<span class="line">long num3 = num1 + num2;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> num3 <span class="token operator">=</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num3<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结论：</p><p>算术运算符，int 以下的做运算，结果都是 int 类型，long 和其他的类型做运算，结果是 long。</p><p><strong>++i 和 i++的区别</strong></p><p>如果不赋值都是自增 1</p><p>如果赋值，<code>i++</code> 是 先把<code>i</code>赋值给其他变量，然后自增， <code>++i</code>是先赋值再自增。</p><h4 id="_2-逻辑运算符-真值表" tabindex="-1"><a class="header-anchor" href="#_2-逻辑运算符-真值表"><span>（2）逻辑运算符-真值表</span></a></h4><p>逻辑运算的结果是布尔型 boolean 与 或 非</p><p>与</p><table><thead><tr><th style="text-align:center;">条件 1 condition1</th><th style="text-align:center;">条件 2 condition2</th><th style="text-align:center;">结果</th></tr></thead><tbody><tr><td style="text-align:center;">true</td><td style="text-align:center;">true</td><td style="text-align:center;">true</td></tr><tr><td style="text-align:center;">true</td><td style="text-align:center;">false</td><td style="text-align:center;">false</td></tr><tr><td style="text-align:center;">false</td><td style="text-align:center;">true</td><td style="text-align:center;">false</td></tr><tr><td style="text-align:center;">false</td><td style="text-align:center;">false</td><td style="text-align:center;">false</td></tr></tbody></table><p>或</p><table><thead><tr><th style="text-align:center;">条件 1 condition1</th><th style="text-align:center;">条件 2 condition2</th><th style="text-align:center;">结果</th></tr></thead><tbody><tr><td style="text-align:center;">true</td><td style="text-align:center;">true</td><td style="text-align:center;">true</td></tr><tr><td style="text-align:center;">true</td><td style="text-align:center;">false</td><td style="text-align:center;">true</td></tr><tr><td style="text-align:center;">false</td><td style="text-align:center;">true</td><td style="text-align:center;">true</td></tr><tr><td style="text-align:center;">false</td><td style="text-align:center;">false</td><td style="text-align:center;">false</td></tr></tbody></table><p>非</p><table><thead><tr><th style="text-align:center;">条件 1 condition1</th><th style="text-align:center;">结果</th></tr></thead><tbody><tr><td style="text-align:center;">true</td><td style="text-align:center;">false</td></tr><tr><td style="text-align:center;">false</td><td style="text-align:center;">true</td></tr></tbody></table><p>符号表示</p><p><code>&amp;</code> <code>|</code> <code>!</code> <code>&amp;&amp;</code> <code>||</code></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">boolean</span> flag1 <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">boolean</span> flag2 <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">boolean</span> flag3 <span class="token operator">=</span> flag1 <span class="token operator">&amp;</span> flag2<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">boolean</span> flag4 <span class="token operator">=</span> flag1 <span class="token operator">|</span> flag2<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">boolean</span> flag5 <span class="token operator">=</span> <span class="token operator">!</span>flag1<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">boolean</span> flag6 <span class="token operator">=</span> num1 <span class="token operator">&gt;=</span> num2<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">boolean</span> flag7 <span class="token operator">=</span> num1 <span class="token operator">==</span> num2<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">boolean</span> flag8 <span class="token operator">=</span> <span class="token punctuation">(</span>num1 <span class="token operator">&gt;=</span> num2<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>num1 <span class="token operator">==</span> num2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>flag8<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>短路运算符</p><p><code>&amp;&amp;</code> 短路运算符 如果短路运算的结果是 false，那么结果直接就是 false， 不会继续运算后边的逻辑</p><p><code>||</code> 短路运算符 如果短路运算的结果是 true，那么结果直接就是 true， 不会继续运算后边的逻辑</p><p>看看以下代码：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">byte</span> num1 <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">byte</span> num2 <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">byte</span> num3 <span class="token operator">=</span> num1 <span class="token operator">&amp;</span> num2<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">byte num1 = 12;</span>
<span class="line">long num2 = 13;</span>
<span class="line">long num3 = num1 &amp; num2;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">char</span> c1 <span class="token operator">=</span> <span class="token char">&#39;1&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">char</span> c2 <span class="token operator">=</span> <span class="token char">&#39;2&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">char</span> c3 <span class="token operator">=</span> c1 <span class="token operator">&amp;</span> c1<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">System.out.println(&#39;a&#39;);</span>
<span class="line">System.out.println(&#39;a&#39;+&#39;b&#39;);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>亦或运算符</p><p><code>^</code> 相同为零 不同为 1</p><div class="language-Java line-numbers-mode" data-highlighter="prismjs" data-ext="Java"><pre><code class="language-Java"><span class="line">int i = 10;</span>
<span class="line">int j = 14;</span>
<span class="line">int k = i ^ j;</span>
<span class="line">System.out.println(k);</span>
<span class="line">//结果为4</span>
<span class="line">/** 1010(2)</span>
<span class="line">    1110(2)</span>
<span class="line">    ________</span>
<span class="line">    0100(2)==4(10) */</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-赋值运算符号" tabindex="-1"><a class="header-anchor" href="#_3-赋值运算符号"><span>（3）赋值运算符号</span></a></h4><div class="language-text" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">+= -= *= /= =</span>
<span class="line"></span></code></pre></div><p>i += 5 相当与 i = i + 5;</p><h4 id="_4-三目运算符" tabindex="-1"><a class="header-anchor" href="#_4-三目运算符"><span>（4）三目运算符</span></a></h4><p><code>条件 ? 结果1 : 结果2;</code></p><p>条件的结果一定是 boolean ，只能是 true 或者 false；</p><p>条件是可以复杂的</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">boolean</span> condition1 <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">&gt;</span> <span class="token number">3</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">boolean</span> condition2 <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">&gt;</span> <span class="token number">3</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">boolean</span> condition3 <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">&gt;</span> <span class="token number">3</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token punctuation">(</span>condition1 <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>condition2 <span class="token operator">||</span> condition3<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>? : 其实为 Java 中的<strong>三元运算符</strong>，表示条件判断语句，对布尔类型的语句进行判断，即 <code>A ? B : C</code>，表示：如果语句 A 为真，则执行语句 B，如果语句 A 为假，则执行语句 C。</p><h4 id="_6-位移运算符" tabindex="-1"><a class="header-anchor" href="#_6-位移运算符"><span>（6）位移运算符</span></a></h4><table><thead><tr><th>符号</th><th>说明</th></tr></thead><tbody><tr><td>&lt;&lt;</td><td>左移运算符，将运算符左边的对象向左移动运算符右边指定的位数（在低位补 0）</td></tr><tr><td>&gt;&gt;</td><td>&quot;有符号&quot;右移运算 符，将运算符左边的对象向右移动运算符右边指定的位数。使用符号扩展机制，也就是说，如果值为正，则在高位补 0，如果值为负，则在高位补 1.</td></tr><tr><td>&gt;&gt;&gt;</td><td>&quot;无符号&quot;右移运算 符，将运算符左边的对象向右移动运算符右边指定的位数。采用 0 扩展机制，也就是说，无论值的正负</td></tr></tbody></table><h3 id="_4、数据类型的转型" tabindex="-1"><a class="header-anchor" href="#_4、数据类型的转型"><span>4、数据类型的转型</span></a></h3><p><code>int</code>类型的变量转<code>long</code>，怎么转，自动转。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">152</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">long</span> num2 <span class="token operator">=</span> num1<span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>long</code>类型的变量转<code>int</code>，怎么转，强转。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">long</span> num1 <span class="token operator">=</span> <span class="token number">2345645645645464564L</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>num1<span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>float</code>类型转<code>long</code></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">float</span> num1 <span class="token operator">=</span> <span class="token number">234545654654654564564564.4F</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">long</span> num2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>num1<span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>long</code>类型转<code>float</code></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">long</span> num1 <span class="token operator">=</span> <span class="token number">2345645645645464564L</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">float</span> num2 <span class="token operator">=</span> num1<span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结论：</p><p>任何有精度缺失（有可能让两个数变成完全不一样的两个数）的转型都需要强转，jvm 不会给你负责。</p><p>取值范围大的转取值范围小的自动转，反之需要强转。</p>`,217)]))}const g=s(r,[["render",u]]),b=JSON.parse('{"path":"/codenotes/java/javase/java%E5%9F%BA%E7%A1%80.html","title":"计算机基础","lang":"zh-CN","frontmatter":{"title":"计算机基础","icon":"computer-fill","category":["javase"],"tag":["javase"],"sticky":false,"star":false,"article":false,"order":1,"timeline":false,"description":"提示 课程视频教程链接：https://www.bilibili.com/video/BV1h64y1i78N 1.命令提示符 Windows 键+R 输入 cmd 回车 输入盘符名+“：”切换盘符 上下键切换最近输入 CMD 命令：开始－>运行－>键入 cmd 或 command(在命令行里可以看到系统版本、文件系统版本) 进入某一个盘符 输入盘符 ...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"计算机基础\\",\\"description\\":\\"提示 课程视频教程链接：https://www.bilibili.com/video/BV1h64y1i78N 1.命令提示符 Windows 键+R 输入 cmd 回车 输入盘符名+“：”切换盘符 上下键切换最近输入 CMD 命令：开始－>运行－>键入 cmd 或 command(在命令行里可以看到系统版本、文件系统版本) 进入某一个盘符 输入盘符 ...\\"}"],["meta",{"property":"og:url","content":"https://www.stazxr.cn/my-notes/my-notes/codenotes/java/javase/java%E5%9F%BA%E7%A1%80.html"}],["meta",{"property":"og:site_name","content":"終わり群星の知识宝库"}],["meta",{"property":"og:title","content":"计算机基础"}],["meta",{"property":"og:description","content":"提示 课程视频教程链接：https://www.bilibili.com/video/BV1h64y1i78N 1.命令提示符 Windows 键+R 输入 cmd 回车 输入盘符名+“：”切换盘符 上下键切换最近输入 CMD 命令：开始－>运行－>键入 cmd 或 command(在命令行里可以看到系统版本、文件系统版本) 进入某一个盘符 输入盘符 ..."}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-10T18:17:47.000Z"}],["meta",{"property":"article:tag","content":"javase"}],["meta",{"property":"article:modified_time","content":"2025-06-10T18:17:47.000Z"}]]},"git":{"createdTime":1714921446000,"updatedTime":1749579467000,"contributors":[{"name":"talentestors","username":"talentestors","email":"talentestors@gmail.com","commits":8,"url":"https://github.com/talentestors"}]},"readingTime":{"minutes":12.6,"words":3780},"filePathRelative":"codenotes/java/javase/java基础.md","autoDesc":true}');export{g as comp,b as data};
